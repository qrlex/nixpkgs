Submodule libraries/Cabal 6c95f3fee3...10d80cee34:
diff --git a/libraries/Cabal/.github/PULL_REQUEST_TEMPLATE.md b/libraries/Cabal/.github/PULL_REQUEST_TEMPLATE.md
index b3b8349da..b85e12b02 100644
--- a/libraries/Cabal/.github/PULL_REQUEST_TEMPLATE.md
+++ b/libraries/Cabal/.github/PULL_REQUEST_TEMPLATE.md
@@ -5,5 +5,6 @@ Please include the following checklist in your PR:
 * [ ] Patches conform to the [coding conventions](https://github.com/haskell/cabal/blob/master/CONTRIBUTING.md#conventions).
 * [ ] Any changes that could be relevant to users [have been recorded in the changelog](https://github.com/haskell/cabal/blob/master/CONTRIBUTING.md#changelog).
 * [ ] The documentation has been updated, if necessary.
+* [ ] Include [manual QA notes](https://github.com/haskell/cabal/blob/master/CONTRIBUTING.md#qa-notes) if your PR relates to cabal-install.
 
-Please also shortly describe how you tested your change. Bonus points for added tests!
+Bonus points for added automated tests!
diff --git a/libraries/Cabal/.github/workflows/bootstrap.yml b/libraries/Cabal/.github/workflows/bootstrap.yml
index 1165e6a13..74a1d857f 100644
--- a/libraries/Cabal/.github/workflows/bootstrap.yml
+++ b/libraries/Cabal/.github/workflows/bootstrap.yml
@@ -19,10 +19,10 @@ jobs:
     strategy:
       matrix:
         os: [ubuntu-latest]
-        ghc: ["8.10.7", "9.0.2", "9.2.6", "9.4.4"]
+        ghc: ["8.10.7", "9.0.2", "9.2.7", "9.4.4"]
         include:
           - os: macos-latest
-            ghc: "9.2.6"
+            ghc: "9.2.7"
     name: Bootstrap ${{ matrix.os }} ghc-${{ matrix.ghc }}
     runs-on: ${{ matrix.os }}
     steps:
diff --git a/libraries/Cabal/.github/workflows/quick-jobs.yml b/libraries/Cabal/.github/workflows/quick-jobs.yml
index c36db9bd6..d309cc97c 100644
--- a/libraries/Cabal/.github/workflows/quick-jobs.yml
+++ b/libraries/Cabal/.github/workflows/quick-jobs.yml
@@ -47,7 +47,7 @@ jobs:
       - name: Update Hackage index
         run: cabal v2-update
       - name: Install alex
-        run: cabal v2-install alex --constraint='alex ==3.2.6'
+        run: cabal v2-install alex --constraint='alex ==3.2.7.3'
       - uses: actions/checkout@v3
       - name: Regenerate files
         run: |
diff --git a/libraries/Cabal/.github/workflows/validate.yml b/libraries/Cabal/.github/workflows/validate.yml
index 48f10d09e..b6f4f1bb9 100644
--- a/libraries/Cabal/.github/workflows/validate.yml
+++ b/libraries/Cabal/.github/workflows/validate.yml
@@ -9,7 +9,6 @@ defaults:
 # See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
 concurrency:
   group: ${{ github.ref }}-${{ github.workflow }}
-  cancel-in-progress: true
 
 on:
   push:
@@ -23,10 +22,10 @@ on:
 env:
   # We choose a stable ghc version across all os's
   # which will be used to do the next release
-  GHC_FOR_RELEASE: '9.2.3'
+  GHC_FOR_RELEASE: '9.2.7'
   # Ideally we should use the version about to be released for hackage tests and benchmarks
-  GHC_FOR_SOLVER_BENCHMARKS: '9.2.3'
-  GHC_FOR_COMPLETE_HACKAGE_TESTS: '9.2.3'
+  GHC_FOR_SOLVER_BENCHMARKS: '9.2.7'
+  GHC_FOR_COMPLETE_HACKAGE_TESTS: '9.2.7'
   COMMON_FLAGS: '-j 2 -v'
 
 jobs:
@@ -37,8 +36,8 @@ jobs:
       GHC_FOR_RELEASE: ${{ format('["{0}"]', env.GHC_FOR_RELEASE) }}
     strategy:
       matrix:
-        os: ["ubuntu-20.04", "macos-latest", "windows-latest"]
-        ghc: ["9.4.2", "9.2.3", "9.0.2", "8.10.7", "8.8.4", "8.6.5", "8.4.4"]
+        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
+        ghc: ["9.6.1", "9.4.4", "9.2.7", "9.0.2", "8.10.7", "8.8.4", "8.6.5", "8.4.4"]
         exclude:
           # corrupts GHA cache or the fabric of reality itself, see https://github.com/haskell/cabal/issues/8356
           - os: "windows-latest"
@@ -57,49 +56,27 @@ jobs:
 
       - uses: actions/checkout@v3
 
-      # See https://github.com/haskell/cabal/pull/8739
-      - name: Sudo chmod to permit ghcup to update its cache
-        run: |
-          if [[ "${{ runner.os }}" == "Linux" ]]; then
-            sudo ls -lah /usr/local/.ghcup/cache
-            sudo mkdir -p /usr/local/.ghcup/cache
-            sudo ls -lah /usr/local/.ghcup/cache
-            sudo chown -R $USER /usr/local/.ghcup
-            sudo chmod -R 777 /usr/local/.ghcup
-          fi
-      - uses: haskell/actions/setup@v2
-        id: setup-haskell
-        with:
-          ghc-version: ${{ matrix.ghc }}
-          cabal-version: '3.8.1.0'
-
       #  See the following link for a breakdown of the following step
       #  https://github.com/haskell/actions/issues/7#issuecomment-745697160
-      #
-      # See https://github.com/haskell/cabal/pull/8739 for why Windows is excluded
-      - if: ${{ runner.os != 'Windows' }}
-        uses: actions/cache@v3
+      - uses: actions/cache@v3
         with:
           # validate.sh uses a special build dir
           path: |
             ${{ steps.setup-haskell.outputs.cabal-store }}
             dist-*
-          key: ${{ runner.os }}-${{ matrix.ghc }}-20220419-${{ github.sha }}
-          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-20220419-
+          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ github.sha }}
+          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-
+
+      - uses: haskell/actions/setup@v2
+        id: setup-haskell
+        with:
+          ghc-version: ${{ matrix.ghc }}
+          cabal-version: '3.10.1.0'
 
       - name: Work around git problem https://bugs.launchpad.net/ubuntu/+source/git/+bug/1993586 (cabal PR #8546)
         run: |
           git config --global protocol.file.allow always
 
-      # The '+exe' constraint below is important, otherwise cabal-install
-      # might decide to build the library but not the executable which is
-      # what we need.
-      - name: Install cabal-plan
-        run: |
-          cd $(mktemp -d)
-          cabal install cabal-plan --constraint='cabal-plan +exe'
-          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
-
       # The tool is not essential to the rest of the test suite. If
       # hackage-repo-tool is not present, any test that requires it will
       # be skipped.
@@ -120,9 +97,6 @@ jobs:
       - name: Set validate inputs
         run: |
           FLAGS="${{ env.COMMON_FLAGS }}"
-          if [[ "${{ matrix.cli }}" == "false" ]]; then
-            FLAGS="$FLAGS --lib-only"
-          fi
           if [[ ${{ matrix.ghc }} == ${{ env.GHC_FOR_SOLVER_BENCHMARKS }} ]]; then
             FLAGS="$FLAGS --solver-benchmarks"
           fi
@@ -131,6 +105,11 @@ jobs:
           fi
           echo "FLAGS=$FLAGS" >> $GITHUB_ENV
 
+      - name: Allow newer dependencies when built with latest GHC
+        if: ${{ matrix.ghc }} == '9.6.1'
+        run: |
+          echo "allow-newer: rere:base, rere:transformers" >> cabal.project.validate
+
       - name: Validate print-config
         run: sh validate.sh $FLAGS -s print-config
 
@@ -141,13 +120,13 @@ jobs:
         run: sh validate.sh $FLAGS -s build
 
       - name: Tar cabal head executable
-        if: matrix.cli != 'false' && matrix.ghc == env.GHC_FOR_RELEASE
+        if: matrix.ghc == env.GHC_FOR_RELEASE
         run: |
-          CABAL_EXEC=$(cabal-plan list-bin --builddir=dist-newstyle-validate-ghc-${{ matrix.ghc }} cabal-install:exe:cabal)
+          CABAL_EXEC=$(cabal list-bin --builddir=dist-newstyle-validate-ghc-${{ matrix.ghc }} --project-file=cabal.project.validate cabal-install:exe:cabal)
           # We have to tar the executable to preserve executable permissions
           # see https://github.com/actions/upload-artifact/issues/38
           if [[ ${{ runner.os }} == 'Windows' ]]; then
-            # `cabal-plan` gives us a windows path but tar needs the posix one
+            # `cabal list-bin` gives us a windows path but tar needs the posix one
             CABAL_EXEC=$(cygpath $CABAL_EXEC)
           fi
           if [[ "${{ runner.os }}" == "macOS" ]]; then
@@ -163,7 +142,7 @@ jobs:
       # - Reuse it in the dogfooding job (although we could use the cached build dir)
       # - Make it available in the workflow to make easier testing it locally
       - name: Upload cabal-install executable to workflow artifacts
-        if: matrix.cli != 'false' && matrix.ghc == env.GHC_FOR_RELEASE
+        if: matrix.ghc == env.GHC_FOR_RELEASE
         uses: actions/upload-artifact@v3
         with:
           name: cabal-${{ runner.os }}-${{ matrix.ghc }}
@@ -177,147 +156,23 @@ jobs:
         run: sh validate.sh $FLAGS -s lib-tests
 
       - name: Validate lib-suite
+        # Have to disable *-suite validation:
+        # - the Windows@9.6.1 problem is tracked at https://github.com/haskell/cabal/issues/8858
+        # - but curently can't run it with GHC 9.6, tracking: https://github.com/haskell/cabal/issues/8883
+        if: (runner.os != 'Windows')  || (matrix.ghc != '9.6.1')
         run: sh validate.sh $FLAGS -s lib-suite
 
       - name: Validate cli-tests
-        if: matrix.cli != 'false'
         run: sh validate.sh $FLAGS -s cli-tests
 
       - name: Validate cli-suite
-        if: matrix.cli != 'false'
-        run: sh validate.sh $FLAGS -s cli-suite
-
-  # The job below is a copy-paste of validate with the necessary tweaks
-  # to make all work with an upcoming GHC. Those tweaks include:
-  # - ghcup needs the prerelease channel activated
-  # - allow-newer for base libraries and Cabal* libraries
-  # - (sometimes) disabling some parts on Windows because it's hard to figure
-  #   out why they fail
-  validate-prerelease:
-    name: Validate ${{ matrix.os }} ghc-prerelease
-    runs-on: ${{ matrix.os }}
-    outputs:
-      GHC_FOR_RELEASE: ${{ format('["{0}"]', env.GHC_FOR_RELEASE) }}
-    strategy:
-      matrix:
-        os: ["ubuntu-20.04", "macos-latest", "windows-latest"]
-
-    steps:
-
-      - uses: actions/checkout@v3
-
-      # See https://github.com/haskell/cabal/pull/8739
-      - name: Sudo chmod to permit ghcup to update its cache
-        run: |
-          if [[ "${{ runner.os }}" == "Linux" ]]; then
-            sudo ls -lah /usr/local/.ghcup/cache
-            sudo mkdir -p /usr/local/.ghcup/cache
-            sudo ls -lah /usr/local/.ghcup/cache
-            sudo chown -R $USER /usr/local/.ghcup
-            sudo chmod -R 777 /usr/local/.ghcup
-          fi
-
-      - name: ghcup
-        run: |
-          ghcup --version
-          ghcup config set cache true
-          ghcup config add-release-channel https://raw.githubusercontent.com/haskell/ghcup-metadata/master/ghcup-prereleases-0.0.7.yaml
-          ghcup install ghc --set 9.6.0.20230210
-          ghcup install cabal --set latest
-          ghc --version
-          cabal update
-
-      #  See the following link for a breakdown of the following step
-      #  https://github.com/haskell/actions/issues/7#issuecomment-745697160
-      #
-      # See https://github.com/haskell/cabal/pull/8739 for why Windows is excluded
-      - if: ${{ runner.os != 'Windows' }}
-        uses: actions/cache@v3
-        with:
-          # validate.sh uses a special build dir
-          path: |
-            ${{ steps.setup-haskell.outputs.cabal-store }}
-            dist-*
-          key: ${{ runner.os }}-${{ matrix.ghc }}-20220419-${{ github.sha }}
-          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-20220419-
-
-      - name: Work around git problem https://bugs.launchpad.net/ubuntu/+source/git/+bug/1993586 (cabal PR #8546)
-        run: |
-          git config --global protocol.file.allow always
-
-      # The '+exe' constraint below is important, otherwise cabal-install
-      # might decide to build the library but not the executable which is
-      # what we need.
-      - name: Install cabal-plan
-        run: |
-          cd $(mktemp -d)
-          cabal install cabal-plan --constraint='cabal-plan +exe' --allow-newer
-          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
-
-      # The tool is not essential to the rest of the test suite. If
-      # hackage-repo-tool is not present, any test that requires it will
-      # be skipped.
-      # We want to keep this in the loop but we don't want to fail if
-      # hackage-repo-tool breaks or fails to support a newer GHC version.
-      - name: Install hackage-repo-tool
-        continue-on-error: true
-        run: |
-          cd $(mktemp -d)
-          cabal install hackage-repo-tool
-
-      # Needed by cabal-testsuite/PackageTests/Configure/setup.test.hs
-      - name: Install Autotools
-        if: runner.os == 'macOS'
-        run: |
-          brew install automake
-
-      - name: Allow newer boot libraries
-        run: |
-          echo "allow-newer: base, template-haskell, ghc-prim, Cabal-syntax, Cabal-described, Cabal, cabal-install-solver, cabal-install" >> cabal.project.validate
-
-      - name: Set validate inputs
-        run: |
-          FLAGS="${{ env.COMMON_FLAGS }}"
-          if [[ "${{ matrix.cli }}" == "false" ]]; then
-            FLAGS="$FLAGS --lib-only"
-          fi
-          echo "FLAGS=$FLAGS" >> $GITHUB_ENV
-
-      - name: Validate print-config
-        run: sh validate.sh $FLAGS -s print-config
-
-      - name: Validate print-tool-versions
-        run: sh validate.sh $FLAGS -s print-tool-versions
-
-      - name: Validate build
-        run: sh validate.sh $FLAGS -s build
-
-      - name: Validate lib-tests
-        env:
-          # `rawSystemStdInOut reports text decoding errors`
-          # test does not find ghc without the full path in windows
-          GHCPATH: ${{ steps.setup-haskell.outputs.ghc-exe }}
-        run: sh validate.sh $FLAGS -s lib-tests
-
-      - name: Validate lib-suite
-        # see https://github.com/haskell/cabal/pull/8754#issuecomment-1435025848
-        # for discussion about the trouble on Windows
-        if: ${{ runner.os != 'Windows' }}
-        run: sh validate.sh $FLAGS -s lib-suite
-
-      - name: Validate cli-tests
-        if: matrix.cli != 'false'
-        run: sh validate.sh $FLAGS -s cli-tests
-
-      - name: Validate cli-suite
-        # see https://github.com/haskell/cabal/pull/8754#issuecomment-1435025848
-        # for discussion about the trouble on Windows
-        if: ( runner.os != 'Windows' ) && ( matrix.cli != 'false' )
+        # Have to disable *-suite validation, see above the comment for lib-suite
+        if: (runner.os != 'Windows')  || (matrix.ghc != '9.6.1')
         run: sh validate.sh $FLAGS -s cli-suite
 
   validate-old-ghcs:
     name: Validate old ghcs ${{ matrix.extra-ghc }}
-    runs-on: ubuntu-20.04
+    runs-on: ubuntu-latest
     needs: validate
     # This job needs an older ubuntu (16.04) cause
     # the required old ghcs using the `-dyn` flavour
@@ -357,7 +212,7 @@ jobs:
         id: setup-haskell
         with:
           ghc-version: ${{ matrix.ghc }}
-          cabal-version: '3.8.1.0'
+          cabal-version: latest # latest is mandatory for cabal-testsuite, see https://github.com/haskell/cabal/issues/8133
 
       # As we are reusing the cached build dir from the previous step
       # the generated artifacts are available here,
@@ -367,14 +222,8 @@ jobs:
           path: |
             ${{ steps.setup-haskell.outputs.cabal-store }}
             dist-*
-          key: ${{ runner.os }}-${{ matrix.ghc }}-20220419-${{ github.sha }}
-          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-20220419-
-
-      - name: Install cabal-plan
-        run: |
-          cd $(mktemp -d)
-          cabal install cabal-plan --constraint='cabal-plan +exe'
-          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
+          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ github.sha }}
+          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-
 
       - name: Validate build
         run: sh validate.sh ${{ env.COMMON_FLAGS }} -s build
@@ -393,7 +242,7 @@ jobs:
     needs: validate
     strategy:
       matrix:
-        os: ["ubuntu-20.04", "macos-latest", "windows-latest"]
+        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
         # We only use one ghc version the used one for the next release (defined at top of the workflow)
         # We need to build an array dynamically to inject the appropiate env var in a previous job,
         # see https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
@@ -418,12 +267,6 @@ jobs:
           ghc-version: ${{ matrix.ghc }}
           cabal-version: latest # default, we are not using it in this job
 
-      - name: Install cabal-plan
-        run: |
-          cd $(mktemp -d)
-          cabal install cabal-plan --constraint='cabal-plan +exe'
-          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
-
       - name: Download cabal executable from workflow artifacts
         uses: actions/download-artifact@v3
         with:
@@ -448,7 +291,7 @@ jobs:
   validate-post-job:
     if: always()
     name: Validate post job
-    runs-on: ubuntu-20.04
+    runs-on: ubuntu-latest
     # IMPORTANT! Any job added to the workflow should be added here too
     needs: [validate, validate-old-ghcs, dogfooding]
 
diff --git a/libraries/Cabal/.gitlab-ci.yml b/libraries/Cabal/.gitlab-ci.yml
index 3df905884..b9718af9e 100644
--- a/libraries/Cabal/.gitlab-ci.yml
+++ b/libraries/Cabal/.gitlab-ci.yml
@@ -26,24 +26,35 @@ workflow:
     paths:
       - out/*
 
-build-x86_64-linux:
+build-linux:
   extends: .build
   parallel:
     matrix:
-      - PLATFORM:
-        - i386-linux-deb9
-        - x86_64-linux-centos7
-        - x86_64-linux-deb9
-        - x86_64-linux-fedora33
-        - x86_64-linux-rocky8
-        - x86_64-linux-ubuntu18_04
-        - x86_64-linux-ubuntu20_04
-        - x86_64-linux-deb10
-        - x86_64-linux-deb11
+      - ARCH: i386
+        TAG: x86_64-linux
+        OS:
+          - deb9
+      - ARCH: x86_64
+        TAG: x86_64-linux
+        OS:
+          - centos7
+          - deb9
+          - fedora33
+          - rocky8
+          - ubuntu18_04
+          - ubuntu20_04
+          - deb10
+          - deb11
+      - ARCH: aarch64
+        TAG: aarch64-linux
+        OS:
+          - deb10
+          - deb11
   tags:
-    - x86_64-linux
+    - $TAG
   image: "registry.gitlab.haskell.org/ghc/ci-images/$PLATFORM:$DOCKER_REV"
   variables:
+    PLATFORM: "${ARCH}-linux-${OS}"
     TARBALL_ARCHIVE_SUFFIX: $PLATFORM
     TARBALL_EXT: tar.xz
     ADD_CABAL_ARGS: "--enable-split-sections"
diff --git a/libraries/Cabal/CONTRIBUTING.md b/libraries/Cabal/CONTRIBUTING.md
index 79db2f27b..dc75fe021 100644
--- a/libraries/Cabal/CONTRIBUTING.md
+++ b/libraries/Cabal/CONTRIBUTING.md
@@ -4,7 +4,8 @@ Building Cabal for hacking
 --------------------------
 
 The current recommended way of developing Cabal is to use the
-`v2-build` feature which [shipped in cabal-install-1.24](http://blog.ezyang.com/2016/05/announcing-cabal-new-build-nix-style-local-builds/).  If you use the latest version of cabal published on Hackage, it is sufficient to run:
+`v2-build` feature which [shipped in cabal-install-1.24](http://blog.ezyang.com/2016/05/announcing-cabal-new-build-nix-style-local-builds/).
+If you use the latest version of cabal published on Hackage, it is sufficient to run:
 
 ```
 cabal v2-build cabal
@@ -115,6 +116,26 @@ For these test executables, `-p` which applies a regex filter to the test
 names. When running `cabal-install` test suites, one need only use `cabal test` or
 `cabal run <test-target>` in order to test locally.
 
+QA Notes
+--------
+
+Manual Quality Assurance (QA) is performed to ensure that the changes impacting
+the command-line interface, whether adding or modifying a behaviour,
+are tested before being released. This allows us to catch UX regressions and put
+a human perspective into testing.
+
+Contributions that touch `cabal-install` are expected to include notes for the QA team.
+They are a description of an expected result upon calling `cabal-install` with certain parameters.
+
+For instance:
+
+> ## QA Notes
+> Calling `cabal haddock-project` should produce documentation for the whole cabal project with the following defaults enabled:
+> * Documentation lives in ./haddocks
+> * The file `./haddocks/index.html` should exist
+
+Manual QA is not expected to find every possible bug, but to really challenge the assumptions of the contributor, and to verify that their own testing
+of their patch is not influenced by their setup or implicit knowledge of the system.
 
 Whitespace Conventions
 ----------------------
diff --git a/libraries/Cabal/Cabal-QuickCheck/Cabal-QuickCheck.cabal b/libraries/Cabal/Cabal-QuickCheck/Cabal-QuickCheck.cabal
index 29a946235..cbdb8598b 100644
--- a/libraries/Cabal/Cabal-QuickCheck/Cabal-QuickCheck.cabal
+++ b/libraries/Cabal/Cabal-QuickCheck/Cabal-QuickCheck.cabal
@@ -1,6 +1,6 @@
 cabal-version: 2.2
 name:          Cabal-QuickCheck
-version:       3.10.1.0
+version:       3.11.0.0
 synopsis:      QuickCheck instances for types in Cabal
 category:      Testing
 description:
@@ -13,8 +13,8 @@ library
   build-depends:
     , base
     , bytestring
-    , Cabal         ^>=3.10.0.0
-    , Cabal-syntax  ^>=3.10.0.0
+    , Cabal         ^>=3.11.0.0
+    , Cabal-syntax  ^>=3.11.0.0
     , QuickCheck    ^>=2.13.2 || ^>=2.14
 
   exposed-modules:
diff --git a/libraries/Cabal/Cabal-described/Cabal-described.cabal b/libraries/Cabal/Cabal-described/Cabal-described.cabal
index 7458ee5f7..f5a5f49f6 100644
--- a/libraries/Cabal/Cabal-described/Cabal-described.cabal
+++ b/libraries/Cabal/Cabal-described/Cabal-described.cabal
@@ -1,6 +1,6 @@
 cabal-version: 2.2
 name:          Cabal-described
-version:       3.10.1.0
+version:       3.11.0.0
 synopsis:      Described functionality for types in Cabal
 category:      Testing, Parsec
 description:   Provides rere bindings
@@ -11,8 +11,8 @@ library
   ghc-options:      -Wall
   build-depends:
     , base
-    , Cabal             ^>=3.10.0.0
-    , Cabal-syntax      ^>=3.10.0.0
+    , Cabal             ^>=3.11.0.0
+    , Cabal-syntax      ^>=3.11.0.0
     , containers
     , pretty
     , QuickCheck
diff --git a/libraries/Cabal/Cabal-syntax/Cabal-syntax.cabal b/libraries/Cabal/Cabal-syntax/Cabal-syntax.cabal
index d4039a55f..ec70c014d 100644
--- a/libraries/Cabal/Cabal-syntax/Cabal-syntax.cabal
+++ b/libraries/Cabal/Cabal-syntax/Cabal-syntax.cabal
@@ -1,6 +1,6 @@
 cabal-version: 2.2
 name:          Cabal-syntax
-version:       3.10.1.0
+version:       3.11.0.0
 copyright:     2003-2023, Cabal Development Team (see AUTHORS file)
 license:       BSD-3-Clause
 license-file:  LICENSE
diff --git a/libraries/Cabal/Cabal-syntax/src/Distribution/Compat/Prelude.hs b/libraries/Cabal/Cabal-syntax/src/Distribution/Compat/Prelude.hs
index 954714dc8..8c79d27d9 100644
--- a/libraries/Cabal/Cabal-syntax/src/Distribution/Compat/Prelude.hs
+++ b/libraries/Cabal/Cabal-syntax/src/Distribution/Compat/Prelude.hs
@@ -125,7 +125,7 @@ module Distribution.Compat.Prelude (
     readMaybe,
 
     -- * Debug.Trace (as deprecated functions)
-    trace, traceShow, traceShowId,
+    trace, traceShow, traceShowId, traceM, traceShowM
     ) where
 
 -- We also could hide few partial function
@@ -286,3 +286,11 @@ traceShowId x = Debug.Trace.traceShow x x
 traceShow :: Show a => a -> b -> b
 traceShow = Debug.Trace.traceShow
 {-# DEPRECATED traceShow "Don't leave me in the code" #-}
+
+traceM :: Applicative f => String -> f ()
+traceM = Debug.Trace.traceM
+{-# DEPRECATED traceM "Don't leave me in the code" #-}
+
+traceShowM :: (Show a, Applicative f) => a -> f ()
+traceShowM = Debug.Trace.traceShowM
+{-# DEPRECATED traceShowM "Don't leave me in the code" #-}
diff --git a/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/Lexer.hs b/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/Lexer.hs
index 63388b36a..3d6e97763 100644
--- a/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/Lexer.hs
+++ b/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/Lexer.hs
@@ -1,7 +1,7 @@
 {-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-missing-signatures #-}
-{-# LANGUAGE CPP,MagicHash #-}
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE MagicHash #-}
 {-# LINE 1 "templates/Lexer.x" #-}
-
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  Distribution.Fields.Lexer
@@ -52,7 +52,6 @@ import qualified Data.Text   as T
 import qualified Data.Text.Encoding as T
 import qualified Data.Text.Encoding.Error as T
 #endif
-
 #if __GLASGOW_HASKELL__ >= 603
 #include "ghcconfig.h"
 #elif defined(__GLASGOW_HASKELL__)
@@ -73,106 +72,107 @@ alex_tab_size :: Int
 alex_tab_size = 8
 alex_base :: AlexAddr
 alex_base = AlexA#
-  "\x12\xff\xff\xff\xf9\xff\xff\xff\xfb\xff\xff\xff\x01\x00\x00\x00\x2f\x00\x00\x00\x50\x00\x00\x00\xd0\x00\x00\x00\x48\xff\xff\xff\xdc\xff\xff\xff\x51\xff\xff\xff\x6d\xff\xff\xff\x6f\xff\xff\xff\x50\x01\x00\x00\x74\x01\x00\x00\x70\xff\xff\xff\x68\x00\x00\x00\x09\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\xa3\x01\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6a\x00\x00\x00\xd1\x01\x00\x00\xfb\x01\x00\x00\x7b\x02\x00\x00\xfb\x02\x00\x00\x00\x00\x00\x00\x7b\x03\x00\x00\x7d\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x6d\x00\x00\x00\x6b\x00\x00\x00\xfc\x03\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x6f\x00\x00\x00\x1c\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00"#
+  "\x12\xff\xff\xff\xf9\xff\xff\xff\xfb\xff\xff\xff\x01\x00\x00\x00\x2f\x00\x00\x00\x50\x00\x00\x00\xd0\x00\x00\x00\x50\x01\x00\x00\xd0\x01\x00\x00\x50\x02\x00\x00\x81\x00\x00\x00\xfe\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x69\xff\xff\xff\x03\x00\x00\x00\x09\x00\x00\x00\xf8\x00\x00\x00\xe2\xff\xff\xff\xd0\x02\x00\x00\x71\xff\xff\xff\x0b\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x5f\xff\xff\xff\x5d\xff\xff\xff\x00\x00\x00\x00\xf0\x02\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x03\x00\x00\x6a\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x66\x03\x00\x00\x98\x00\x00\x00\x80\xff\xff\xff\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x03\x00\x00\x00\x00\x00\x00\xef\x03\x00\x00\x13\x04\x00\x00"#
 
 alex_table :: AlexAddr
 alex_table = AlexA#
-  "\x00\x00\x09\x00\x0f\x00\x11\x00\x02\x00\x11\x00\x12\x00\x00\x00\x12\x00\x13\x00\x03\x00\x11\x00\x07\x00\x10\x00\x12\x00\x25\x00\x14\x00\x11\x00\x10\x00\x11\x00\x14\x00\x11\x00\x12\x00\x23\x00\x12\x00\x0f\x00\x28\x00\x02\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x08\x00\x10\x00\x00\x00\x14\x00\x00\x00\x00\x00\x08\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2a\x00\x2e\x00\xff\xff\xff\xff\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\x28\x00\xff\xff\xff\xff\x29\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x26\x00\x0f\x00\x11\x00\x17\x00\x26\x00\x12\x00\x25\x00\x11\x00\x2a\x00\x00\x00\x12\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x17\x00\x26\x00\x00\x00\x25\x00\x00\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x00\x00\x00\x2d\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x0e\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\x23\x00\xff\xff\xff\xff\x24\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\x1e\x00\x0d\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00\x00\x1f\x00\x1f\x00\x1e\x00\x1e\x00\x1e\x00\x19\x00\x1a\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x1f\x00\x1e\x00\x1f\x00\x1e\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21\x00\x1e\x00\x22\x00\x1e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x1d\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x0c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\xff\xff\x1e\x00\x1e\x00\x1e\x00\x1e\x00\xff\xff\xff\xff\xff\xff\x1e\x00\x1e\x00\x1e\x00\x18\x00\x1a\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x1e\x00\xff\xff\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x1e\x00\xff\xff\x1e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\x00\xff\xff\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00\x00\xff\xff\xff\xff\x1e\x00\x1e\x00\x1e\x00\x1a\x00\x1a\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x1e\x00\xff\xff\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x1e\x00\xff\xff\x1e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x1c\x00\x1e\x00\x00\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x1e\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\xff\xff\x1e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#
+  "\x00\x00\x18\x00\x11\x00\x17\x00\x02\x00\x17\x00\x16\x00\x0b\x00\x16\x00\x0f\x00\x03\x00\x17\x00\x0f\x00\x17\x00\x16\x00\x13\x00\x16\x00\x15\x00\x10\x00\x17\x00\x15\x00\x17\x00\x16\x00\x17\x00\x16\x00\x11\x00\x19\x00\x02\x00\x1a\x00\x1c\x00\x0b\x00\x22\x00\x10\x00\x03\x00\x27\x00\x0f\x00\x00\x00\x00\x00\x12\x00\x00\x00\x12\x00\x10\x00\x00\x00\x15\x00\x00\x00\x00\x00\x12\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\x1c\x00\xff\xff\xff\xff\x1d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x25\x00\x22\x00\xff\xff\xff\xff\x23\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x25\x00\x00\x00\x00\x00\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x0c\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x21\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x1e\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x14\x00\x00\x00\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x26\x00\x00\x00\x14\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\x00\x27\x00\xff\xff\xff\xff\x28\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\x00\x2d\x00\x1b\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\x2c\x00\x2c\x00\x2d\x00\x2d\x00\x2d\x00\x08\x00\x09\x00\x2d\x00\xff\xff\x11\x00\x17\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x00\x2d\x00\x2c\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x2d\x00\x29\x00\x2d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\xff\xff\xff\xff\x2d\x00\x2d\x00\x2d\x00\x0a\x00\x09\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x2d\x00\xff\xff\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x2d\x00\xff\xff\x2d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\xff\xff\xff\xff\x2d\x00\x2d\x00\x2d\x00\x09\x00\x09\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x2d\x00\xff\xff\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x2d\x00\xff\xff\x2d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x2e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\xff\xff\x2d\x00\xff\xff\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x00\x00\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x00\x00\x00\x2d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x2e\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x2f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#
 
 alex_check :: AlexAddr
 alex_check = AlexA#
-  "\xff\xff\xef\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x0d\x00\xbf\x00\x0d\x00\x2d\x00\x09\x00\x0a\x00\xbb\x00\xa0\x00\x0d\x00\xa0\x00\xa0\x00\x0a\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x0d\x00\x0a\x00\x0d\x00\x20\x00\x0a\x00\x20\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\x2d\x00\x20\x00\xff\xff\x20\x00\xff\xff\xff\xff\x2d\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x09\x00\x0a\x00\x09\x00\x09\x00\x0d\x00\x09\x00\x0a\x00\x09\x00\xff\xff\x0d\x00\xff\xff\x7b\x00\xff\xff\x7d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\xff\xff\x20\x00\x20\x00\xff\xff\x20\x00\xff\xff\x20\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\xff\xff\x7d\x00\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc2\x00\xff\xff\xc2\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc2\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc2\x00\xff\xff\xc2\x00\xff\xff\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3a\x00\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc2\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\xc2\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\x22\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\x22\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x5c\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x00\x5c\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\xff\xff\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x7f\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3a\x00\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5b\x00\x5c\x00\x5d\x00\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3a\x00\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5b\x00\x5c\x00\x5d\x00\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3a\x00\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5b\x00\x5c\x00\x5d\x00\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\x22\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\xff\xff\xff\xff\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\x5c\x00\xff\xff\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7c\x00\x7f\x00\x7e\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\xff\xff\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\xff\xff\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\xff\xff\x7d\x00\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#
+  "\xff\xff\xef\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x0d\x00\x09\x00\x0d\x00\xa0\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x0d\x00\x2d\x00\x0d\x00\xa0\x00\x09\x00\x0a\x00\x09\x00\x0a\x00\x0d\x00\x0a\x00\x0d\x00\x20\x00\xbb\x00\x20\x00\xbf\x00\x0a\x00\x20\x00\x0a\x00\xa0\x00\x20\x00\x0a\x00\x20\x00\xff\xff\xff\xff\x2d\x00\xff\xff\x2d\x00\x20\x00\xff\xff\x20\x00\xff\xff\xff\xff\x2d\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\xff\xff\xff\xff\x09\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\xff\xff\x7d\x00\xff\xff\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x20\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x09\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\xff\xff\x7d\x00\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\xff\xff\xff\xff\xc2\x00\xff\xff\xc2\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc2\x00\xff\xff\xc2\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc2\x00\xff\xff\xc2\x00\xff\xff\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\x7f\x00\x09\x00\x0a\x00\xff\xff\xff\xff\x0d\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3a\x00\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x2d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5b\x00\x5c\x00\x5d\x00\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3a\x00\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5b\x00\x5c\x00\x5d\x00\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc2\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3a\x00\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5b\x00\x5c\x00\x5d\x00\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3a\x00\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5b\x00\x5c\x00\x5d\x00\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\xff\xff\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\x22\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\xff\xff\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x7f\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\xff\xff\x7d\x00\x21\x00\x7f\x00\x23\x00\x24\x00\x25\x00\x26\x00\xff\xff\xff\xff\xff\xff\x2a\x00\x2b\x00\x2c\x00\x2d\x00\x2e\x00\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\x5e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7c\x00\xff\xff\x7e\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\x22\x00\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\x09\x00\x0a\x00\x0b\x00\x0c\x00\x0d\x00\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x13\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\xff\xff\xff\xff\x22\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x00\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#
 
 alex_deflt :: AlexAddr
 alex_deflt = AlexA#
-  "\xff\xff\xff\xff\xff\xff\xff\xff\x2b\x00\x27\x00\x1b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0d\x00\x0d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\xff\xff\xff\xff\x18\x00\x1b\x00\x1b\x00\x1b\x00\xff\xff\x0d\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x27\x00\xff\xff\xff\xff\xff\xff\x2b\x00\xff\xff\xff\xff\xff\xff\xff\xff"#
+  "\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\x24\x00\x07\x00\x07\x00\x07\x00\x07\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1b\x00\xff\xff\xff\xff\xff\xff\xff\xff\x20\x00\xff\xff\xff\xff\xff\xff\x24\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1b\x00\x1b\x00"#
 
-alex_accept = listArray (0 :: Int, 47)
-  [ AlexAcc 29
+alex_accept = listArray (0 :: Int, 48)
+  [ AlexAcc 30
+  , AlexAcc 29
   , AlexAcc 28
   , AlexAcc 27
-  , AlexAcc 26
-  , AlexAccNone
-  , AlexAccNone
-  , AlexAccNone
-  , AlexAccNone
-  , AlexAccNone
-  , AlexAccNone
-  , AlexAccNone
-  , AlexAccNone
-  , AlexAccNone
-  , AlexAccNone
   , AlexAccNone
   , AlexAccNone
   , AlexAccNone
+  , AlexAcc 26
   , AlexAcc 25
   , AlexAcc 24
   , AlexAccSkip
+  , AlexAccSkip
   , AlexAcc 23
   , AlexAcc 22
+  , AlexAccNone
   , AlexAcc 21
-  , AlexAccSkip
-  , AlexAccSkip
   , AlexAcc 20
+  , AlexAccNone
+  , AlexAccNone
+  , AlexAccSkip
+  , AlexAccNone
+  , AlexAccNone
   , AlexAcc 19
   , AlexAcc 18
+  , AlexAccNone
+  , AlexAccNone
   , AlexAcc 17
+  , AlexAccNone
   , AlexAcc 16
   , AlexAcc 15
   , AlexAcc 14
   , AlexAcc 13
   , AlexAcc 12
+  , AlexAccSkip
   , AlexAcc 11
   , AlexAcc 10
   , AlexAcc 9
-  , AlexAcc 8
   , AlexAccSkip
+  , AlexAccNone
+  , AlexAcc 8
   , AlexAcc 7
   , AlexAcc 6
   , AlexAcc 5
-  , AlexAccSkip
   , AlexAcc 4
   , AlexAcc 3
   , AlexAcc 2
   , AlexAcc 1
   , AlexAcc 0
+  , AlexAccNone
   ]
 
-alex_actions = array (0 :: Int, 30)
-  [ (29,alex_action_0)
-  , (28,alex_action_20)
-  , (27,alex_action_16)
-  , (26,alex_action_3)
-  , (25,alex_action_1)
-  , (24,alex_action_1)
-  , (23,alex_action_3)
+alex_actions = array (0 :: Int, 31)
+  [ (30,alex_action_0)
+  , (29,alex_action_20)
+  , (28,alex_action_16)
+  , (27,alex_action_3)
+  , (26,alex_action_8)
+  , (25,alex_action_8)
+  , (24,alex_action_8)
+  , (23,alex_action_5)
   , (22,alex_action_4)
-  , (21,alex_action_5)
-  , (20,alex_action_8)
-  , (19,alex_action_8)
-  , (18,alex_action_8)
-  , (17,alex_action_9)
-  , (16,alex_action_9)
-  , (15,alex_action_10)
-  , (14,alex_action_11)
-  , (13,alex_action_12)
-  , (12,alex_action_13)
-  , (11,alex_action_14)
-  , (10,alex_action_15)
-  , (9,alex_action_15)
-  , (8,alex_action_16)
-  , (7,alex_action_18)
-  , (6,alex_action_19)
-  , (5,alex_action_19)
-  , (4,alex_action_22)
-  , (3,alex_action_23)
-  , (2,alex_action_24)
-  , (1,alex_action_25)
-  , (0,alex_action_25)
+  , (21,alex_action_3)
+  , (20,alex_action_16)
+  , (19,alex_action_1)
+  , (18,alex_action_1)
+  , (17,alex_action_0)
+  , (16,alex_action_25)
+  , (15,alex_action_25)
+  , (14,alex_action_24)
+  , (13,alex_action_23)
+  , (12,alex_action_22)
+  , (11,alex_action_19)
+  , (10,alex_action_19)
+  , (9,alex_action_18)
+  , (8,alex_action_15)
+  , (7,alex_action_15)
+  , (6,alex_action_14)
+  , (5,alex_action_13)
+  , (4,alex_action_12)
+  , (3,alex_action_11)
+  , (2,alex_action_10)
+  , (1,alex_action_9)
+  , (0,alex_action_9)
   ]
 
 {-# LINE 151 "templates/Lexer.x" #-}
-
 -- | Tokens of outer cabal file structure. Field values are treated opaquely.
 data Token = TokSym   !ByteString       -- ^ Haskell-like identifier, number or operator
            | TokStr   !ByteString       -- ^ String in quotes
@@ -195,17 +195,17 @@ toki t pos  len  input = return $! L pos (t (B.take len input))
 tok :: Token -> Position -> Int -> ByteString -> Lex LToken
 tok  t pos _len _input = return $! L pos t
 
-checkLeadingWhitespace :: Int -> ByteString -> Lex Int
-checkLeadingWhitespace len bs
+checkLeadingWhitespace :: Position -> Int -> ByteString -> Lex Int
+checkLeadingWhitespace pos len bs
     | B.any (== 9) (B.take len bs) = do
-        addWarning LexWarningTab
-        checkWhitespace len bs
-    | otherwise = checkWhitespace len bs
+        addWarningAt pos LexWarningTab
+        checkWhitespace pos len bs
+    | otherwise = checkWhitespace pos len bs
 
-checkWhitespace :: Int -> ByteString -> Lex Int
-checkWhitespace len bs
+checkWhitespace :: Position -> Int -> ByteString -> Lex Int
+checkWhitespace pos len bs
     | B.any (== 194) (B.take len bs) = do
-        addWarning LexWarningNBSP
+        addWarningAt pos LexWarningNBSP
         return $ len - B.count 194 (B.take len bs)
     | otherwise = return len
 
@@ -313,40 +313,42 @@ bol_section = 3
 in_field_braces = 4
 in_field_layout = 5
 in_section = 6
-alex_action_0 =  \_ len _ -> do
-              when (len /= 0) $ addWarning LexWarningBOM
+alex_action_0 = \pos len _ -> do
+              when (len /= 0) $ addWarningAt pos LexWarningBOM
               setStartCode bol_section
               lexToken
-         
-alex_action_1 =  \_pos len inp -> checkWhitespace len inp >> adjustPos retPos >> lexToken 
-alex_action_3 =  \pos len inp -> checkLeadingWhitespace len inp >>
+alex_action_1 = \pos len inp -> checkWhitespace pos len inp >> adjustPos retPos >> lexToken
+alex_action_3 = \pos len inp -> checkLeadingWhitespace pos len inp >>
                                      if B.length inp == len
                                        then return (L pos EOF)
                                        else setStartCode in_section
-                                         >> return (L pos (Indent len)) 
-alex_action_4 =  tok  OpenBrace 
-alex_action_5 =  tok  CloseBrace 
-alex_action_8 =  toki TokSym 
-alex_action_9 =  \pos len inp -> return $! L pos (TokStr (B.take (len - 2) (B.tail inp))) 
-alex_action_10 =  toki TokOther 
-alex_action_11 =  toki TokOther 
-alex_action_12 =  tok  Colon 
-alex_action_13 =  tok  OpenBrace 
-alex_action_14 =  tok  CloseBrace 
-alex_action_15 =  \_ _ _ -> adjustPos retPos >> setStartCode bol_section >> lexToken 
-alex_action_16 =  \pos len inp -> checkLeadingWhitespace len inp >>= \len' ->
+                                         >> return (L pos (Indent len))
+alex_action_4 = tok  OpenBrace
+alex_action_5 = tok  CloseBrace
+alex_action_8 = toki TokSym
+alex_action_9 = \pos len inp -> return $! L pos (TokStr (B.take (len - 2) (B.tail inp)))
+alex_action_10 = toki TokOther
+alex_action_11 = toki TokOther
+alex_action_12 = tok  Colon
+alex_action_13 = tok  OpenBrace
+alex_action_14 = tok  CloseBrace
+alex_action_15 = \_ _ _ -> adjustPos retPos >> setStartCode bol_section >> lexToken
+alex_action_16 = \pos len inp -> checkLeadingWhitespace pos len inp >>= \len' ->
                                   if B.length inp == len
                                     then return (L pos EOF)
                                     else setStartCode in_field_layout
-                                      >> return (L pos (Indent len')) 
-alex_action_18 =  toki TokFieldLine 
-alex_action_19 =  \_ _ _ -> adjustPos retPos >> setStartCode bol_field_layout >> lexToken 
-alex_action_20 =  \_ _ _ -> setStartCode in_field_braces >> lexToken 
-alex_action_22 =  toki TokFieldLine 
-alex_action_23 =  tok  OpenBrace  
-alex_action_24 =  tok  CloseBrace 
-alex_action_25 =  \_ _ _ -> adjustPos retPos >> setStartCode bol_field_braces >> lexToken 
-{-# LINE 1 "templates/GenericTemplate.hs" #-}
+                                      >> return (L pos (Indent len'))
+alex_action_18 = toki TokFieldLine
+alex_action_19 = \_ _ _ -> adjustPos retPos >> setStartCode bol_field_layout >> lexToken
+alex_action_20 = \_ _ _ -> setStartCode in_field_braces >> lexToken
+alex_action_22 = toki TokFieldLine
+alex_action_23 = tok  OpenBrace
+alex_action_24 = tok  CloseBrace
+alex_action_25 = \_ _ _ -> adjustPos retPos >> setStartCode bol_field_braces >> lexToken
+
+#define ALEX_GHC 1
+#define ALEX_LATIN1 1
+#define ALEX_NOPRED 1
 -- -----------------------------------------------------------------------------
 -- ALEX TEMPLATE
 --
@@ -356,15 +358,37 @@ alex_action_25 =  \_ _ _ -> adjustPos retPos >> setStartCode bol_field_braces >>
 -- -----------------------------------------------------------------------------
 -- INTERNALS and main scanner engine
 
+#ifdef ALEX_GHC
+#  define ILIT(n) n#
+#  define IBOX(n) (I# (n))
+#  define FAST_INT Int#
 -- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
-#if __GLASGOW_HASKELL__ > 706
-#define GTE(n,m) (tagToEnum# (n >=# m))
-#define EQ(n,m) (tagToEnum# (n ==# m))
+#  if __GLASGOW_HASKELL__ > 706
+#    define GTE(n,m) (tagToEnum# (n >=# m))
+#    define EQ(n,m) (tagToEnum# (n ==# m))
+#  else
+#    define GTE(n,m) (n >=# m)
+#    define EQ(n,m) (n ==# m)
+#  endif
+#  define PLUS(n,m) (n +# m)
+#  define MINUS(n,m) (n -# m)
+#  define TIMES(n,m) (n *# m)
+#  define NEGATE(n) (negateInt# (n))
+#  define IF_GHC(x) (x)
 #else
-#define GTE(n,m) (n >=# m)
-#define EQ(n,m) (n ==# m)
+#  define ILIT(n) (n)
+#  define IBOX(n) (n)
+#  define FAST_INT Int
+#  define GTE(n,m) (n >= m)
+#  define EQ(n,m) (n == m)
+#  define PLUS(n,m) (n + m)
+#  define MINUS(n,m) (n - m)
+#  define TIMES(n,m) (n * m)
+#  define NEGATE(n) (negate (n))
+#  define IF_GHC(x)
 #endif
 
+#ifdef ALEX_GHC
 data AlexAddr = AlexA# Addr#
 -- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
 #if __GLASGOW_HASKELL__ < 503
@@ -387,7 +411,11 @@ alexIndexInt16OffAddr (AlexA# arr) off =
 #endif
     (indexInt16OffAddr# arr off)
 #endif
+#else
+alexIndexInt16OffAddr arr off = arr ! off
+#endif
 
+#ifdef ALEX_GHC
 {-# INLINE alexIndexInt32OffAddr #-}
 alexIndexInt32OffAddr :: AlexAddr -> Int# -> Int#
 alexIndexInt32OffAddr (AlexA# arr) off =
@@ -408,6 +436,11 @@ alexIndexInt32OffAddr (AlexA# arr) off =
 #endif
     (indexInt32OffAddr# arr off)
 #endif
+#else
+alexIndexInt32OffAddr arr off = arr ! off
+#endif
+
+#ifdef ALEX_GHC
 
 #if __GLASGOW_HASKELL__ < 503
 quickIndex arr i = arr ! i
@@ -415,6 +448,9 @@ quickIndex arr i = arr ! i
 -- GHC >= 503, unsafeAt is available from Data.Array.Base.
 quickIndex = unsafeAt
 #endif
+#else
+quickIndex arr i = arr ! i
+#endif
 
 -- -----------------------------------------------------------------------------
 -- Main lexing routines
@@ -426,26 +462,34 @@ data AlexReturn a
   | AlexToken  !AlexInput !Int a
 
 -- alexScan :: AlexInput -> StartCode -> AlexReturn a
-alexScan input__ (I# (sc))
-  = alexScanUser undefined input__ (I# (sc))
+alexScan input__ IBOX(sc)
+  = alexScanUser undefined input__ IBOX(sc)
 
-alexScanUser user__ input__ (I# (sc))
-  = case alex_scan_tkn user__ input__ 0# input__ sc AlexNone of
+alexScanUser user__ input__ IBOX(sc)
+  = case alex_scan_tkn user__ input__ ILIT(0) input__ sc AlexNone of
   (AlexNone, input__') ->
     case alexGetByte input__ of
       Nothing ->
-
+#ifdef ALEX_DEBUG
+                                   trace ("End of input.") $
+#endif
                                    AlexEOF
       Just _ ->
-
+#ifdef ALEX_DEBUG
+                                   trace ("Error.") $
+#endif
                                    AlexError input__'
 
   (AlexLastSkip input__'' len, _) ->
-
+#ifdef ALEX_DEBUG
+    trace ("Skipping.") $
+#endif
     AlexSkip input__'' len
 
   (AlexLastAcc k input__''' len, _) ->
-
+#ifdef ALEX_DEBUG
+    trace ("Accept.") $
+#endif
     AlexToken input__''' len (alex_actions ! k)
 
 -- Push the input through the DFA, remembering the most recent accepting
@@ -454,35 +498,56 @@ alexScanUser user__ input__ (I# (sc))
 alex_scan_tkn user__ orig_input len input__ s last_acc =
   input__ `seq` -- strict in the input
   let
-  new_acc = (check_accs (alex_accept `quickIndex` (I# (s))))
+  new_acc = (check_accs (alex_accept `quickIndex` IBOX(s)))
   in
   new_acc `seq`
   case alexGetByte input__ of
      Nothing -> (new_acc, input__)
      Just (c, new_input) ->
-
-      case fromIntegral c of { (I# (ord_c)) ->
+#ifdef ALEX_DEBUG
+      trace ("State: " ++ show IBOX(s) ++ ", char: " ++ show c) $
+#endif
+      case fromIntegral c of { IBOX(ord_c) ->
         let
                 base   = alexIndexInt32OffAddr alex_base s
-                offset = (base +# ord_c)
-                check  = alexIndexInt16OffAddr alex_check offset
+                offset = PLUS(base,ord_c)
 
-                new_s = if GTE(offset,0#) && EQ(check,ord_c)
+                new_s = if GTE(offset,ILIT(0))
+                          && let check  = alexIndexInt16OffAddr alex_check offset
+                             in  EQ(check,ord_c)
                           then alexIndexInt16OffAddr alex_table offset
                           else alexIndexInt16OffAddr alex_deflt s
         in
         case new_s of
-            -1# -> (new_acc, input__)
+            ILIT(-1) -> (new_acc, input__)
                 -- on an error, we want to keep the input *before* the
                 -- character that failed, not after.
-            _ -> alex_scan_tkn user__ orig_input (if c < 0x80 || c >= 0xC0 then (len +# 1#) else len)
-                                                -- note that the length is increased ONLY if this is the 1st byte in a char encoding)
-                        new_input new_s new_acc
+            _ -> alex_scan_tkn user__ orig_input
+#ifdef ALEX_LATIN1
+                   PLUS(len,ILIT(1))
+                   -- issue 119: in the latin1 encoding, *each* byte is one character
+#else
+                   (if c < 0x80 || c >= 0xC0 then PLUS(len,ILIT(1)) else len)
+                   -- note that the length is increased ONLY if this is the 1st byte in a char encoding)
+#endif
+                   new_input new_s new_acc
       }
   where
         check_accs (AlexAccNone) = last_acc
-        check_accs (AlexAcc a  ) = AlexLastAcc a input__ (I# (len))
-        check_accs (AlexAccSkip) = AlexLastSkip  input__ (I# (len))
+        check_accs (AlexAcc a  ) = AlexLastAcc a input__ IBOX(len)
+        check_accs (AlexAccSkip) = AlexLastSkip  input__ IBOX(len)
+#ifndef ALEX_NOPRED
+        check_accs (AlexAccPred a predx rest)
+           | predx user__ orig_input IBOX(len) input__
+           = AlexLastAcc a input__ IBOX(len)
+           | otherwise
+           = check_accs rest
+        check_accs (AlexAccSkipPred predx rest)
+           | predx user__ orig_input IBOX(len) input__
+           = AlexLastSkip input__ IBOX(len)
+           | otherwise
+           = check_accs rest
+#endif
 
 data AlexLastAcc
   = AlexNone
@@ -493,4 +558,32 @@ data AlexAcc user
   = AlexAccNone
   | AlexAcc Int
   | AlexAccSkip
+#ifndef ALEX_NOPRED
+  | AlexAccPred Int (AlexAccPred user) (AlexAcc user)
+  | AlexAccSkipPred (AlexAccPred user) (AlexAcc user)
+
+type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool
 
+-- -----------------------------------------------------------------------------
+-- Predicates on a rule
+
+alexAndPred p1 p2 user__ in1 len in2
+  = p1 user__ in1 len in2 && p2 user__ in1 len in2
+
+--alexPrevCharIsPred :: Char -> AlexAccPred _
+alexPrevCharIs c _ input__ _ _ = c == alexInputPrevChar input__
+
+alexPrevCharMatches f _ input__ _ _ = f (alexInputPrevChar input__)
+
+--alexPrevCharIsOneOfPred :: Array Char Bool -> AlexAccPred _
+alexPrevCharIsOneOf arr _ input__ _ _ = arr ! alexInputPrevChar input__
+
+--alexRightContext :: Int -> AlexAccPred _
+alexRightContext IBOX(sc) user__ _ _ input__ =
+     case alex_scan_tkn user__ input__ ILIT(0) input__ sc AlexNone of
+          (AlexNone, _) -> False
+          _ -> True
+        -- TODO: there's no need to find the longest
+        -- match when checking the right context, just
+        -- the first match will do.
+#endif
diff --git a/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/LexerMonad.hs b/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/LexerMonad.hs
index 3c11fac92..ac414c18e 100644
--- a/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/LexerMonad.hs
+++ b/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/LexerMonad.hs
@@ -27,6 +27,7 @@ module Distribution.Fields.LexerMonad (
     LexWarning(..),
     LexWarningType(..),
     addWarning,
+    addWarningAt,
     toPWarnings,
 
   ) where
@@ -153,3 +154,8 @@ setStartCode c = Lex $ \s -> LexResult s{ curCode = c } ()
 addWarning :: LexWarningType -> Lex ()
 addWarning wt = Lex $ \s@LexState{ curPos = pos, warnings = ws  } ->
     LexResult s{ warnings = LexWarning wt pos : ws } ()
+
+-- | Add warning at specific position
+addWarningAt :: Position -> LexWarningType -> Lex ()
+addWarningAt pos wt = Lex $ \s@LexState{ warnings = ws  } ->
+    LexResult s{ warnings = LexWarning wt pos : ws } ()
diff --git a/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/Pretty.hs b/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/Pretty.hs
index 3c6ff8c0a..dabea67b6 100644
--- a/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/Pretty.hs
+++ b/libraries/Cabal/Cabal-syntax/src/Distribution/Fields/Pretty.hs
@@ -59,7 +59,7 @@ showFields rann = showFields' rann (const id) 4
 -- | 'showFields' with user specified indentation.
 showFields'
   :: (ann -> CommentPosition)
-     -- ^ Convert an annotation to lined to preceed the field or section.
+     -- ^ Convert an annotation to lined to precede the field or section.
   -> (ann -> [String] -> [String])
      -- ^ Post-process non-annotation produced lines.
   -> Int
diff --git a/libraries/Cabal/Cabal-tests/Cabal-tests.cabal b/libraries/Cabal/Cabal-tests/Cabal-tests.cabal
index ce49eab8e..bb42abc7f 100644
--- a/libraries/Cabal/Cabal-tests/Cabal-tests.cabal
+++ b/libraries/Cabal/Cabal-tests/Cabal-tests.cabal
@@ -95,7 +95,7 @@ test-suite parser-tests
     , tasty-golden      >=2.3.1.1 && <2.4
     , tasty-hunit
     , tasty-quickcheck
-    , tree-diff         >=0.1     && <0.3
+    , tree-diff         >=0.1     && <0.4
 
   ghc-options:      -Wall
   default-language: Haskell2010
@@ -161,7 +161,7 @@ test-suite hackage-tests
     , optparse-applicative  >=0.13.2.0 && <0.17
     , stm                   >=2.4.5.0  && <2.6
     , tar                   >=0.5.0.3  && <0.6
-    , tree-diff             >=0.1      && <0.3
+    , tree-diff             >=0.1      && <0.4
 
   ghc-options:        -Wall -rtsopts -threaded
   default-extensions: CPP
diff --git a/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/Octree-0.5.format b/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/Octree-0.5.format
index 432c3bba9..7d72803f0 100644
--- a/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/Octree-0.5.format
+++ b/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/Octree-0.5.format
@@ -1,4 +1,4 @@
-Octree-0.5.cabal:39:3: Non breaking spaces at 39:3, 41:3, 43:3
+Octree-0.5.cabal:39:1: Non breaking spaces at 39:1, 41:1, 43:1
 cabal-version: >=1.8
 name:          Octree
 version:       0.5
diff --git a/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/monad-param.format b/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/monad-param.format
index 5c0ba1b81..360a94bc8 100644
--- a/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/monad-param.format
+++ b/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/monad-param.format
@@ -1,4 +1,4 @@
-monad-param.cabal:19:3: Tabs used as indentation at 19:3, 20:3
+monad-param.cabal:19:1: Tabs used as indentation at 19:1, 20:1
 name:         monad-param
 version:      0.0.1
 license:      BSD3
diff --git a/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/th-lift-instances.format b/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/th-lift-instances.format
index df2f77dd7..8fe757995 100644
--- a/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/th-lift-instances.format
+++ b/libraries/Cabal/Cabal-tests/tests/ParserTests/regressions/th-lift-instances.format
@@ -1,4 +1,4 @@
-th-lift-instances.cabal:15:9: Tabs used as indentation at 15:9
+th-lift-instances.cabal:15:1: Tabs used as indentation at 15:1
 cabal-version:      >=1.10
 name:               th-lift-instances
 version:            0.1.4
diff --git a/libraries/Cabal/Cabal-tests/tests/UnitTests/Distribution/Utils/Structured.hs b/libraries/Cabal/Cabal-tests/tests/UnitTests/Distribution/Utils/Structured.hs
index 7d68bb251..8c677f990 100644
--- a/libraries/Cabal/Cabal-tests/tests/UnitTests/Distribution/Utils/Structured.hs
+++ b/libraries/Cabal/Cabal-tests/tests/UnitTests/Distribution/Utils/Structured.hs
@@ -29,7 +29,7 @@ tests = testGroup "Distribution.Utils.Structured"
     , testCase "GenericPackageDescription" $
       md5Check (Proxy :: Proxy GenericPackageDescription) 0xa3e9433662ecf0c7a3c26f6d75a53ba1
     , testCase "LocalBuildInfo" $
-      md5Check (Proxy :: Proxy LocalBuildInfo) 0x91ffcd61bbd83525e8edba877435a031
+      md5Check (Proxy :: Proxy LocalBuildInfo) 0x30ebb8fffa1af2aefa9432ff4028eef8
 #endif
     ]
 
diff --git a/libraries/Cabal/Cabal-tree-diff/Cabal-tree-diff.cabal b/libraries/Cabal/Cabal-tree-diff/Cabal-tree-diff.cabal
index 3d3e8087b..34e0b6de0 100644
--- a/libraries/Cabal/Cabal-tree-diff/Cabal-tree-diff.cabal
+++ b/libraries/Cabal/Cabal-tree-diff/Cabal-tree-diff.cabal
@@ -1,6 +1,6 @@
 cabal-version: 2.2
 name:          Cabal-tree-diff
-version:       3.10.1.0
+version:       3.11.0.0
 synopsis:      QuickCheck instances for types in Cabal
 category:      Testing
 description:   Provides tree-diff ToExpr instances for some types in Cabal
@@ -11,9 +11,9 @@ library
   ghc-options:      -Wall
   build-depends:
     , base
-    , Cabal-syntax  ^>=3.10.0.0
-    , Cabal         ^>=3.10.0.0
-    , tree-diff     ^>=0.1 || ^>=0.2
+    , Cabal-syntax  ^>=3.11.0.0
+    , Cabal         ^>=3.11.0.0
+    , tree-diff     ^>=0.1 || ^>=0.2 || ^>=0.3
 
   exposed-modules:  Data.TreeDiff.Instances.Cabal
   other-modules:
diff --git a/libraries/Cabal/Cabal/Cabal.cabal b/libraries/Cabal/Cabal/Cabal.cabal
index bbe963f26..b1049bc5c 100644
--- a/libraries/Cabal/Cabal/Cabal.cabal
+++ b/libraries/Cabal/Cabal/Cabal.cabal
@@ -1,6 +1,6 @@
 cabal-version: 2.2
 name:          Cabal
-version:       3.10.1.0
+version:       3.11.0.0
 copyright:     2003-2023, Cabal Development Team (see AUTHORS file)
 license:       BSD-3-Clause
 license-file:  LICENSE
@@ -34,7 +34,7 @@ library
   hs-source-dirs: src
 
   build-depends:
-    Cabal-syntax ^>= 3.10,
+    Cabal-syntax ^>= 3.11,
     array      >= 0.4.0.1  && < 0.6,
     base       >= 4.9      && < 5,
     bytestring >= 0.10.0.0 && < 0.12,
@@ -326,6 +326,20 @@ library
     Distribution.Simple.GHC.Internal
     Distribution.Simple.GHC.ImplInfo
     Distribution.Simple.ConfigureScript
+    Distribution.Simple.Setup.Benchmark
+    Distribution.Simple.Setup.Build
+    Distribution.Simple.Setup.Clean
+    Distribution.Simple.Setup.Common
+    Distribution.Simple.Setup.Config
+    Distribution.Simple.Setup.Copy
+    Distribution.Simple.Setup.Global
+    Distribution.Simple.Setup.Haddock
+    Distribution.Simple.Setup.Hscolour
+    Distribution.Simple.Setup.Install
+    Distribution.Simple.Setup.Register
+    Distribution.Simple.Setup.Repl
+    Distribution.Simple.Setup.SDist
+    Distribution.Simple.Setup.Test
     Distribution.ZinzaPrelude
     Paths_Cabal
 
diff --git a/libraries/Cabal/Cabal/Makefile b/libraries/Cabal/Cabal/Makefile
index 851582680..4215e971b 100644
--- a/libraries/Cabal/Cabal/Makefile
+++ b/libraries/Cabal/Cabal/Makefile
@@ -1,4 +1,4 @@
-VERSION=3.10.1.0
+VERSION=3.11.0.0
 
 #KIND=devel
 KIND=rc
diff --git a/libraries/Cabal/Cabal/src/Distribution/Backpack/Configure.hs b/libraries/Cabal/Cabal/src/Distribution/Backpack/Configure.hs
index e2a75946d..cfa962854 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Backpack/Configure.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Backpack/Configure.hs
@@ -36,7 +36,7 @@ import qualified Distribution.Simple.PackageIndex as PackageIndex
 import Distribution.Simple.PackageIndex (InstalledPackageIndex)
 import Distribution.PackageDescription
 import Distribution.ModuleName
-import Distribution.Simple.Setup as Setup
+import Distribution.Simple.Flag
 import Distribution.Simple.LocalBuildInfo
 import Distribution.Types.AnnotatedId
 import Distribution.Types.ComponentRequestedSpec
@@ -46,6 +46,7 @@ import Distribution.Verbosity
 import qualified Distribution.Compat.Graph as Graph
 import Distribution.Compat.Graph (Graph, IsNode(..))
 import Distribution.Utils.LogProgress
+import Distribution.Backpack.ModuleShape
 
 import Data.Either
     ( lefts )
@@ -66,7 +67,7 @@ configureComponentLocalBuildInfos
     -> Flag String            -- configIPID
     -> Flag ComponentId       -- configCID
     -> PackageDescription
-    -> [PreExistingComponent]
+    -> ([PreExistingComponent], [PromisedComponent])
     -> FlagAssignment         -- configConfigurationsFlags
     -> [(ModuleName, Module)] -- configInstantiateWith
     -> InstalledPackageIndex
@@ -74,7 +75,7 @@ configureComponentLocalBuildInfos
     -> LogProgress ([ComponentLocalBuildInfo], InstalledPackageIndex)
 configureComponentLocalBuildInfos
     verbosity use_external_internal_deps enabled deterministic ipid_flag cid_flag pkg_descr
-    prePkgDeps flagAssignment instantiate_with installedPackageSet comp = do
+    (prePkgDeps, promisedPkgDeps) flagAssignment instantiate_with installedPackageSet comp = do
     -- NB: In single component mode, this returns a *single* component.
     -- In this graph, the graph is NOT closed.
     graph0 <- case mkComponentsGraph enabled pkg_descr of
@@ -92,6 +93,10 @@ configureComponentLocalBuildInfos
                                 ann_cname = pc_compname pkg
                               }))
             | pkg <- prePkgDeps]
+            `Map.union`
+            Map.fromListWith Map.union
+            [ (pkg, Map.singleton (ann_cname aid) aid)
+            | PromisedComponent pkg aid <- promisedPkgDeps]
     graph1 <- toConfiguredComponents use_external_internal_deps
                     flagAssignment
                     deterministic ipid_flag cid_flag pkg_descr
@@ -102,13 +107,19 @@ configureComponentLocalBuildInfos
     let shape_pkg_map = Map.fromList
             [ (pc_cid pkg, (pc_open_uid pkg, pc_shape pkg))
             | pkg <- prePkgDeps]
+            `Map.union`
+            Map.fromList
+            [ (ann_id aid, (DefiniteUnitId (unsafeMkDefUnitId
+                            (mkUnitId (unComponentId (ann_id aid) )))
+                           ,  emptyModuleShape))
+            | PromisedComponent _ aid <- promisedPkgDeps]
         uid_lookup def_uid
             | Just pkg <- PackageIndex.lookupUnitId installedPackageSet uid
             = FullUnitId (Installed.installedComponentId pkg)
                  (Map.fromList (Installed.instantiatedWith pkg))
             | otherwise = error ("uid_lookup: " ++ prettyShow uid)
           where uid = unDefUnitId def_uid
-    graph2 <- toLinkedComponents verbosity uid_lookup
+    graph2 <- toLinkedComponents verbosity (not (null promisedPkgDeps)) uid_lookup
                     (package pkg_descr) shape_pkg_map graph1
 
     infoProgress $
@@ -129,7 +140,7 @@ configureComponentLocalBuildInfos
     infoProgress $ hang (text "Ready component graph:") 4
                         (vcat (map dispReadyComponent graph4))
 
-    toComponentLocalBuildInfos comp installedPackageSet pkg_descr prePkgDeps graph4
+    toComponentLocalBuildInfos comp installedPackageSet promisedPkgDeps pkg_descr prePkgDeps graph4
 
 ------------------------------------------------------------------------------
 -- ComponentLocalBuildInfo
@@ -138,13 +149,14 @@ configureComponentLocalBuildInfos
 toComponentLocalBuildInfos
     :: Compiler
     -> InstalledPackageIndex -- FULL set
+    -> [PromisedComponent]
     -> PackageDescription
     -> [PreExistingComponent] -- external package deps
     -> [ReadyComponent]
     -> LogProgress ([ComponentLocalBuildInfo],
                     InstalledPackageIndex) -- only relevant packages
 toComponentLocalBuildInfos
-    comp installedPackageSet pkg_descr externalPkgDeps graph = do
+    comp installedPackageSet promisedPkgDeps pkg_descr externalPkgDeps graph = do
     -- Check and make sure that every instantiated component exists.
     -- We have to do this now, because prior to linking/instantiating
     -- we don't actually know what the full set of 'UnitId's we need
@@ -178,9 +190,15 @@ toComponentLocalBuildInfos
         --
         packageDependsIndex = PackageIndex.fromList (lefts local_graph)
         fullIndex = Graph.fromDistinctList local_graph
+
     case Graph.broken fullIndex of
         [] -> return ()
-        broken ->
+        -- If there are promised dependencies, we don't know what the dependencies
+        -- of these are and that can easily lead to a broken graph. So assume that
+        -- any promised package is not broken (ie all its dependencies, transitively,
+        -- will be there). That's a promise.
+        broken | not (null promisedPkgDeps) -> return ()
+               | otherwise ->
           -- TODO: ppr this
           dieProgress . text $
                 "The following packages are broken because other"
diff --git a/libraries/Cabal/Cabal/src/Distribution/Backpack/ConfiguredComponent.hs b/libraries/Cabal/Cabal/src/Distribution/Backpack/ConfiguredComponent.hs
index 69178e048..a061637b1 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Backpack/ConfiguredComponent.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Backpack/ConfiguredComponent.hs
@@ -36,7 +36,7 @@ import Distribution.Types.ComponentInclude
 import Distribution.Package
 import Distribution.PackageDescription
 import Distribution.Simple.BuildToolDepends
-import Distribution.Simple.Setup as Setup
+import Distribution.Simple.Flag ( Flag )
 import Distribution.Simple.LocalBuildInfo
 import Distribution.Utils.LogProgress
 import Distribution.Utils.MapAccum
@@ -177,22 +177,22 @@ toConfiguredComponent pkg_descr this_cid lib_dep_map exe_dep_map component = do
         if newPackageDepsBehaviour pkg_descr
             then fmap concat $ forM (targetBuildDepends bi) $
                  \(Dependency name _ sublibs) -> do
-                    pkg <- case Map.lookup name lib_dep_map of
+                    case Map.lookup name lib_dep_map of
                         Nothing ->
                             dieProgress $
                                 text "Dependency on unbuildable" <+>
                                 text "package" <+> pretty name
-                        Just p -> return p
-                    -- Return all library components
-                    forM (NonEmptySet.toList sublibs) $ \lib ->
-                        let comp = CLibName lib in
-                        case Map.lookup comp pkg of
-                            Nothing ->
-                                dieProgress $
-                                    text "Dependency on unbuildable" <+>
-                                    text (showLibraryName lib) <+>
-                                    text "from" <+> pretty name
-                            Just v -> return v
+                        Just pkg -> do
+                          -- Return all library components
+                         forM (NonEmptySet.toList sublibs) $ \lib ->
+                             let comp = CLibName lib in
+                             case Map.lookup comp pkg of
+                                 Nothing ->
+                                     dieProgress $
+                                         text "Dependency on unbuildable" <+>
+                                         text (showLibraryName lib) <+>
+                                         text "from" <+> pretty name
+                                 Just v -> return v
             else return old_style_lib_deps
     mkConfiguredComponent
        pkg_descr this_cid
diff --git a/libraries/Cabal/Cabal/src/Distribution/Backpack/Id.hs b/libraries/Cabal/Cabal/src/Distribution/Backpack/Id.hs
index 6f78418af..9e1de8502 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Backpack/Id.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Backpack/Id.hs
@@ -13,7 +13,7 @@ import Distribution.Compat.Prelude
 import Distribution.Types.UnqualComponentName
 import Distribution.Simple.Compiler
 import Distribution.PackageDescription
-import Distribution.Simple.Setup as Setup
+import Distribution.Simple.Flag ( Flag(..) )
 import qualified Distribution.Simple.InstallDirs as InstallDirs
 import Distribution.Simple.LocalBuildInfo
 import Distribution.Types.ComponentId
diff --git a/libraries/Cabal/Cabal/src/Distribution/Backpack/LinkedComponent.hs b/libraries/Cabal/Cabal/src/Distribution/Backpack/LinkedComponent.hs
index 797fef251..731743503 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Backpack/LinkedComponent.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Backpack/LinkedComponent.hs
@@ -114,12 +114,13 @@ instance Package LinkedComponent where
 
 toLinkedComponent
     :: Verbosity
+    -> Bool -- ^ Whether there are any "promised" package dependencies which we won't find already installed.
     -> FullDb
     -> PackageId
     -> LinkedComponentMap
     -> ConfiguredComponent
     -> LogProgress LinkedComponent
-toLinkedComponent verbosity db this_pid pkg_map ConfiguredComponent {
+toLinkedComponent verbosity anyPromised db this_pid pkg_map ConfiguredComponent {
     cc_ann_id = aid@AnnotatedId { ann_id = this_cid },
     cc_component = component,
     cc_exe_deps = exe_deps,
@@ -276,9 +277,14 @@ toLinkedComponent verbosity db this_pid pkg_map ConfiguredComponent {
           case filter (\x' -> unWithSource x /= unWithSource x') xs of
             [] -> return ()
             _ -> Left $ ambiguousReexportMsg reex x xs
-          return (to, unWithSource x)
+          return (to, Just (unWithSource x))
         _ ->
-          Left (brokenReexportMsg reex)
+          -- Can't resolve it right now.. carry on with the assumption it will be resolved
+          -- dynamically later by an in-memory package which hasn't been installed yet.
+          if anyPromised
+            then return (to, Nothing)
+            -- But if nothing is promised, eagerly report an error, as we already know everything.
+            else Left (brokenReexportMsg reex)
 
     -- TODO: maybe check this earlier; it's syntactically obvious.
     let build_reexports m (k, v)
@@ -289,8 +295,27 @@ toLinkedComponent verbosity db this_pid pkg_map ConfiguredComponent {
     provs <- foldM build_reexports Map.empty $
                 -- TODO: doublecheck we have checked for
                 -- src_provs duplicates already!
-                [ (mod_name, OpenModule this_uid mod_name) | mod_name <- src_provs ] ++
-                reexports_list
+                -- These are normal module exports.
+                [ (mod_name, (OpenModule this_uid mod_name)) | mod_name <- src_provs ]
+                ++
+                 -- These are reexports, which we managed to resolve to something in an external package.
+                 [(mn_new, om) | (mn_new, Just om) <- reexports_list ]
+                ++
+                -- These ones.. we didn't resolve but also we might not have to
+                -- resolve them because they could come from a promised unit,
+                -- which we don't know anything about yet. GHC will resolve
+                -- these itself when it is dealing with the multi-session.
+                -- These ones will not be built, registered and put
+                -- into a package database, we only need them to make it as far
+                -- as generating GHC options where the info will be used to
+                -- pass the reexported-module option to GHC.
+
+                -- We also know that in the case there are promised units that
+                -- we will not be doing anything to do with backpack like
+                -- unification etc..
+                 [ (mod_name, OpenModule (DefiniteUnitId (unsafeMkDefUnitId
+                                          (mkUnitId "fake"))) mod_name)
+                 | (mod_name, Nothing) <- reexports_list ]
 
     let final_linked_shape = ModuleShape provs (Map.keysSet (modScopeRequires linked_shape))
 
@@ -337,12 +362,14 @@ toLinkedComponent verbosity db this_pid pkg_map ConfiguredComponent {
 -- every ComponentId gets converted into a UnitId by way of SimpleUnitId.
 toLinkedComponents
     :: Verbosity
+    -> Bool -- ^ Whether there are any "promised" package dependencies which we won't
+            -- find already installed.
     -> FullDb
     -> PackageId
     -> LinkedComponentMap
     -> [ConfiguredComponent]
     -> LogProgress [LinkedComponent]
-toLinkedComponents verbosity db this_pid lc_map0 comps
+toLinkedComponents verbosity anyPromised db this_pid lc_map0 comps
    = fmap snd (mapAccumM go lc_map0 comps)
  where
   go :: Map ComponentId (OpenUnitId, ModuleShape)
@@ -350,7 +377,7 @@ toLinkedComponents verbosity db this_pid lc_map0 comps
      -> LogProgress (Map ComponentId (OpenUnitId, ModuleShape), LinkedComponent)
   go lc_map cc = do
     lc <- addProgressCtx (text "In the stanza" <+> text (componentNameStanza (cc_name cc))) $
-            toLinkedComponent verbosity db this_pid lc_map cc
+            toLinkedComponent verbosity anyPromised db this_pid lc_map cc
     return (extendLinkedComponentMap lc lc_map, lc)
 
 type LinkedComponentMap = Map ComponentId (OpenUnitId, ModuleShape)
diff --git a/libraries/Cabal/Cabal/src/Distribution/Backpack/PreExistingComponent.hs b/libraries/Cabal/Cabal/src/Distribution/Backpack/PreExistingComponent.hs
index 2fcfdf1cc..31bda7862 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Backpack/PreExistingComponent.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Backpack/PreExistingComponent.hs
@@ -1,6 +1,7 @@
 -- | See <https://github.com/ezyang/ghc-proposals/blob/backpack/proposals/0000-backpack.rst>
 module Distribution.Backpack.PreExistingComponent (
     PreExistingComponent(..),
+    PromisedComponent(..),
     ipiToPreExistingComponent,
 ) where
 
@@ -20,6 +21,21 @@ import Distribution.Package
 import qualified Data.Map as Map
 import qualified Distribution.InstalledPackageInfo as Installed
 import Distribution.InstalledPackageInfo (InstalledPackageInfo)
+import Distribution.Types.AnnotatedId
+
+-- | A /promised/ component.
+--
+-- These components are promised to @configure@ but are not yet built.
+--
+-- In other words this is 'PreExistingComponent' which doesn't yet exist.
+--
+data PromisedComponent = PromisedComponent
+    { pr_pkgname :: PackageName
+    , pr_cid     :: AnnotatedId ComponentId
+    }
+
+instance Package PromisedComponent where
+  packageId = packageId . pr_cid
 
 -- | Stripped down version of 'LinkedComponent' for things
 -- we don't need to know how to build.
diff --git a/libraries/Cabal/Cabal/src/Distribution/Compat/ResponseFile.hs b/libraries/Cabal/Cabal/src/Distribution/Compat/ResponseFile.hs
index db0a92994..6e14b5bf7 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Compat/ResponseFile.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Compat/ResponseFile.hs
@@ -3,7 +3,7 @@
 -- Compatibility layer for GHC.ResponseFile
 -- Implementation from base 4.12.0 is used.
 -- http://hackage.haskell.org/package/base-4.12.0.0/src/LICENSE
-module Distribution.Compat.ResponseFile (expandResponse) where
+module Distribution.Compat.ResponseFile (expandResponse, escapeArgs) where
 
 import Distribution.Compat.Prelude
 import Prelude ()
@@ -13,7 +13,7 @@ import System.IO (hPutStrLn, stderr)
 import System.IO.Error
 
 #if MIN_VERSION_base(4,12,0)
-import GHC.ResponseFile (unescapeArgs)
+import GHC.ResponseFile (unescapeArgs, escapeArgs)
 #else
 
 unescapeArgs :: String -> [String]
@@ -47,6 +47,20 @@ unescape args = reverse . map reverse $ go args NoneQ False [] []
         | '"'  == c              = go cs DblQ  False a     as
         | otherwise              = go cs NoneQ False (c:a) as
 
+escapeArgs :: [String] -> String
+escapeArgs = unlines . map escapeArg
+
+escapeArg :: String -> String
+escapeArg = reverse . foldl' escape []
+
+escape :: String -> Char -> String
+escape cs c
+  |    isSpace c
+    || '\\' == c
+    || '\'' == c
+    || '"'  == c = c:'\\':cs -- n.b., our caller must reverse the result
+  | otherwise    = c:cs
+
 #endif
 
 expandResponse :: [String] -> IO [String]
diff --git a/libraries/Cabal/Cabal/src/Distribution/PackageDescription/Check.hs b/libraries/Cabal/Cabal/src/Distribution/PackageDescription/Check.hs
index 5d11072b3..e602a9a6e 100644
--- a/libraries/Cabal/Cabal/src/Distribution/PackageDescription/Check.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/PackageDescription/Check.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE LambdaCase #-}
+
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  Distribution.PackageDescription.Check
@@ -28,6 +30,7 @@ module Distribution.PackageDescription.Check (
         checkConfiguredPackage,
         wrapParseWarning,
         ppPackageCheck,
+        isHackageDistError,
 
         -- ** Checking package contents
         checkPackageFiles,
@@ -846,6 +849,15 @@ data PackageCheck =
      | PackageDistInexcusable { explanation :: CheckExplanation }
   deriving (Eq, Ord)
 
+-- | Would Hackage refuse a package because of this error?
+isHackageDistError :: PackageCheck -> Bool
+isHackageDistError = \case
+    (PackageBuildImpossible {}) -> True
+    (PackageBuildWarning {}) -> True
+    (PackageDistInexcusable {}) -> True
+    (PackageDistSuspicious {}) -> False
+    (PackageDistSuspiciousWarn {}) -> False
+
 -- | Pretty printing 'PackageCheck'.
 --
 ppPackageCheck :: PackageCheck -> String
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Bench.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Bench.hs
index d2a3b5106..6484654c0 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Bench.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Bench.hs
@@ -27,7 +27,8 @@ import Distribution.Simple.BuildPaths
 import Distribution.Simple.Compiler
 import Distribution.Simple.InstallDirs
 import qualified Distribution.Simple.LocalBuildInfo as LBI
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag ( fromFlag )
+import Distribution.Simple.Setup.Benchmark
 import Distribution.Simple.UserHooks
 import Distribution.Simple.Utils
 import Distribution.Pretty
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Build.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Build.hs
index 7f658c560..04659830f 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Build.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Build.hs
@@ -65,7 +65,10 @@ import qualified Distribution.InstalledPackageInfo as IPI
 import Distribution.InstalledPackageInfo (InstalledPackageInfo)
 import qualified Distribution.ModuleName as ModuleName
 
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag
+import Distribution.Simple.Setup.Build
+import Distribution.Simple.Setup.Config
+import Distribution.Simple.Setup.Repl
 import Distribution.Simple.BuildTarget
 import Distribution.Simple.BuildToolDepends
 import Distribution.Simple.PreProcess
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/BuildPaths.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/BuildPaths.hs
index 189de5478..f909078a1 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/BuildPaths.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/BuildPaths.hs
@@ -49,7 +49,8 @@ import Distribution.ModuleName as ModuleName
 import Distribution.Compiler
 import Distribution.PackageDescription
 import Distribution.Simple.LocalBuildInfo
-import Distribution.Simple.Setup
+import Distribution.Simple.Setup.Haddock (HaddockTarget(..))
+import Distribution.Simple.Setup.Common (defaultDistPref)
 import Distribution.Pretty
 import Distribution.System
 import Distribution.Verbosity
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Configure.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Configure.hs
index ac7bd852f..14e984c7d 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Configure.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Configure.hs
@@ -73,7 +73,8 @@ import Distribution.PackageDescription.Configuration
 import Distribution.PackageDescription.Check hiding (doesFileExist)
 import Distribution.Simple.BuildToolDepends
 import Distribution.Simple.Program
-import Distribution.Simple.Setup as Setup
+import Distribution.Simple.Setup.Config as Setup
+import Distribution.Simple.Setup.Common as Setup
 import Distribution.Simple.BuildTarget
 import Distribution.Simple.LocalBuildInfo
 import Distribution.Types.PackageVersionConstraint
@@ -132,6 +133,7 @@ import Distribution.Compat.Environment ( lookupEnv )
 import qualified Data.Maybe as M
 import qualified Data.Set as Set
 import qualified Distribution.Compat.NonEmptySet as NES
+import Distribution.Types.AnnotatedId
 
 
 type UseExternalInternalDeps = Bool
@@ -439,6 +441,8 @@ configure (pkg_descr0, pbi) cfg = do
                                   (configDependencies cfg)
                                   installedPackageSet
 
+    let promisedDepsSet = mkPromisedDepsSet (configPromisedDependencies cfg)
+
     -- pkg_descr:   The resolved package description, that does not contain any
     --              conditionals, because we have an assignment for
     --              every flag, either picking them ourselves using a
@@ -465,6 +469,7 @@ configure (pkg_descr0, pbi) cfg = do
                     (packageName pkg_descr0)
                     installedPackageSet
                     internalPackageSet
+                    promisedDepsSet
                     requiredDepsMap)
                 comp
                 compPlatform
@@ -500,11 +505,12 @@ configure (pkg_descr0, pbi) cfg = do
     -- For one it's deterministic; for two, we need to associate
     -- them with renamings which would require a far more complicated
     -- input scheme than what we have today.)
-    externalPkgDeps :: [PreExistingComponent]
+    externalPkgDeps :: ([PreExistingComponent], [PromisedComponent])
         <- configureDependencies
                 verbosity
                 use_external_internal_deps
                 internalPackageSet
+                promisedDepsSet
                 installedPackageSet
                 requiredDepsMap
                 pkg_descr
@@ -625,7 +631,7 @@ configure (pkg_descr0, pbi) cfg = do
                         _ | split_sections
                           -> do warn verbosity
                                      ("--enable-split-sections and " ++
-                                      "--enable-split-objs are mutually" ++
+                                      "--enable-split-objs are mutually " ++
                                       "exclusive; ignoring the latter")
                                 return False
                         GHC
@@ -760,6 +766,7 @@ configure (pkg_descr0, pbi) cfg = do
                 componentGraph      = Graph.fromDistinctList buildComponents,
                 componentNameMap    = buildComponentsMap,
                 installedPkgs       = packageDependsIndex,
+                promisedPkgs        = promisedDepsSet,
                 pkgDescrFile        = Nothing,
                 localPkgDescr       = pkg_descr',
                 withPrograms        = programDb'',
@@ -843,6 +850,9 @@ configure (pkg_descr0, pbi) cfg = do
     where
       verbosity = fromFlag (configVerbosity cfg)
 
+mkPromisedDepsSet :: [GivenComponent] -> Map (PackageName, ComponentName) ComponentId
+mkPromisedDepsSet comps = Map.fromList [ ((pn, CLibName ln), cid) | GivenComponent pn ln cid <- comps ]
+
 mkProgramDb :: ConfigFlags -> ProgramDb -> ProgramDb
 mkProgramDb cfg initialProgramDb = programDb
   where
@@ -914,6 +924,7 @@ dependencySatisfiable
     -> PackageName
     -> InstalledPackageIndex -- ^ installed set
     -> Set LibraryName -- ^ library components
+    -> Map (PackageName, ComponentName) ComponentId
     -> Map (PackageName, ComponentName) InstalledPackageInfo
        -- ^ required dependencies
     -> (Dependency -> Bool)
@@ -921,7 +932,7 @@ dependencySatisfiable
   use_external_internal_deps
   exact_config
   allow_private_deps
-  pn installedPackageSet packageLibraries requiredDepsMap
+  pn installedPackageSet packageLibraries promisedDeps requiredDepsMap
   (Dependency depName vr sublibs)
     | exact_config
     -- When we're given '--exact-configuration', we assume that all
@@ -987,7 +998,10 @@ dependencySatisfiable
                           -- cabal-testsuite/PackageTests/ConfigureComponent/SubLib/setup-explicit.test.hs
                           || pkgName (IPI.sourcePackageId ipi) == pn)
                     maybeIPI
+                  -- Don't check if it's visible, we promise to build it before we need it.
+                  || promised
       where maybeIPI = Map.lookup (depName, CLibName lib) requiredDepsMap
+            promised = isJust $ Map.lookup (depName, CLibName lib) promisedDeps
 
 -- | Finalize a generic package description.  The workhorse is
 -- 'finalizePD' but there's a bit of other nattering
@@ -1089,20 +1103,21 @@ configureDependencies
     :: Verbosity
     -> UseExternalInternalDeps
     -> Set LibraryName
+    -> Map (PackageName, ComponentName) ComponentId
     -> InstalledPackageIndex -- ^ installed packages
     -> Map (PackageName, ComponentName) InstalledPackageInfo -- ^ required deps
     -> PackageDescription
     -> ComponentRequestedSpec
-    -> IO [PreExistingComponent]
+    -> IO ([PreExistingComponent], [PromisedComponent])
 configureDependencies verbosity use_external_internal_deps
-  packageLibraries installedPackageSet requiredDepsMap pkg_descr enableSpec = do
+  packageLibraries promisedDeps installedPackageSet requiredDepsMap pkg_descr enableSpec = do
     let failedDeps :: [FailedDependency]
         allPkgDeps :: [ResolvedDependency]
         (failedDeps, allPkgDeps) = partitionEithers $ concat
           [ fmap (\s -> (dep, s)) <$> status
           | dep <- enabledBuildDepends pkg_descr enableSpec
           , let status = selectDependency (package pkg_descr)
-                  packageLibraries installedPackageSet
+                  packageLibraries promisedDeps installedPackageSet
                   requiredDepsMap use_external_internal_deps dep ]
 
         internalPkgDeps = [ pkgid
@@ -1113,6 +1128,9 @@ configureDependencies verbosity use_external_internal_deps
         externalPkgDeps = [ pec
                           | (_, ExternalDependency pec)   <- allPkgDeps ]
 
+        promisedPkgDeps = [ fpec
+                          | (_, PromisedDependency fpec)  <- allPkgDeps ]
+
     when (not (null internalPkgDeps)
           && not (newPackageDepsBehaviour pkg_descr)) $
         die' verbosity $ "The field 'build-depends: "
@@ -1124,7 +1142,7 @@ configureDependencies verbosity use_external_internal_deps
     reportFailedDependencies verbosity failedDeps
     reportSelectedDependencies verbosity allPkgDeps
 
-    return externalPkgDeps
+    return (externalPkgDeps, promisedPkgDeps)
 
 -- | Select and apply coverage settings for the build based on the
 -- 'ConfigFlags' and 'Compiler'.
@@ -1250,6 +1268,18 @@ data DependencyResolution
     -- internal dependency which we are getting from the package
     -- database.
     = ExternalDependency PreExistingComponent
+
+    -- | A promised dependency, which doesn't yet exist, but should be provided
+    -- at the build time.
+    --
+    -- We have these such that we can configure components without actually
+    -- building its dependencies, if these dependencies need to be built later
+    -- again. For example, when launching a multi-repl,
+    -- we need to build packages in the interactive ghci session, no matter
+    -- whether they have been built before.
+    -- Building them in the configure phase is then redundant and costs time.
+    | PromisedDependency PromisedComponent
+
     -- | An internal dependency ('PackageId' should be a library name)
     -- which we are going to have to build.  (The
     -- 'PackageId' here is a hack to get a modest amount of
@@ -1263,6 +1293,7 @@ data FailedDependency = DependencyNotExists PackageName
 -- | Test for a package dependency and record the version we have installed.
 selectDependency :: PackageId -- ^ Package id of current package
                  -> Set LibraryName -- ^ package libraries
+                 -> Map (PackageName, ComponentName) ComponentId -- ^ Set of components that are promised, i.e. are not installed already. See 'PromisedDependency' for more details.
                  -> InstalledPackageIndex  -- ^ Installed packages
                  -> Map (PackageName, ComponentName) InstalledPackageInfo
                     -- ^ Packages for which we have been given specific deps to
@@ -1271,7 +1302,7 @@ selectDependency :: PackageId -- ^ Package id of current package
                                             -- single component?
                  -> Dependency
                  -> [Either FailedDependency DependencyResolution]
-selectDependency pkgid internalIndex installedIndex requiredDepsMap
+selectDependency pkgid internalIndex promisedIndex installedIndex requiredDepsMap
   use_external_internal_deps
   (Dependency dep_pkgname vr libs) =
   -- If the dependency specification matches anything in the internal package
@@ -1302,11 +1333,14 @@ selectDependency pkgid internalIndex installedIndex requiredDepsMap
         | Set.member lib internalIndex
         = Right $ InternalDependency $ PackageIdentifier dep_pkgname $ packageVersion pkgid
 
+
         | otherwise
         = Left $ DependencyMissingInternal dep_pkgname lib
 
     -- We have to look it up externally
     do_external_external :: LibraryName -> Either FailedDependency DependencyResolution
+    do_external_external lib | Just cid <- Map.lookup (dep_pkgname, CLibName lib) promisedIndex =
+      return $ PromisedDependency (PromisedComponent dep_pkgname (AnnotatedId currentCabalId (CLibName lib) cid ))
     do_external_external lib = do
       ipi <- case Map.lookup (dep_pkgname, CLibName lib) requiredDepsMap of
         -- If we know the exact pkg to use, then use it.
@@ -1318,6 +1352,8 @@ selectDependency pkgid internalIndex installedIndex requiredDepsMap
       return $ ExternalDependency $ ipiToPreExistingComponent ipi
 
     do_external_internal :: LibraryName -> Either FailedDependency DependencyResolution
+    do_external_internal lib | Just cid <- Map.lookup (dep_pkgname, CLibName lib) promisedIndex =
+      return $ PromisedDependency (PromisedComponent dep_pkgname (AnnotatedId currentCabalId (CLibName lib) cid ))
     do_external_internal lib = do
       ipi <- case Map.lookup (dep_pkgname, CLibName lib) requiredDepsMap of
         -- If we know the exact pkg to use, then use it.
@@ -1340,7 +1376,9 @@ reportSelectedDependencies verbosity deps =
     | (dep, resolution) <- deps
     , let pkgid = case resolution of
             ExternalDependency pkg'   -> packageId pkg'
-            InternalDependency pkgid' -> pkgid' ]
+            InternalDependency pkgid' -> pkgid'
+            PromisedDependency promisedComp -> packageId promisedComp
+    ]
 
 reportFailedDependencies :: Verbosity -> [FailedDependency] -> IO ()
 reportFailedDependencies _ []     = return ()
@@ -1460,7 +1498,7 @@ interpretPackageDbFlags userInstall specificDBs =
 -- pick.
 combinedConstraints
   :: [PackageVersionConstraint]
-  -> [GivenComponent]
+  -> [GivenComponent]  -- ^ installed dependencies
   -> InstalledPackageIndex
   -> Either String ([PackageVersionConstraint],
                      Map (PackageName, ComponentName) InstalledPackageInfo)
@@ -1489,8 +1527,7 @@ combinedConstraints constraints dependencies installedPackages = do
                         | (pn, cname, _, Just pkg) <- dependenciesPkgInfo ]
 
     -- The dependencies along with the installed package info, if it exists
-    dependenciesPkgInfo :: [(PackageName, ComponentName, ComponentId,
-                             Maybe InstalledPackageInfo)]
+    dependenciesPkgInfo :: [(PackageName, ComponentName, ComponentId, Maybe InstalledPackageInfo)]
     dependenciesPkgInfo =
       [ (pkgname, CLibName lname, cid, mpkg)
       | GivenComponent pkgname lname cid <- dependencies
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/ConfigureScript.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/ConfigureScript.hs
index 9c3e5c887..23ad94f0d 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/ConfigureScript.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/ConfigureScript.hs
@@ -25,7 +25,8 @@ import Distribution.Compat.Prelude
 import Distribution.PackageDescription
 import Distribution.Simple.Program
 import Distribution.Simple.Program.Db
-import Distribution.Simple.Setup
+import Distribution.Simple.Setup.Common
+import Distribution.Simple.Setup.Config
 
 import Distribution.Simple.LocalBuildInfo
 import Distribution.Simple.Utils
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Flag.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Flag.hs
index 018a72882..705be2eb5 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Flag.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Flag.hs
@@ -1,5 +1,6 @@
-{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveFoldable #-}
 {-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE DeriveTraversable #-}
 {-# LANGUAGE FlexibleContexts #-}
 -----------------------------------------------------------------------------
 -- |
@@ -53,7 +54,7 @@ import Distribution.Compat.Stack
 -- Its monoid instance gives us the behaviour where it starts out as
 -- 'NoFlag' and later flags override earlier ones.
 --
-data Flag a = Flag a | NoFlag deriving (Eq, Generic, Show, Read, Typeable)
+data Flag a = Flag a | NoFlag deriving (Eq, Generic, Show, Read, Typeable, Foldable, Traversable)
 
 instance Binary a => Binary (Flag a)
 instance Structured a => Structured (Flag a)
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/GHC.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/GHC.hs
index d8e48adb4..46dc54fdc 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/GHC.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/GHC.hs
@@ -98,8 +98,9 @@ import qualified Distribution.Simple.Program.Ar    as Ar
 import qualified Distribution.Simple.Program.Ld    as Ld
 import qualified Distribution.Simple.Program.Strip as Strip
 import Distribution.Simple.Program.GHC
-import Distribution.Simple.Setup
-import qualified Distribution.Simple.Setup as Cabal
+import Distribution.Simple.Flag ( Flag(..), fromFlag, fromFlagOrDefault, toFlag )
+import Distribution.Simple.Setup.Config
+import Distribution.Simple.Setup.Repl
 import Distribution.Simple.Compiler
 import Distribution.Version
 import Distribution.System
@@ -117,7 +118,7 @@ import System.Directory
          ( doesFileExist, doesDirectoryExist
          , getAppUserDataDirectory, createDirectoryIfMissing
          , canonicalizePath, removeFile, renameFile, getDirectoryContents
-         , makeRelativeToCurrentDirectory )
+         , makeRelativeToCurrentDirectory, doesDirectoryExist, getCurrentDirectory )
 import System.FilePath          ( (</>), (<.>), takeExtension
                                 , takeDirectory, replaceExtension
                                 ,isRelative )
@@ -125,6 +126,10 @@ import qualified System.Info
 #ifndef mingw32_HOST_OS
 import System.Posix (createSymbolicLink)
 #endif /* mingw32_HOST_OS */
+import qualified Data.ByteString.Lazy.Char8 as BS
+import Distribution.Compat.ResponseFile (escapeArgs)
+import qualified Distribution.InstalledPackageInfo as IPI
+import Distribution.Compat.Binary (encode)
 
 -- -----------------------------------------------------------------------------
 -- Configuring
@@ -491,19 +496,19 @@ getInstalledPackagesMonitorFiles verbosity platform progdb =
 -- -----------------------------------------------------------------------------
 -- Building a library
 
-buildLib :: Verbosity          -> Cabal.Flag (Maybe Int)
+buildLib :: Verbosity          -> Flag (Maybe Int)
          -> PackageDescription -> LocalBuildInfo
          -> Library            -> ComponentLocalBuildInfo -> IO ()
 buildLib = buildOrReplLib Nothing
 
 replLib :: ReplOptions             -> Verbosity
-        -> Cabal.Flag (Maybe Int)  -> PackageDescription
+        -> Flag (Maybe Int)  -> PackageDescription
         -> LocalBuildInfo          -> Library
         -> ComponentLocalBuildInfo -> IO ()
 replLib = buildOrReplLib . Just
 
 buildOrReplLib :: Maybe ReplOptions -> Verbosity
-               -> Cabal.Flag (Maybe Int) -> PackageDescription
+               -> Flag (Maybe Int) -> PackageDescription
                -> LocalBuildInfo -> Library
                -> ComponentLocalBuildInfo -> IO ()
 buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
@@ -518,7 +523,7 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
         when (forceStatic || withStaticLib lbi)
       whenGHCiLib = when (withGHCiLib lbi)
       forRepl = maybe False (const True) mReplFlags
-      whenReplLib = when forRepl
+      whenReplLib = forM_ mReplFlags
       replFlags = fromMaybe mempty mReplFlags
       comp = compiler lbi
       ghcVersion = compilerVersion comp
@@ -633,10 +638,12 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
                     }
                     `mappend` linkerOpts
                     `mappend` mempty {
-                      ghcOptMode         = toFlag GhcModeInteractive,
+                      ghcOptMode         = isInteractive,
                       ghcOptOptimisation = toFlag GhcNoOptimisation
                     }
 
+      isInteractive = toFlag GhcModeInteractive
+
       vanillaSharedOpts = vanillaOpts `mappend` mempty {
                       ghcOptDynLinkMode  = toFlag GhcStaticAndDynamic,
                       ghcOptDynHiSuffix  = toFlag "dyn_hi",
@@ -658,7 +665,7 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
           then do
               runGhcProg vanillaSharedOpts
               case (hpcdir Hpc.Dyn, hpcdir Hpc.Vanilla) of
-                (Cabal.Flag dynDir, Cabal.Flag vanillaDir) ->
+                (Flag dynDir, Flag vanillaDir) ->
                     -- When the vanilla and shared library builds are done
                     -- in one pass, only one set of HPC module interfaces
                     -- are generated. This set should suffice for both
@@ -816,9 +823,9 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
   -- TODO: problem here is we need the .c files built first, so we can load them
   -- with ghci, but .c files can depend on .h files generated by ghc by ffi
   -- exports.
-  whenReplLib $ do
+  whenReplLib $ \rflags -> do
     when (null (allLibModules lib clbi)) $ warn verbosity "No exposed modules"
-    runGhcProg replOpts
+    runReplOrWriteFlags verbosity ghcProg comp platform rflags replOpts libBi clbi (pkgName (PD.package pkg_descr))
 
   -- link:
   when has_code . unless forRepl $ do
@@ -923,7 +930,7 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
                       -> insts
                     _ -> [],
                 ghcOptPackages           = toNubListR $
-                                           Internal.mkGhcOptPackages clbi ,
+                                           Internal.mkGhcOptPackages mempty clbi ,
                 ghcOptLinkLibs           = extraLibs libBi,
                 ghcOptLinkLibPath        = toNubListR $ cleanedExtraLibDirs,
                 ghcOptLinkFrameworks     = toNubListR $ PD.frameworks libBi,
@@ -957,7 +964,7 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
                       -> insts
                     _ -> [],
                 ghcOptPackages           = toNubListR $
-                                           Internal.mkGhcOptPackages clbi ,
+                                           Internal.mkGhcOptPackages mempty clbi ,
                 ghcOptLinkLibs           = extraLibs libBi,
                 ghcOptLinkLibPath        = toNubListR $ cleanedExtraLibDirs
               }
@@ -996,19 +1003,58 @@ startInterpreter verbosity progdb comp platform packageDBs = do
   (ghcProg, _) <- requireProgram verbosity ghcProgram progdb
   runGHC verbosity ghcProg comp platform replOpts
 
+
+runReplOrWriteFlags
+  :: Verbosity
+  -> ConfiguredProgram
+  -> Compiler
+  -> Platform
+  -> ReplOptions
+  -> GhcOptions
+  -> BuildInfo
+  -> ComponentLocalBuildInfo
+  -> PackageName
+  -> IO ()
+runReplOrWriteFlags verbosity ghcProg comp platform rflags replOpts bi clbi pkg_name =
+  case replOptionsFlagOutput rflags of
+    NoFlag -> runGHC verbosity ghcProg comp platform replOpts
+    Flag out_dir -> do
+      src_dir <- getCurrentDirectory
+      let uid = componentUnitId clbi
+          this_unit = prettyShow uid
+          reexported_modules = [mn | LibComponentLocalBuildInfo {} <- [clbi], IPI.ExposedModule mn (Just {}) <- componentExposedModules clbi]
+          hidden_modules = otherModules bi
+          extra_opts = concat $
+                      [ ["-this-package-name", prettyShow pkg_name]
+                      , ["-working-dir"      , src_dir]
+                      ] ++
+                      [ ["-reexported-module", prettyShow m] | m <- reexported_modules
+                      ] ++
+                      [ ["-hidden-module", prettyShow m] | m <- hidden_modules
+                      ]
+      -- Create "paths" subdirectory if it doesn't exist. This is where we write
+      -- information about how the PATH was augmented.
+      createDirectoryIfMissing False (out_dir </> "paths")
+      -- Write out the PATH information into `paths` subdirectory.
+      writeFileAtomic (out_dir </> "paths" </> this_unit) (encode ghcProg)
+      -- Write out options for this component into a file ready for loading into
+      -- the multi-repl
+      writeFileAtomic (out_dir </> this_unit) $ BS.pack $ escapeArgs
+        $ extra_opts ++ renderGhcOptions comp platform (replOpts { ghcOptMode = NoFlag })
+
 -- -----------------------------------------------------------------------------
 -- Building an executable or foreign library
 
 -- | Build a foreign library
 buildFLib
-  :: Verbosity          -> Cabal.Flag (Maybe Int)
+  :: Verbosity          -> Flag (Maybe Int)
   -> PackageDescription -> LocalBuildInfo
   -> ForeignLib         -> ComponentLocalBuildInfo -> IO ()
 buildFLib v njobs pkg lbi = gbuild v njobs pkg lbi . GBuildFLib
 
 replFLib
   :: ReplOptions             -> Verbosity
-  -> Cabal.Flag (Maybe Int)  -> PackageDescription
+  -> Flag (Maybe Int)  -> PackageDescription
   -> LocalBuildInfo          -> ForeignLib
   -> ComponentLocalBuildInfo -> IO ()
 replFLib replFlags  v njobs pkg lbi =
@@ -1017,14 +1063,14 @@ replFLib replFlags  v njobs pkg lbi =
 -- | Build an executable with GHC.
 --
 buildExe
-  :: Verbosity          -> Cabal.Flag (Maybe Int)
+  :: Verbosity          -> Flag (Maybe Int)
   -> PackageDescription -> LocalBuildInfo
   -> Executable         -> ComponentLocalBuildInfo -> IO ()
 buildExe v njobs pkg lbi = gbuild v njobs pkg lbi . GBuildExe
 
 replExe
   :: ReplOptions             -> Verbosity
-  -> Cabal.Flag (Maybe Int)  -> PackageDescription
+  -> Flag (Maybe Int)  -> PackageDescription
   -> LocalBuildInfo          -> Executable
   -> ComponentLocalBuildInfo -> IO ()
 replExe replFlags v njobs pkg lbi =
@@ -1312,7 +1358,7 @@ replNoLoad replFlags l
     | otherwise                                = l
 
 -- | Generic build function. See comment for 'GBuildMode'.
-gbuild :: Verbosity          -> Cabal.Flag (Maybe Int)
+gbuild :: Verbosity          -> Flag (Maybe Int)
        -> PackageDescription -> LocalBuildInfo
        -> GBuildMode         -> ComponentLocalBuildInfo -> IO ()
 gbuild verbosity numJobs pkg_descr lbi bm clbi = do
@@ -1555,8 +1601,8 @@ gbuild verbosity numJobs pkg_descr lbi bm clbi = do
   -- with ghci, but .c files can depend on .h files generated by ghc by ffi
   -- exports.
   case bm of
-    GReplExe  _ _ -> runGhcProg replOpts
-    GReplFLib _ _ -> runGhcProg replOpts
+    GReplExe  _ _ -> runReplOrWriteFlags verbosity ghcProg comp platform replFlags replOpts bnfo clbi (pkgName (PD.package pkg_descr))
+    GReplFLib _ _ -> runReplOrWriteFlags verbosity ghcProg comp platform replFlags replOpts bnfo clbi (pkgName (PD.package pkg_descr))
     GBuildExe _ -> do
       let linkOpts = commonOpts
                    `mappend` linkerOpts
@@ -2004,6 +2050,9 @@ installLib verbosity lbi targetDir dynlibTargetDir _builtDir pkg lib clbi = do
   whenProf    $ copyModuleFiles "p_hi"
   whenShared  $ copyModuleFiles "dyn_hi"
 
+  -- copy extra compilation artifacts that ghc plugins may produce
+  copyDirectoryIfExists "extra-compilation-artifacts"
+
   -- copy the built library files over:
   whenHasCode $ do
     whenVanilla $ do
@@ -2078,6 +2127,12 @@ installLib verbosity lbi targetDir dynlibTargetDir _builtDir pkg lib clbi = do
       findModuleFilesEx verbosity [builtDir] [ext] (allLibModules lib clbi)
       >>= installOrdinaryFiles verbosity targetDir
 
+    copyDirectoryIfExists dirName = do
+      let src = builtDir  </> dirName
+          dst = targetDir </> dirName
+      dirExists <- doesDirectoryExist src
+      when dirExists $ copyDirectoryRecursive verbosity src dst
+
     compiler_id = compilerId (compiler lbi)
     platform = hostPlatform lbi
     uid = componentUnitId clbi
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/GHC/ImplInfo.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/GHC/ImplInfo.hs
index ea95aac50..bd426a985 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/GHC/ImplInfo.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/GHC/ImplInfo.hs
@@ -46,6 +46,7 @@ data GhcImplInfo = GhcImplInfo
   , supportsDebugLevels  :: Bool -- ^ supports numeric @-g@ levels
   , supportsPkgEnvFiles  :: Bool -- ^ picks up @.ghc.environment@ files
   , flagWarnMissingHomeModules :: Bool -- ^ -Wmissing-home-modules is supported
+  , unitIdForExes        :: Bool -- ^ Pass -this-unit-id flag when building executables
   }
 
 getImplInfo :: Compiler -> GhcImplInfo
@@ -74,6 +75,7 @@ ghcVersionImplInfo ver = GhcImplInfo
   , supportsDebugLevels  = v >= [8,0]
   , supportsPkgEnvFiles  = v >= [8,0,1,20160901] -- broken in 8.0.1, fixed in 8.0.2
   , flagWarnMissingHomeModules = v >= [8,2]
+  , unitIdForExes = v >= [9,2]
   }
   where
     v = versionNumbers ver
@@ -94,6 +96,7 @@ ghcjsVersionImplInfo _ghcjsver ghcver = GhcImplInfo
   , supportsDebugLevels  = ghcv >= [8,0]
   , supportsPkgEnvFiles  = ghcv >= [8,0,2] --TODO: check this works in ghcjs
   , flagWarnMissingHomeModules = ghcv >= [8,2]
+  , unitIdForExes        = ghcv >= [9,2]
   }
   where
     ghcv = versionNumbers ghcver
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/GHC/Internal.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/GHC/Internal.hs
index 507831f3c..87fe9cbfc 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/GHC/Internal.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/GHC/Internal.hs
@@ -57,7 +57,7 @@ import Distribution.PackageDescription
 import Distribution.Lex
 import Distribution.Simple.Compiler
 import Distribution.Simple.Program.GHC
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag ( Flag, maybeToFlag, toFlag )
 import qualified Distribution.ModuleName as ModuleName
 import Distribution.Simple.Program
 import Distribution.Simple.LocalBuildInfo
@@ -77,12 +77,14 @@ import Distribution.Utils.Path
 import Language.Haskell.Extension
 
 import qualified Data.Map as Map
+import qualified Data.Set as Set
 import qualified Data.ByteString.Lazy.Char8 as BS
 import System.Directory         ( getDirectoryContents, getTemporaryDirectory )
 import System.Environment       ( getEnv )
 import System.FilePath          ( (</>), (<.>), takeExtension
                                 , takeDirectory, takeFileName)
 import System.IO                ( hClose, hPutStrLn )
+import Distribution.Types.ComponentId (ComponentId)
 
 targetPlatform :: [(String, String)] -> Maybe Platform
 targetPlatform ghcInfo = platformFromTriple =<< lookup "Target platform" ghcInfo
@@ -292,7 +294,7 @@ componentCcGhcOptions verbosity _implInfo lbi bi clbi odir filename =
                                           ++ [buildDir lbi </> dir | dir <- includeDirs bi],
       ghcOptHideAllPackages= toFlag True,
       ghcOptPackageDBs     = withPackageDB lbi,
-      ghcOptPackages       = toNubListR $ mkGhcOptPackages clbi,
+      ghcOptPackages       = toNubListR $ mkGhcOptPackages (promisedPkgs lbi) clbi,
       ghcOptCcOptions      = (case withOptimization lbi of
                                   NoOptimisation -> []
                                   _              -> ["-O2"]) ++
@@ -331,7 +333,7 @@ componentCxxGhcOptions verbosity _implInfo lbi bi clbi odir filename =
                                           ++ [buildDir lbi </> dir | dir <- includeDirs bi],
       ghcOptHideAllPackages= toFlag True,
       ghcOptPackageDBs     = withPackageDB lbi,
-      ghcOptPackages       = toNubListR $ mkGhcOptPackages clbi,
+      ghcOptPackages       = toNubListR $ mkGhcOptPackages (promisedPkgs lbi) clbi,
       ghcOptCxxOptions     = (case withOptimization lbi of
                                   NoOptimisation -> []
                                   _              -> ["-O2"]) ++
@@ -370,7 +372,7 @@ componentAsmGhcOptions verbosity _implInfo lbi bi clbi odir filename =
                                           ++ [buildDir lbi </> dir | dir <- includeDirs bi],
       ghcOptHideAllPackages= toFlag True,
       ghcOptPackageDBs     = withPackageDB lbi,
-      ghcOptPackages       = toNubListR $ mkGhcOptPackages clbi,
+      ghcOptPackages       = toNubListR $ mkGhcOptPackages (promisedPkgs lbi) clbi,
       ghcOptAsmOptions     = (case withOptimization lbi of
                                   NoOptimisation -> []
                                   _              -> ["-O2"]) ++
@@ -405,7 +407,7 @@ componentJsGhcOptions verbosity _implInfo lbi bi clbi odir filename =
                                           ++ [buildDir lbi </> dir | dir <- includeDirs bi],
       ghcOptHideAllPackages= toFlag True,
       ghcOptPackageDBs     = withPackageDB lbi,
-      ghcOptPackages       = toNubListR $ mkGhcOptPackages clbi,
+      ghcOptPackages       = toNubListR $ mkGhcOptPackages (promisedPkgs lbi) clbi,
       ghcOptObjDir         = toFlag odir
     }
 
@@ -422,7 +424,17 @@ componentGhcOptions verbosity implInfo lbi bi clbi odir =
       ghcOptThisUnitId      = case clbi of
         LibComponentLocalBuildInfo { componentCompatPackageKey = pk }
           -> toFlag pk
-        _ -> mempty,
+        _ | not (unitIdForExes implInfo) -> mempty
+        ExeComponentLocalBuildInfo { componentUnitId = uid }
+          -> toFlag (unUnitId uid)
+        TestComponentLocalBuildInfo { componentUnitId = uid }
+          -> toFlag (unUnitId uid)
+        BenchComponentLocalBuildInfo { componentUnitId = uid }
+          -> toFlag (unUnitId uid)
+        FLibComponentLocalBuildInfo { componentUnitId = uid }
+          -> toFlag (unUnitId uid)
+
+          ,
       ghcOptThisComponentId = case clbi of
           LibComponentLocalBuildInfo { componentComponentId = cid
                                      , componentInstantiatedWith = insts } ->
@@ -438,11 +450,12 @@ componentGhcOptions verbosity implInfo lbi bi clbi odir =
       ghcOptHideAllPackages = toFlag True,
       ghcOptWarnMissingHomeModules = toFlag $ flagWarnMissingHomeModules implInfo,
       ghcOptPackageDBs      = withPackageDB lbi,
-      ghcOptPackages        = toNubListR $ mkGhcOptPackages clbi,
+      ghcOptPackages        = toNubListR $ mkGhcOptPackages mempty clbi,
       ghcOptSplitSections   = toFlag (splitSections lbi),
       ghcOptSplitObjs       = toFlag (splitObjs lbi),
       ghcOptSourcePathClear = toFlag True,
-      ghcOptSourcePath      = toNubListR $ [odir] ++ (map getSymbolicPath (hsSourceDirs bi))
+      ghcOptSourcePath      = toNubListR $ map getSymbolicPath (hsSourceDirs bi)
+                                           ++ [odir]
                                            ++ [autogenComponentModulesDir lbi clbi]
                                            ++ [autogenPackageModulesDir lbi],
       ghcOptCppIncludePath  = toNubListR $ [autogenComponentModulesDir lbi clbi
@@ -507,7 +520,7 @@ componentCmmGhcOptions verbosity _implInfo lbi bi clbi odir filename =
                              [autogenComponentModulesDir lbi clbi </> cppHeaderName],
       ghcOptHideAllPackages= toFlag True,
       ghcOptPackageDBs     = withPackageDB lbi,
-      ghcOptPackages       = toNubListR $ mkGhcOptPackages clbi,
+      ghcOptPackages       = toNubListR $ mkGhcOptPackages (promisedPkgs lbi) clbi,
       ghcOptOptimisation   = toGhcOptimisation (withOptimization lbi),
       ghcOptDebugInfo      = toFlag (withDebugInfo lbi),
       ghcOptExtra          = cmmOptions bi,
@@ -560,9 +573,18 @@ getHaskellObjects _implInfo lib lbi clbi pref wanted_obj_ext allow_split_objs
         return [ pref </> ModuleName.toFilePath x <.> wanted_obj_ext
                | x <- allLibModules lib clbi ]
 
-mkGhcOptPackages :: ComponentLocalBuildInfo
+-- | Create the required packaged arguments, but filtering out package arguments which
+-- aren't yet built, but promised. This filtering is used when compiling C/Cxx/Asm files,
+-- and is a hack to avoid passing bogus `-package` arguments to GHC. The assumption being that
+-- in 99% of cases we will include the right `-package` so that the C file finds the right headers.
+mkGhcOptPackages :: Map (PackageName, ComponentName) ComponentId
+                 -> ComponentLocalBuildInfo
                  -> [(OpenUnitId, ModuleRenaming)]
-mkGhcOptPackages = componentIncludes
+mkGhcOptPackages promisedPkgsMap clbi = [ i | i@(uid, _) <- componentIncludes clbi
+                                          , abstractUnitId uid `Set.notMember` promised_cids ]
+  where
+    -- Promised deps are going to be simple UnitIds
+    promised_cids = Set.fromList (map newSimpleUnitId (Map.elems promisedPkgsMap))
 
 substTopDir :: FilePath -> IPI.InstalledPackageInfo -> IPI.InstalledPackageInfo
 substTopDir topDir ipo
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/GHCJS.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/GHCJS.hs
index c8721746a..9d824c326 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/GHCJS.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/GHCJS.hs
@@ -61,8 +61,8 @@ import Distribution.Simple.Program
 import qualified Distribution.Simple.Program.HcPkg as HcPkg
 import qualified Distribution.Simple.Program.Strip as Strip
 import Distribution.Simple.Program.GHC
-import Distribution.Simple.Setup
-import qualified Distribution.Simple.Setup as Cabal
+import Distribution.Simple.Flag
+import Distribution.Simple.Setup.Config
 import Distribution.Simple.Compiler
 import Distribution.CabalSpecVersion
 import Distribution.Version
@@ -372,19 +372,19 @@ toJSLibName lib
 -- -----------------------------------------------------------------------------
 -- Building a library
 
-buildLib :: Verbosity -> Cabal.Flag (Maybe Int) -> PackageDescription
+buildLib :: Verbosity -> Flag (Maybe Int) -> PackageDescription
          -> LocalBuildInfo -> Library -> ComponentLocalBuildInfo
          -> IO ()
 buildLib = buildOrReplLib Nothing
 
 replLib :: [String]                -> Verbosity
-        -> Cabal.Flag (Maybe Int)  -> PackageDescription
+        -> Flag (Maybe Int)  -> PackageDescription
         -> LocalBuildInfo          -> Library
         -> ComponentLocalBuildInfo -> IO ()
 replLib = buildOrReplLib . Just
 
 buildOrReplLib :: Maybe [String] -> Verbosity
-               -> Cabal.Flag (Maybe Int) -> PackageDescription
+               -> Flag (Maybe Int) -> PackageDescription
                -> LocalBuildInfo -> Library
                -> ComponentLocalBuildInfo -> IO ()
 buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
@@ -493,7 +493,7 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
           then do
               runGhcjsProg vanillaSharedOpts
               case (hpcdir Hpc.Dyn, hpcdir Hpc.Vanilla) of
-                (Cabal.Flag dynDir, Cabal.Flag vanillaDir) ->
+                (Flag dynDir, Flag vanillaDir) ->
                     -- When the vanilla and shared library builds are done
                     -- in one pass, only one set of HPC module interfaces
                     -- are generated. This set should suffice for both
@@ -663,7 +663,7 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
                       -> insts
                     _ -> [],
                 ghcOptPackages           = toNubListR $
-                                           Internal.mkGhcOptPackages clbi ,
+                                           Internal.mkGhcOptPackages mempty clbi ,
                 ghcOptLinkLibs           = extraLibs libBi,
                 ghcOptLinkLibPath        = toNubListR $ extraLibDirs libBi,
                 ghcOptLinkFrameworks     = toNubListR $ PD.frameworks libBi,
@@ -695,7 +695,7 @@ buildOrReplLib mReplFlags verbosity numJobs pkg_descr lbi lib clbi = do
                       -> insts
                     _ -> [],
                 ghcOptPackages           = toNubListR $
-                                           Internal.mkGhcOptPackages clbi ,
+                                           Internal.mkGhcOptPackages mempty clbi ,
                 ghcOptLinkLibs           = extraLibs libBi,
                 ghcOptLinkLibPath        = toNubListR $ extraLibDirs libBi
               }
@@ -740,14 +740,14 @@ startInterpreter verbosity progdb comp platform packageDBs = do
 
 -- | Build a foreign library
 buildFLib
-  :: Verbosity          -> Cabal.Flag (Maybe Int)
+  :: Verbosity          -> Flag (Maybe Int)
   -> PackageDescription -> LocalBuildInfo
   -> ForeignLib         -> ComponentLocalBuildInfo -> IO ()
 buildFLib v njobs pkg lbi = gbuild v njobs pkg lbi . GBuildFLib
 
 replFLib
   :: [String]                -> Verbosity
-  -> Cabal.Flag (Maybe Int)  -> PackageDescription
+  -> Flag (Maybe Int)  -> PackageDescription
   -> LocalBuildInfo          -> ForeignLib
   -> ComponentLocalBuildInfo -> IO ()
 replFLib replFlags  v njobs pkg lbi =
@@ -756,14 +756,14 @@ replFLib replFlags  v njobs pkg lbi =
 -- | Build an executable with GHC.
 --
 buildExe
-  :: Verbosity          -> Cabal.Flag (Maybe Int)
+  :: Verbosity          -> Flag (Maybe Int)
   -> PackageDescription -> LocalBuildInfo
   -> Executable         -> ComponentLocalBuildInfo -> IO ()
 buildExe v njobs pkg lbi = gbuild v njobs pkg lbi . GBuildExe
 
 replExe
   :: [String]                -> Verbosity
-  -> Cabal.Flag (Maybe Int)  -> PackageDescription
+  -> Flag (Maybe Int)  -> PackageDescription
   -> LocalBuildInfo          -> Executable
   -> ComponentLocalBuildInfo -> IO ()
 replExe replFlags v njobs pkg lbi =
@@ -1044,7 +1044,7 @@ isHaskell :: FilePath -> Bool
 isHaskell fp = elem (takeExtension fp) [".hs", ".lhs"]
 
 -- | Generic build function. See comment for 'GBuildMode'.
-gbuild :: Verbosity          -> Cabal.Flag (Maybe Int)
+gbuild :: Verbosity          -> Flag (Maybe Int)
        -> PackageDescription -> LocalBuildInfo
        -> GBuildMode         -> ComponentLocalBuildInfo -> IO ()
 gbuild verbosity numJobs pkg_descr lbi bm clbi = do
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Haddock.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Haddock.hs
index aa616ec02..215cf92f4 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Haddock.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Haddock.hs
@@ -51,7 +51,9 @@ import Distribution.Simple.Program.GHC
 import Distribution.Simple.Program.ResponseFile
 import Distribution.Simple.Program
 import Distribution.Simple.PreProcess
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag
+import Distribution.Simple.Setup.Haddock
+import Distribution.Simple.Setup.Hscolour
 import Distribution.Simple.Build
 import Distribution.Simple.BuildTarget
 import Distribution.Simple.InstallDirs
@@ -241,7 +243,12 @@ haddock pkg_descr lbi suffixes flags' = do
           fromFlagOrDefault ForDevelopment (haddockForHackage flags')
 
     libdirArgs <- getGhcLibDir  verbosity lbi
-    let commonArgs = mconcat
+    -- The haddock-output-dir flag overrides any other documentation placement concerns.
+    -- The point is to give the user full freedom over the location if they need it.
+    let overrideWithOutputDir args = case haddockOutputDir flags of
+          NoFlag -> args
+          Flag dir -> args { argOutputDir = Dir dir }
+    let commonArgs = overrideWithOutputDir $ mconcat
             [ libdirArgs
             , fromFlags (haddockTemplateEnv lbi (packageId pkg_descr)) flags
             , fromPackageDescription haddockTarget pkg_descr ]
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Install.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Install.hs
index de8a380ab..432a94c7f 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Install.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Install.hs
@@ -40,8 +40,12 @@ import Distribution.Simple.Utils
          , die', info, noticeNoWrap, warn )
 import Distribution.Simple.Compiler
          ( CompilerFlavor(..), compilerFlavor )
-import Distribution.Simple.Setup
-         ( CopyFlags(..), fromFlag, HaddockTarget(ForDevelopment) )
+import Distribution.Simple.Flag
+    ( fromFlag )
+import Distribution.Simple.Setup.Copy
+    ( CopyFlags(..) )
+import Distribution.Simple.Setup.Haddock
+    ( HaddockTarget(ForDevelopment) )
 import Distribution.Simple.BuildTarget
 import Distribution.Utils.Path (getSymbolicPath)
 
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Program/Ar.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Program/Ar.hs
index 7a96c3eb5..6c2ef09ec 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Program/Ar.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Program/Ar.hs
@@ -33,8 +33,10 @@ import Distribution.Simple.Program.ResponseFile
 import Distribution.Simple.Program.Run
          ( programInvocation, multiStageProgramInvocation
          , runProgramInvocation )
-import Distribution.Simple.Setup
-         ( fromFlagOrDefault, configUseResponseFiles )
+import Distribution.Simple.Flag
+         ( fromFlagOrDefault )
+import Distribution.Simple.Setup.Config
+         ( configUseResponseFiles )
 import Distribution.Simple.Utils
          ( defaultTempFileOptions, dieWithLocation', withTempDirectory )
 import Distribution.System
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Program/Ld.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Program/Ld.hs
index 01d2546b1..9115d38d9 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Program/Ld.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Program/Ld.hs
@@ -27,8 +27,10 @@ import Distribution.Simple.Program.Run
          , runProgramInvocation )
 import Distribution.Simple.Program.Types
          ( ConfiguredProgram(..) )
-import Distribution.Simple.Setup
-         ( fromFlagOrDefault, configUseResponseFiles )
+import Distribution.Simple.Flag
+         ( fromFlagOrDefault )
+import Distribution.Simple.Setup.Config
+         ( configUseResponseFiles )
 import Distribution.Simple.Utils
          ( defaultTempFileOptions )
 import Distribution.Verbosity
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Register.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Register.hs
index c4dc22c7b..f71f340f4 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Register.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Register.hs
@@ -70,7 +70,8 @@ import Distribution.Simple.Compiler
 import Distribution.Simple.Program
 import Distribution.Simple.Program.Script
 import qualified Distribution.Simple.Program.HcPkg as HcPkg
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag
+import Distribution.Simple.Setup.Register
 import Distribution.PackageDescription
 import Distribution.Package
 import Distribution.License (licenseToSPDX, licenseFromSPDX)
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup.hs
index 36f6aa22f..e03cafd73 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup.hs
@@ -14,8 +14,7 @@
 -- Maintainer  :  cabal-devel@haskell.org
 -- Portability :  portable
 --
--- This is a big module, but not very complicated. The code is very regular
--- and repetitive. It defines the command line interface for all the Cabal
+-- This module defines the command line interface for all the Cabal
 -- commands. For each command (like @configure@, @build@ etc) it defines a type
 -- that holds all the flags, the default set of flags and a 'CommandUI' that
 -- maps command line flags to and from the corresponding flags type.
@@ -81,2480 +80,25 @@ module Distribution.Simple.Setup (
   optionVerbosity, optionNumJobs) where
 
 import Prelude ()
-import Distribution.Compat.Prelude hiding (get)
 
-import Distribution.Compiler
-import Distribution.ReadE
-import Distribution.Parsec
-import Distribution.Pretty
-import qualified Distribution.Compat.CharParsing as P
-import qualified Text.PrettyPrint as Disp
-import Distribution.ModuleName
-import Distribution.PackageDescription
-import Distribution.Simple.Command hiding (boolOpt, boolOpt')
-import qualified Distribution.Simple.Command as Command
-import Distribution.Simple.Compiler
 import Distribution.Simple.Flag
-import Distribution.Simple.Utils
-import Distribution.Simple.Program
 import Distribution.Simple.InstallDirs
-import Distribution.Verbosity
-import Distribution.Utils.NubList
-import Distribution.Types.ComponentId
 import Distribution.Types.DumpBuildInfo
-import Distribution.Types.GivenComponent
-import Distribution.Types.Module
-import Distribution.Types.PackageVersionConstraint
 
-import Distribution.Compat.Stack
-import Distribution.Compat.Semigroup (Last' (..), Option' (..))
-
--- FIXME Not sure where this should live
-defaultDistPref :: FilePath
-defaultDistPref = "dist"
-
--- ------------------------------------------------------------
--- * Global flags
--- ------------------------------------------------------------
-
--- In fact since individual flags types are monoids and these are just sets of
--- flags then they are also monoids pointwise. This turns out to be really
--- useful. The mempty is the set of empty flags and mappend allows us to
--- override specific flags. For example we can start with default flags and
--- override with the ones we get from a file or the command line, or both.
-
--- | Flags that apply at the top level, not to any sub-command.
-data GlobalFlags = GlobalFlags {
-    globalVersion        :: Flag Bool,
-    globalNumericVersion :: Flag Bool
-  } deriving (Generic, Typeable)
-
-defaultGlobalFlags :: GlobalFlags
-defaultGlobalFlags  = GlobalFlags {
-    globalVersion        = Flag False,
-    globalNumericVersion = Flag False
-  }
-
-globalCommand :: [Command action] -> CommandUI GlobalFlags
-globalCommand commands = CommandUI
-  { commandName         = ""
-  , commandSynopsis     = ""
-  , commandUsage        = \pname ->
-         "This Setup program uses the Haskell Cabal Infrastructure.\n"
-      ++ "See http://www.haskell.org/cabal/ for more information.\n"
-      ++ "\n"
-      ++ "Usage: " ++ pname ++ " [GLOBAL FLAGS] [COMMAND [FLAGS]]\n"
-  , commandDescription = Just $ \pname ->
-      let
-        commands' = commands ++ [commandAddAction helpCommandUI undefined]
-        cmdDescs = getNormalCommandDescriptions commands'
-        maxlen    = maximum $ [length name | (name, _) <- cmdDescs]
-        align str = str ++ replicate (maxlen - length str) ' '
-      in
-         "Commands:\n"
-      ++ unlines [ "  " ++ align name ++ "    " ++ descr
-                 | (name, descr) <- cmdDescs ]
-      ++ "\n"
-      ++ "For more information about a command use\n"
-      ++ "  " ++ pname ++ " COMMAND --help\n\n"
-      ++ "Typical steps for installing Cabal packages:\n"
-      ++ concat [ "  " ++ pname ++ " " ++ x ++ "\n"
-                | x <- ["configure", "build", "install"]]
-  , commandNotes        = Nothing
-  , commandDefaultFlags = defaultGlobalFlags
-  , commandOptions      = \_ ->
-      [option ['V'] ["version"]
-         "Print version information"
-         globalVersion (\v flags -> flags { globalVersion = v })
-         trueArg
-      ,option [] ["numeric-version"]
-         "Print just the version number"
-         globalNumericVersion (\v flags -> flags { globalNumericVersion = v })
-         trueArg
-      ]
-  }
-
-emptyGlobalFlags :: GlobalFlags
-emptyGlobalFlags = mempty
-
-instance Monoid GlobalFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup GlobalFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * Config flags
--- ------------------------------------------------------------
-
--- | Flags to @configure@ command.
---
--- IMPORTANT: every time a new flag is added, 'D.C.Setup.filterConfigureFlags'
--- should be updated.
--- IMPORTANT: every time a new flag is added, it should be added to the Eq instance
-data ConfigFlags = ConfigFlags {
-    -- This is the same hack as in 'buildArgs' and 'copyArgs'.
-    -- TODO: Stop using this eventually when 'UserHooks' gets changed
-    configArgs :: [String],
-
-    --FIXME: the configPrograms is only here to pass info through to configure
-    -- because the type of configure is constrained by the UserHooks.
-    -- when we change UserHooks next we should pass the initial
-    -- ProgramDb directly and not via ConfigFlags
-    configPrograms_     :: Option' (Last' ProgramDb), -- ^All programs that
-                                                      -- @cabal@ may run
-    configProgramPaths  :: [(String, FilePath)], -- ^user specified programs paths
-    configProgramArgs   :: [(String, [String])], -- ^user specified programs args
-    configProgramPathExtra :: NubList FilePath,  -- ^Extend the $PATH
-    configHcFlavor      :: Flag CompilerFlavor, -- ^The \"flavor\" of the
-                                                -- compiler, e.g. GHC.
-    configHcPath        :: Flag FilePath, -- ^given compiler location
-    configHcPkg         :: Flag FilePath, -- ^given hc-pkg location
-    configVanillaLib    :: Flag Bool,     -- ^Enable vanilla library
-    configProfLib       :: Flag Bool,     -- ^Enable profiling in the library
-    configSharedLib     :: Flag Bool,     -- ^Build shared library
-    configStaticLib     :: Flag Bool,     -- ^Build static library
-    configDynExe        :: Flag Bool,     -- ^Enable dynamic linking of the
-                                          -- executables.
-    configFullyStaticExe :: Flag Bool,     -- ^Enable fully static linking of the
-                                          -- executables.
-    configProfExe       :: Flag Bool,     -- ^Enable profiling in the
-                                          -- executables.
-    configProf          :: Flag Bool,     -- ^Enable profiling in the library
-                                          -- and executables.
-    configProfDetail    :: Flag ProfDetailLevel, -- ^Profiling detail level
-                                          --  in the library and executables.
-    configProfLibDetail :: Flag ProfDetailLevel, -- ^Profiling  detail level
-                                                 -- in the library
-    configConfigureArgs :: [String],      -- ^Extra arguments to @configure@
-    configOptimization  :: Flag OptimisationLevel,  -- ^Enable optimization.
-    configProgPrefix    :: Flag PathTemplate, -- ^Installed executable prefix.
-    configProgSuffix    :: Flag PathTemplate, -- ^Installed executable suffix.
-    configInstallDirs   :: InstallDirs (Flag PathTemplate), -- ^Installation
-                                                            -- paths
-    configScratchDir    :: Flag FilePath,
-    configExtraLibDirs  :: [FilePath],   -- ^ path to search for extra libraries
-    configExtraLibDirsStatic :: [FilePath],   -- ^ path to search for extra
-                                              --   libraries when linking
-                                              --   fully static executables
-    configExtraFrameworkDirs :: [FilePath],   -- ^ path to search for extra
-                                              -- frameworks (OS X only)
-    configExtraIncludeDirs :: [FilePath],   -- ^ path to search for header files
-    configIPID          :: Flag String, -- ^ explicit IPID to be used
-    configCID           :: Flag ComponentId, -- ^ explicit CID to be used
-    configDeterministic :: Flag Bool, -- ^ be as deterministic as possible
-                                      -- (e.g., invariant over GHC, database,
-                                      -- etc).  Used by the test suite
-
-    configDistPref :: Flag FilePath, -- ^"dist" prefix
-    configCabalFilePath :: Flag FilePath, -- ^ Cabal file to use
-    configVerbosity :: Flag Verbosity, -- ^verbosity level
-    configUserInstall :: Flag Bool,    -- ^The --user\/--global flag
-    configPackageDBs :: [Maybe PackageDB], -- ^Which package DBs to use
-    configGHCiLib   :: Flag Bool,      -- ^Enable compiling library for GHCi
-    configSplitSections :: Flag Bool,      -- ^Enable -split-sections with GHC
-    configSplitObjs :: Flag Bool,      -- ^Enable -split-objs with GHC
-    configStripExes :: Flag Bool,      -- ^Enable executable stripping
-    configStripLibs :: Flag Bool,      -- ^Enable library stripping
-    configConstraints :: [PackageVersionConstraint], -- ^Additional constraints for
-                                                     -- dependencies.
-    configDependencies :: [GivenComponent],
-      -- ^The packages depended on.
-    configInstantiateWith :: [(ModuleName, Module)],
-      -- ^ The requested Backpack instantiation.  If empty, either this
-      -- package does not use Backpack, or we just want to typecheck
-      -- the indefinite package.
-    configConfigurationsFlags :: FlagAssignment,
-    configTests               :: Flag Bool, -- ^Enable test suite compilation
-    configBenchmarks          :: Flag Bool, -- ^Enable benchmark compilation
-    configCoverage :: Flag Bool, -- ^Enable program coverage
-    configLibCoverage :: Flag Bool, -- ^Enable program coverage (deprecated)
-    configExactConfiguration  :: Flag Bool,
-      -- ^All direct dependencies and flags are provided on the command line by
-      -- the user via the '--dependency' and '--flags' options.
-    configFlagError :: Flag String,
-      -- ^Halt and show an error message indicating an error in flag assignment
-    configRelocatable :: Flag Bool, -- ^ Enable relocatable package built
-    configDebugInfo :: Flag DebugInfoLevel,  -- ^ Emit debug info.
-    configDumpBuildInfo :: Flag DumpBuildInfo,
-      -- ^ Should we dump available build information on build?
-      -- Dump build information to disk before attempting to build,
-      -- tooling can parse these files and use them to compile the
-      -- source files themselves.
-    configUseResponseFiles :: Flag Bool,
-      -- ^ Whether to use response files at all. They're used for such tools
-      -- as haddock, or ld.
-    configAllowDependingOnPrivateLibs :: Flag Bool
-      -- ^ Allow depending on private sublibraries. This is used by external
-      -- tools (like cabal-install) so they can add multiple-public-libraries
-      -- compatibility to older ghcs by checking visibility externally.
-  }
-  deriving (Generic, Read, Show, Typeable)
-
-instance Binary ConfigFlags
-instance Structured ConfigFlags
-
--- | More convenient version of 'configPrograms'. Results in an
--- 'error' if internal invariant is violated.
-configPrograms :: WithCallStack (ConfigFlags -> ProgramDb)
-configPrograms = fromMaybe (error "FIXME: remove configPrograms") . fmap getLast'
-               . getOption' . configPrograms_
-
-instance Eq ConfigFlags where
-  (==) a b =
-    -- configPrograms skipped: not user specified, has no Eq instance
-    equal configProgramPaths
-    && equal configProgramArgs
-    && equal configProgramPathExtra
-    && equal configHcFlavor
-    && equal configHcPath
-    && equal configHcPkg
-    && equal configVanillaLib
-    && equal configProfLib
-    && equal configSharedLib
-    && equal configStaticLib
-    && equal configDynExe
-    && equal configFullyStaticExe
-    && equal configProfExe
-    && equal configProf
-    && equal configProfDetail
-    && equal configProfLibDetail
-    && equal configConfigureArgs
-    && equal configOptimization
-    && equal configProgPrefix
-    && equal configProgSuffix
-    && equal configInstallDirs
-    && equal configScratchDir
-    && equal configExtraLibDirs
-    && equal configExtraLibDirsStatic
-    && equal configExtraIncludeDirs
-    && equal configIPID
-    && equal configDeterministic
-    && equal configDistPref
-    && equal configVerbosity
-    && equal configUserInstall
-    && equal configPackageDBs
-    && equal configGHCiLib
-    && equal configSplitSections
-    && equal configSplitObjs
-    && equal configStripExes
-    && equal configStripLibs
-    && equal configConstraints
-    && equal configDependencies
-    && equal configConfigurationsFlags
-    && equal configTests
-    && equal configBenchmarks
-    && equal configCoverage
-    && equal configLibCoverage
-    && equal configExactConfiguration
-    && equal configFlagError
-    && equal configRelocatable
-    && equal configDebugInfo
-    && equal configDumpBuildInfo
-    && equal configUseResponseFiles
-    where
-      equal f = on (==) f a b
-
-configAbsolutePaths :: ConfigFlags -> IO ConfigFlags
-configAbsolutePaths f =
-  (\v -> f { configPackageDBs = v })
-  `liftM` traverse (maybe (return Nothing) (liftM Just . absolutePackageDBPath))
-  (configPackageDBs f)
-
-defaultConfigFlags :: ProgramDb -> ConfigFlags
-defaultConfigFlags progDb = emptyConfigFlags {
-    configArgs         = [],
-    configPrograms_    = Option' (Just (Last' progDb)),
-    configHcFlavor     = maybe NoFlag Flag defaultCompilerFlavor,
-    configVanillaLib   = Flag True,
-    configProfLib      = NoFlag,
-    configSharedLib    = NoFlag,
-    configStaticLib    = NoFlag,
-    configDynExe       = Flag False,
-    configFullyStaticExe = Flag False,
-    configProfExe      = NoFlag,
-    configProf         = NoFlag,
-    configProfDetail   = NoFlag,
-    configProfLibDetail= NoFlag,
-    configOptimization = Flag NormalOptimisation,
-    configProgPrefix   = Flag (toPathTemplate ""),
-    configProgSuffix   = Flag (toPathTemplate ""),
-    configDistPref     = NoFlag,
-    configCabalFilePath = NoFlag,
-    configVerbosity    = Flag normal,
-    configUserInstall  = Flag False,           --TODO: reverse this
-#if defined(mingw32_HOST_OS)
-    -- See #8062 and GHC #21019.
-    configGHCiLib      = Flag False,
-#else
-    configGHCiLib      = NoFlag,
-#endif
-    configSplitSections = Flag False,
-    configSplitObjs    = Flag False, -- takes longer, so turn off by default
-    configStripExes    = NoFlag,
-    configStripLibs    = NoFlag,
-    configTests        = Flag False,
-    configBenchmarks   = Flag False,
-    configCoverage     = Flag False,
-    configLibCoverage  = NoFlag,
-    configExactConfiguration = Flag False,
-    configFlagError    = NoFlag,
-    configRelocatable  = Flag False,
-    configDebugInfo    = Flag NoDebugInfo,
-    configDumpBuildInfo = NoFlag,
-    configUseResponseFiles = NoFlag
-  }
-
-configureCommand :: ProgramDb -> CommandUI ConfigFlags
-configureCommand progDb = CommandUI
-  { commandName         = "configure"
-  , commandSynopsis     = "Prepare to build the package."
-  , commandDescription  = Just $ \_ -> wrapText $
-         "Configure how the package is built by setting "
-      ++ "package (and other) flags.\n"
-      ++ "\n"
-      ++ "The configuration affects several other commands, "
-      ++ "including build, test, bench, run, repl.\n"
-  , commandNotes        = Just $ \_pname -> programFlagsDescription progDb
-  , commandUsage        = \pname ->
-      "Usage: " ++ pname ++ " configure [FLAGS]\n"
-  , commandDefaultFlags = defaultConfigFlags progDb
-  , commandOptions      = \showOrParseArgs ->
-         configureOptions showOrParseArgs
-      ++ programDbPaths   progDb showOrParseArgs
-           configProgramPaths (\v fs -> fs { configProgramPaths = v })
-      ++ programDbOption progDb showOrParseArgs
-           configProgramArgs (\v fs -> fs { configProgramArgs = v })
-      ++ programDbOptions progDb showOrParseArgs
-           configProgramArgs (\v fs -> fs { configProgramArgs = v })
-  }
-
--- | Inverse to 'dispModSubstEntry'.
-parsecModSubstEntry :: ParsecParser (ModuleName, Module)
-parsecModSubstEntry = do
-    k <- parsec
-    _ <- P.char '='
-    v <- parsec
-    return (k, v)
-
--- | Pretty-print a single entry of a module substitution.
-dispModSubstEntry :: (ModuleName, Module) -> Disp.Doc
-dispModSubstEntry (k, v) = pretty k <<>> Disp.char '=' <<>> pretty v
-
-configureOptions :: ShowOrParseArgs -> [OptionField ConfigFlags]
-configureOptions showOrParseArgs =
-      [optionVerbosity configVerbosity
-       (\v flags -> flags { configVerbosity = v })
-      ,optionDistPref
-         configDistPref (\d flags -> flags { configDistPref = d })
-         showOrParseArgs
-
-      ,option [] ["compiler"] "compiler"
-         configHcFlavor (\v flags -> flags { configHcFlavor = v })
-         (choiceOpt [ (Flag GHC,   ("g", ["ghc"]),   "compile with GHC")
-                    , (Flag GHCJS, ([] , ["ghcjs"]), "compile with GHCJS")
-                    , (Flag UHC,   ([] , ["uhc"]),   "compile with UHC")
-                    -- "haskell-suite" compiler id string will be replaced
-                    -- by a more specific one during the configure stage
-                    , (Flag (HaskellSuite "haskell-suite"), ([] , ["haskell-suite"]),
-                        "compile with a haskell-suite compiler")])
-
-      ,option "" ["cabal-file"]
-         "use this Cabal file"
-         configCabalFilePath (\v flags -> flags { configCabalFilePath = v })
-         (reqArgFlag "PATH")
-
-      ,option "w" ["with-compiler"]
-         "give the path to a particular compiler"
-         configHcPath (\v flags -> flags { configHcPath = v })
-         (reqArgFlag "PATH")
-
-      ,option "" ["with-hc-pkg"]
-         "give the path to the package tool"
-         configHcPkg (\v flags -> flags { configHcPkg = v })
-         (reqArgFlag "PATH")
-      ]
-   ++ map liftInstallDirs installDirsOptions
-   ++ [option "" ["program-prefix"]
-          "prefix to be applied to installed executables"
-          configProgPrefix
-          (\v flags -> flags { configProgPrefix = v })
-          (reqPathTemplateArgFlag "PREFIX")
-
-      ,option "" ["program-suffix"]
-          "suffix to be applied to installed executables"
-          configProgSuffix (\v flags -> flags { configProgSuffix = v } )
-          (reqPathTemplateArgFlag "SUFFIX")
-
-      ,option "" ["library-vanilla"]
-         "Vanilla libraries"
-         configVanillaLib (\v flags -> flags { configVanillaLib = v })
-         (boolOpt [] [])
-
-      ,option "p" ["library-profiling"]
-         "Library profiling"
-         configProfLib (\v flags -> flags { configProfLib = v })
-         (boolOpt "p" [])
-
-      ,option "" ["shared"]
-         "Shared library"
-         configSharedLib (\v flags -> flags { configSharedLib = v })
-         (boolOpt [] [])
-
-      ,option "" ["static"]
-         "Static library"
-         configStaticLib (\v flags -> flags { configStaticLib = v })
-         (boolOpt [] [])
-
-      ,option "" ["executable-dynamic"]
-         "Executable dynamic linking"
-         configDynExe (\v flags -> flags { configDynExe = v })
-         (boolOpt [] [])
-
-      ,option "" ["executable-static"]
-         "Executable fully static linking"
-         configFullyStaticExe (\v flags -> flags { configFullyStaticExe = v })
-         (boolOpt [] [])
-
-      ,option "" ["profiling"]
-         "Executable and library profiling"
-         configProf (\v flags -> flags { configProf = v })
-         (boolOpt [] [])
-
-      ,option "" ["executable-profiling"]
-         "Executable profiling (DEPRECATED)"
-         configProfExe (\v flags -> flags { configProfExe = v })
-         (boolOpt [] [])
-
-      ,option "" ["profiling-detail"]
-         ("Profiling detail level for executable and library (default, " ++
-          "none, exported-functions, toplevel-functions,  all-functions, late).")
-         configProfDetail (\v flags -> flags { configProfDetail = v })
-         (reqArg' "level" (Flag . flagToProfDetailLevel)
-                          showProfDetailLevelFlag)
-
-      ,option "" ["library-profiling-detail"]
-         "Profiling detail level for libraries only."
-         configProfLibDetail (\v flags -> flags { configProfLibDetail = v })
-         (reqArg' "level" (Flag . flagToProfDetailLevel)
-                          showProfDetailLevelFlag)
-
-      ,multiOption "optimization"
-         configOptimization (\v flags -> flags { configOptimization = v })
-         [optArg' "n" (Flag . flagToOptimisationLevel)
-                     (\f -> case f of
-                              Flag NoOptimisation      -> []
-                              Flag NormalOptimisation  -> [Nothing]
-                              Flag MaximumOptimisation -> [Just "2"]
-                              _                        -> [])
-                 "O" ["enable-optimization","enable-optimisation"]
-                 "Build with optimization (n is 0--2, default is 1)",
-          noArg (Flag NoOptimisation) []
-                ["disable-optimization","disable-optimisation"]
-                "Build without optimization"
-         ]
-
-      ,multiOption "debug-info"
-         configDebugInfo (\v flags -> flags { configDebugInfo = v })
-         [optArg' "n" (Flag . flagToDebugInfoLevel)
-                     (\f -> case f of
-                              Flag NoDebugInfo      -> []
-                              Flag MinimalDebugInfo -> [Just "1"]
-                              Flag NormalDebugInfo  -> [Nothing]
-                              Flag MaximalDebugInfo -> [Just "3"]
-                              _                     -> [])
-                 "" ["enable-debug-info"]
-                 "Emit debug info (n is 0--3, default is 0)",
-          noArg (Flag NoDebugInfo) []
-                ["disable-debug-info"]
-                "Don't emit debug info"
-         ]
-
-      , multiOption "build-info"
-         configDumpBuildInfo
-         (\v flags -> flags { configDumpBuildInfo = v })
-         [noArg (Flag DumpBuildInfo) []
-                ["enable-build-info"]
-                "Enable build information generation during project building",
-          noArg (Flag NoDumpBuildInfo) []
-                ["disable-build-info"]
-                "Disable build information generation during project building"
-         ]
-
-      ,option "" ["library-for-ghci"]
-         "compile library for use with GHCi"
-         configGHCiLib (\v flags -> flags { configGHCiLib = v })
-         (boolOpt [] [])
-
-      ,option "" ["split-sections"]
-         "compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)"
-         configSplitSections (\v flags -> flags { configSplitSections = v })
-         (boolOpt [] [])
-
-      ,option "" ["split-objs"]
-         "split library into smaller objects to reduce binary sizes (GHC 6.6+)"
-         configSplitObjs (\v flags -> flags { configSplitObjs = v })
-         (boolOpt [] [])
-
-      ,option "" ["executable-stripping"]
-         "strip executables upon installation to reduce binary sizes"
-         configStripExes (\v flags -> flags { configStripExes = v })
-         (boolOpt [] [])
-
-      ,option "" ["library-stripping"]
-         "strip libraries upon installation to reduce binary sizes"
-         configStripLibs (\v flags -> flags { configStripLibs = v })
-         (boolOpt [] [])
-
-      ,option "" ["configure-option"]
-         "Extra option for configure"
-         configConfigureArgs (\v flags -> flags { configConfigureArgs = v })
-         (reqArg' "OPT" (\x -> [x]) id)
-
-      ,option "" ["user-install"]
-         "doing a per-user installation"
-         configUserInstall (\v flags -> flags { configUserInstall = v })
-         (boolOpt' ([],["user"]) ([], ["global"]))
-
-      ,option "" ["package-db"]
-         (   "Append the given package database to the list of package"
-          ++ " databases used (to satisfy dependencies and register into)."
-          ++ " May be a specific file, 'global' or 'user'. The initial list"
-          ++ " is ['global'], ['global', 'user'], or ['global', $sandbox],"
-          ++ " depending on context. Use 'clear' to reset the list to empty."
-          ++ " See the user guide for details.")
-         configPackageDBs (\v flags -> flags { configPackageDBs = v })
-         (reqArg' "DB" readPackageDbList showPackageDbList)
-
-      ,option "f" ["flags"]
-         "Force values for the given flags in Cabal conditionals in the .cabal file.  E.g., --flags=\"debug -usebytestrings\" forces the flag \"debug\" to true and \"usebytestrings\" to false."
-         configConfigurationsFlags (\v flags -> flags { configConfigurationsFlags = v })
-         (reqArg "FLAGS"
-              (parsecToReadE (\err -> "Invalid flag assignment: " ++ err) legacyParsecFlagAssignment)
-              legacyShowFlagAssignment')
-
-      ,option "" ["extra-include-dirs"]
-         "A list of directories to search for header files"
-         configExtraIncludeDirs (\v flags -> flags {configExtraIncludeDirs = v})
-         (reqArg' "PATH" (\x -> [x]) id)
-
-      ,option "" ["deterministic"]
-         "Try to be as deterministic as possible (used by the test suite)"
-         configDeterministic (\v flags -> flags {configDeterministic = v})
-         (boolOpt [] [])
-
-      ,option "" ["ipid"]
-         "Installed package ID to compile this package as"
-         configIPID (\v flags -> flags {configIPID = v})
-         (reqArgFlag "IPID")
-
-      ,option "" ["cid"]
-         "Installed component ID to compile this component as"
-         (fmap prettyShow . configCID) (\v flags -> flags {configCID = fmap mkComponentId v})
-         (reqArgFlag "CID")
-
-      ,option "" ["extra-lib-dirs"]
-         "A list of directories to search for external libraries"
-         configExtraLibDirs (\v flags -> flags {configExtraLibDirs = v})
-         (reqArg' "PATH" (\x -> [x]) id)
-
-      ,option "" ["extra-lib-dirs-static"]
-         "A list of directories to search for external libraries when linking fully static executables"
-         configExtraLibDirsStatic (\v flags -> flags {configExtraLibDirsStatic = v})
-         (reqArg' "PATH" (\x -> [x]) id)
-
-      ,option "" ["extra-framework-dirs"]
-         "A list of directories to search for external frameworks (OS X only)"
-         configExtraFrameworkDirs
-         (\v flags -> flags {configExtraFrameworkDirs = v})
-         (reqArg' "PATH" (\x -> [x]) id)
-
-      ,option "" ["extra-prog-path"]
-         "A list of directories to search for required programs (in addition to the normal search locations)"
-         configProgramPathExtra (\v flags -> flags {configProgramPathExtra = v})
-         (reqArg' "PATH" (\x -> toNubList [x]) fromNubList)
-
-      ,option "" ["constraint"]
-         "A list of additional constraints on the dependencies."
-         configConstraints (\v flags -> flags { configConstraints = v})
-         (reqArg "DEPENDENCY"
-                 (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsec))
-                 (map prettyShow))
-
-      ,option "" ["dependency"]
-         "A list of exact dependencies. E.g., --dependency=\"void=void-0.5.8-177d5cdf20962d0581fe2e4932a6c309\""
-         configDependencies (\v flags -> flags { configDependencies = v})
-         (reqArg "NAME[:COMPONENT_NAME]=CID"
-                 (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsecGivenComponent))
-                 (map (\(GivenComponent pn cn cid) ->
-                     prettyShow pn
-                     ++ case cn of LMainLibName -> ""
-                                   LSubLibName n -> ":" ++ prettyShow n
-                     ++ "=" ++ prettyShow cid)))
-
-      ,option "" ["instantiate-with"]
-        "A mapping of signature names to concrete module instantiations."
-        configInstantiateWith (\v flags -> flags { configInstantiateWith = v  })
-        (reqArg "NAME=MOD"
-            (parsecToReadE ("Cannot parse module substitution: " ++) (fmap (:[]) parsecModSubstEntry))
-            (map (Disp.renderStyle defaultStyle . dispModSubstEntry)))
-
-      ,option "" ["tests"]
-         "dependency checking and compilation for test suites listed in the package description file."
-         configTests (\v flags -> flags { configTests = v })
-         (boolOpt [] [])
-
-      ,option "" ["coverage"]
-         "build package with Haskell Program Coverage. (GHC only)"
-         configCoverage (\v flags -> flags { configCoverage = v })
-         (boolOpt [] [])
-
-      ,option "" ["library-coverage"]
-         "build package with Haskell Program Coverage. (GHC only) (DEPRECATED)"
-         configLibCoverage (\v flags -> flags { configLibCoverage = v })
-         (boolOpt [] [])
-
-      ,option "" ["exact-configuration"]
-         "All direct dependencies and flags are provided on the command line."
-         configExactConfiguration
-         (\v flags -> flags { configExactConfiguration = v })
-         trueArg
-
-      ,option "" ["benchmarks"]
-         "dependency checking and compilation for benchmarks listed in the package description file."
-         configBenchmarks (\v flags -> flags { configBenchmarks = v })
-         (boolOpt [] [])
-
-      ,option "" ["relocatable"]
-         "building a package that is relocatable. (GHC only)"
-         configRelocatable (\v flags -> flags { configRelocatable = v})
-         (boolOpt [] [])
-
-      ,option "" ["response-files"]
-         "enable workaround for old versions of programs like \"ar\" that do not support @file arguments"
-         configUseResponseFiles
-         (\v flags -> flags { configUseResponseFiles = v })
-         (boolOpt' ([], ["disable-response-files"]) ([], []))
-
-      ,option "" ["allow-depending-on-private-libs"]
-         (  "Allow depending on private libraries. "
-         ++ "If set, the library visibility check MUST be done externally." )
-         configAllowDependingOnPrivateLibs
-         (\v flags -> flags { configAllowDependingOnPrivateLibs = v })
-         trueArg
-      ]
-  where
-    liftInstallDirs =
-      liftOption configInstallDirs (\v flags -> flags { configInstallDirs = v })
-
-    reqPathTemplateArgFlag title _sf _lf d get set =
-      reqArgFlag title _sf _lf d
-        (fmap fromPathTemplate . get) (set . fmap toPathTemplate)
-
-readPackageDbList :: String -> [Maybe PackageDB]
-readPackageDbList str = [readPackageDb str]
-
--- | Parse a PackageDB stack entry
---
--- @since 3.7.0.0
-readPackageDb :: String -> Maybe PackageDB
-readPackageDb "clear"  = Nothing
-readPackageDb "global" = Just GlobalPackageDB
-readPackageDb "user"   = Just UserPackageDB
-readPackageDb other    = Just (SpecificPackageDB other)
-
-showPackageDbList :: [Maybe PackageDB] -> [String]
-showPackageDbList = map showPackageDb
-
--- | Show a PackageDB stack entry
---
--- @since 3.7.0.0
-showPackageDb :: Maybe PackageDB -> String
-showPackageDb Nothing                       = "clear"
-showPackageDb (Just GlobalPackageDB)        = "global"
-showPackageDb (Just UserPackageDB)          = "user"
-showPackageDb (Just (SpecificPackageDB db)) = db
-
-showProfDetailLevelFlag :: Flag ProfDetailLevel -> [String]
-showProfDetailLevelFlag NoFlag    = []
-showProfDetailLevelFlag (Flag dl) = [showProfDetailLevel dl]
-
-parsecGivenComponent :: ParsecParser GivenComponent
-parsecGivenComponent = do
-  pn <- parsec
-  ln <- P.option LMainLibName $ do
-    _ <- P.char ':'
-    ucn <- parsec
-    return $ if unUnqualComponentName ucn == unPackageName pn
-             then LMainLibName
-             else LSubLibName ucn
-  _ <- P.char '='
-  cid <- parsec
-  return $ GivenComponent pn ln cid
-
-installDirsOptions :: [OptionField (InstallDirs (Flag PathTemplate))]
-installDirsOptions =
-  [ option "" ["prefix"]
-      "bake this prefix in preparation of installation"
-      prefix (\v flags -> flags { prefix = v })
-      installDirArg
-
-  , option "" ["bindir"]
-      "installation directory for executables"
-      bindir (\v flags -> flags { bindir = v })
-      installDirArg
-
-  , option "" ["libdir"]
-      "installation directory for libraries"
-      libdir (\v flags -> flags { libdir = v })
-      installDirArg
-
-  , option "" ["libsubdir"]
-      "subdirectory of libdir in which libs are installed"
-      libsubdir (\v flags -> flags { libsubdir = v })
-      installDirArg
-
-  , option "" ["dynlibdir"]
-      "installation directory for dynamic libraries"
-      dynlibdir (\v flags -> flags { dynlibdir = v })
-      installDirArg
-
-  , option "" ["libexecdir"]
-      "installation directory for program executables"
-      libexecdir (\v flags -> flags { libexecdir = v })
-      installDirArg
-
-  , option "" ["libexecsubdir"]
-      "subdirectory of libexecdir in which private executables are installed"
-      libexecsubdir (\v flags -> flags { libexecsubdir = v })
-      installDirArg
-
-  , option "" ["datadir"]
-      "installation directory for read-only data"
-      datadir (\v flags -> flags { datadir = v })
-      installDirArg
-
-  , option "" ["datasubdir"]
-      "subdirectory of datadir in which data files are installed"
-      datasubdir (\v flags -> flags { datasubdir = v })
-      installDirArg
-
-  , option "" ["docdir"]
-      "installation directory for documentation"
-      docdir (\v flags -> flags { docdir = v })
-      installDirArg
-
-  , option "" ["htmldir"]
-      "installation directory for HTML documentation"
-      htmldir (\v flags -> flags { htmldir = v })
-      installDirArg
-
-  , option "" ["haddockdir"]
-      "installation directory for haddock interfaces"
-      haddockdir (\v flags -> flags { haddockdir = v })
-      installDirArg
-
-  , option "" ["sysconfdir"]
-      "installation directory for configuration files"
-      sysconfdir (\v flags -> flags { sysconfdir = v })
-      installDirArg
-  ]
-  where
-    installDirArg _sf _lf d get set =
-      reqArgFlag "DIR" _sf _lf d
-        (fmap fromPathTemplate . get) (set . fmap toPathTemplate)
-
-emptyConfigFlags :: ConfigFlags
-emptyConfigFlags = mempty
-
-instance Monoid ConfigFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup ConfigFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * Copy flags
--- ------------------------------------------------------------
-
--- | Flags to @copy@: (destdir, copy-prefix (backwards compat), verbosity)
-data CopyFlags = CopyFlags {
-    copyDest      :: Flag CopyDest,
-    copyDistPref  :: Flag FilePath,
-    copyVerbosity :: Flag Verbosity,
-    -- This is the same hack as in 'buildArgs'.  But I (ezyang) don't
-    -- think it's a hack, it's the right way to make hooks more robust
-    -- TODO: Stop using this eventually when 'UserHooks' gets changed
-    copyArgs :: [String],
-    copyCabalFilePath :: Flag FilePath
-  }
-  deriving (Show, Generic)
-
-defaultCopyFlags :: CopyFlags
-defaultCopyFlags  = CopyFlags {
-    copyDest      = Flag NoCopyDest,
-    copyDistPref  = NoFlag,
-    copyVerbosity = Flag normal,
-    copyArgs      = [],
-    copyCabalFilePath = mempty
-  }
-
-copyCommand :: CommandUI CopyFlags
-copyCommand = CommandUI
-  { commandName         = "copy"
-  , commandSynopsis     = "Copy the files of all/specific components to install locations."
-  , commandDescription  = Just $ \_ -> wrapText $
-          "Components encompass executables and libraries. "
-       ++ "Does not call register, and allows a prefix at install time. "
-       ++ "Without the --destdir flag, configure determines location.\n"
-  , commandNotes        = Just $ \pname ->
-       "Examples:\n"
-        ++ "  " ++ pname ++ " copy           "
-        ++ "    All the components in the package\n"
-        ++ "  " ++ pname ++ " copy foo       "
-        ++ "    A component (i.e. lib, exe, test suite)"
-  , commandUsage        = usageAlternatives "copy" $
-      [ "[FLAGS]"
-      , "COMPONENTS [FLAGS]"
-      ]
-  , commandDefaultFlags = defaultCopyFlags
-  , commandOptions      = \showOrParseArgs -> case showOrParseArgs of
-      ShowArgs -> filter ((`notElem` ["target-package-db"])
-                          . optionName) $ copyOptions ShowArgs
-      ParseArgs -> copyOptions ParseArgs
-}
-
-copyOptions ::  ShowOrParseArgs -> [OptionField CopyFlags]
-copyOptions showOrParseArgs =
-  [optionVerbosity copyVerbosity (\v flags -> flags { copyVerbosity = v })
-
-  ,optionDistPref
-    copyDistPref (\d flags -> flags { copyDistPref = d })
-    showOrParseArgs
-
-  ,option "" ["destdir"]
-    "directory to copy files to, prepended to installation directories"
-    copyDest (\v flags -> case copyDest flags of
-                 Flag (CopyToDb _) -> error "Use either 'destdir' or 'target-package-db'."
-                 _ -> flags { copyDest = v })
-    (reqArg "DIR" (succeedReadE (Flag . CopyTo))
-      (\f -> case f of Flag (CopyTo p) -> [p]; _ -> []))
-
-  ,option "" ["target-package-db"]
-    "package database to copy files into. Required when using ${pkgroot} prefix."
-    copyDest (\v flags -> case copyDest flags of
-                 NoFlag -> flags { copyDest = v }
-                 Flag NoCopyDest -> flags { copyDest = v }
-                 _ -> error "Use either 'destdir' or 'target-package-db'.")
-    (reqArg "DATABASE" (succeedReadE (Flag . CopyToDb))
-      (\f -> case f of Flag (CopyToDb p) -> [p]; _ -> []))
-  ]
-
-emptyCopyFlags :: CopyFlags
-emptyCopyFlags = mempty
-
-instance Monoid CopyFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup CopyFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * Install flags
--- ------------------------------------------------------------
-
--- | Flags to @install@: (package db, verbosity)
-data InstallFlags = InstallFlags {
-    installPackageDB :: Flag PackageDB,
-    installDest      :: Flag CopyDest,
-    installDistPref  :: Flag FilePath,
-    installUseWrapper :: Flag Bool,
-    installInPlace    :: Flag Bool,
-    installVerbosity :: Flag Verbosity,
-    -- this is only here, because we can not
-    -- change the hooks API.
-    installCabalFilePath :: Flag FilePath
-  }
-  deriving (Show, Generic)
-
-defaultInstallFlags :: InstallFlags
-defaultInstallFlags  = InstallFlags {
-    installPackageDB = NoFlag,
-    installDest      = Flag NoCopyDest,
-    installDistPref  = NoFlag,
-    installUseWrapper = Flag False,
-    installInPlace    = Flag False,
-    installVerbosity = Flag normal,
-    installCabalFilePath = mempty
-  }
-
-installCommand :: CommandUI InstallFlags
-installCommand = CommandUI
-  { commandName         = "install"
-  , commandSynopsis     =
-      "Copy the files into the install locations. Run register."
-  , commandDescription  = Just $ \_ -> wrapText $
-         "Unlike the copy command, install calls the register command."
-      ++ "If you want to install into a location that is not what was"
-      ++ "specified in the configure step, use the copy command.\n"
-  , commandNotes        = Nothing
-  , commandUsage        = \pname ->
-      "Usage: " ++ pname ++ " install [FLAGS]\n"
-  , commandDefaultFlags = defaultInstallFlags
-  , commandOptions      = \showOrParseArgs -> case showOrParseArgs of
-      ShowArgs -> filter ((`notElem` ["target-package-db"])
-                          . optionName) $ installOptions ShowArgs
-      ParseArgs -> installOptions ParseArgs
-  }
-
-installOptions ::  ShowOrParseArgs -> [OptionField InstallFlags]
-installOptions showOrParseArgs =
-  [optionVerbosity installVerbosity (\v flags -> flags { installVerbosity = v })
-  ,optionDistPref
-    installDistPref (\d flags -> flags { installDistPref = d })
-    showOrParseArgs
-
-  ,option "" ["inplace"]
-    "install the package in the install subdirectory of the dist prefix, so it can be used without being installed"
-    installInPlace (\v flags -> flags { installInPlace = v })
-    trueArg
-
-  ,option "" ["shell-wrappers"]
-    "using shell script wrappers around executables"
-    installUseWrapper (\v flags -> flags { installUseWrapper = v })
-    (boolOpt [] [])
-
-  ,option "" ["package-db"] ""
-    installPackageDB (\v flags -> flags { installPackageDB = v })
-    (choiceOpt [ (Flag UserPackageDB, ([],["user"]),
-                   "upon configuration register this package in the user's local package database")
-               , (Flag GlobalPackageDB, ([],["global"]),
-                   "(default) upon configuration register this package in the system-wide package database")])
-  ,option "" ["target-package-db"]
-    "package database to install into. Required when using ${pkgroot} prefix."
-    installDest (\v flags -> flags { installDest = v })
-    (reqArg "DATABASE" (succeedReadE (Flag . CopyToDb))
-      (\f -> case f of Flag (CopyToDb p) -> [p]; _ -> []))
-  ]
-
-emptyInstallFlags :: InstallFlags
-emptyInstallFlags = mempty
-
-instance Monoid InstallFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup InstallFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * SDist flags
--- ------------------------------------------------------------
-
--- | Flags to @sdist@: (snapshot, verbosity)
-data SDistFlags = SDistFlags {
-    sDistSnapshot    :: Flag Bool,
-    sDistDirectory   :: Flag FilePath,
-    sDistDistPref    :: Flag FilePath,
-    sDistListSources :: Flag FilePath,
-    sDistVerbosity   :: Flag Verbosity
-  }
-  deriving (Show, Generic, Typeable)
-
-defaultSDistFlags :: SDistFlags
-defaultSDistFlags = SDistFlags {
-    sDistSnapshot    = Flag False,
-    sDistDirectory   = mempty,
-    sDistDistPref    = NoFlag,
-    sDistListSources = mempty,
-    sDistVerbosity   = Flag normal
-  }
-
-sdistCommand :: CommandUI SDistFlags
-sdistCommand = CommandUI
-  { commandName         = "sdist"
-  , commandSynopsis     =
-      "Generate a source distribution file (.tar.gz)."
-  , commandDescription  = Nothing
-  , commandNotes        = Nothing
-  , commandUsage        = \pname ->
-      "Usage: " ++ pname ++ " sdist [FLAGS]\n"
-  , commandDefaultFlags = defaultSDistFlags
-  , commandOptions      = \showOrParseArgs ->
-      [optionVerbosity sDistVerbosity (\v flags -> flags { sDistVerbosity = v })
-      ,optionDistPref
-         sDistDistPref (\d flags -> flags { sDistDistPref = d })
-         showOrParseArgs
-
-      ,option "" ["list-sources"]
-         "Just write a list of the package's sources to a file"
-         sDistListSources (\v flags -> flags { sDistListSources = v })
-         (reqArgFlag "FILE")
-
-      ,option "" ["snapshot"]
-         "Produce a snapshot source distribution"
-         sDistSnapshot (\v flags -> flags { sDistSnapshot = v })
-         trueArg
-
-      ,option "" ["output-directory"]
-       ("Generate a source distribution in the given directory, "
-        ++ "without creating a tarball")
-         sDistDirectory (\v flags -> flags { sDistDirectory = v })
-         (reqArgFlag "DIR")
-      ]
-  }
-
-emptySDistFlags :: SDistFlags
-emptySDistFlags = mempty
-
-instance Monoid SDistFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup SDistFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * Register flags
--- ------------------------------------------------------------
-
--- | Flags to @register@ and @unregister@: (user package, gen-script,
--- in-place, verbosity)
-data RegisterFlags = RegisterFlags {
-    regPackageDB   :: Flag PackageDB,
-    regGenScript   :: Flag Bool,
-    regGenPkgConf  :: Flag (Maybe FilePath),
-    regInPlace     :: Flag Bool,
-    regDistPref    :: Flag FilePath,
-    regPrintId     :: Flag Bool,
-    regVerbosity   :: Flag Verbosity,
-    -- Same as in 'buildArgs' and 'copyArgs'
-    regArgs        :: [String],
-    regCabalFilePath :: Flag FilePath
-  }
-  deriving (Show, Generic, Typeable)
-
-defaultRegisterFlags :: RegisterFlags
-defaultRegisterFlags = RegisterFlags {
-    regPackageDB   = NoFlag,
-    regGenScript   = Flag False,
-    regGenPkgConf  = NoFlag,
-    regInPlace     = Flag False,
-    regDistPref    = NoFlag,
-    regPrintId     = Flag False,
-    regArgs        = [],
-    regCabalFilePath = mempty,
-    regVerbosity   = Flag normal
-  }
-
-registerCommand :: CommandUI RegisterFlags
-registerCommand = CommandUI
-  { commandName         = "register"
-  , commandSynopsis     =
-      "Register this package with the compiler."
-  , commandDescription  = Nothing
-  , commandNotes        = Nothing
-  , commandUsage        = \pname ->
-      "Usage: " ++ pname ++ " register [FLAGS]\n"
-  , commandDefaultFlags = defaultRegisterFlags
-  , commandOptions      = \showOrParseArgs ->
-      [optionVerbosity regVerbosity (\v flags -> flags { regVerbosity = v })
-      ,optionDistPref
-         regDistPref (\d flags -> flags { regDistPref = d })
-         showOrParseArgs
-
-      ,option "" ["packageDB"] ""
-         regPackageDB (\v flags -> flags { regPackageDB = v })
-         (choiceOpt [ (Flag UserPackageDB, ([],["user"]),
-                                "upon registration, register this package in the user's local package database")
-                    , (Flag GlobalPackageDB, ([],["global"]),
-                                "(default)upon registration, register this package in the system-wide package database")])
-
-      ,option "" ["inplace"]
-         "register the package in the build location, so it can be used without being installed"
-         regInPlace (\v flags -> flags { regInPlace = v })
-         trueArg
-
-      ,option "" ["gen-script"]
-         "instead of registering, generate a script to register later"
-         regGenScript (\v flags -> flags { regGenScript = v })
-         trueArg
-
-      ,option "" ["gen-pkg-config"]
-         "instead of registering, generate a package registration file/directory"
-         regGenPkgConf (\v flags -> flags { regGenPkgConf  = v })
-         (optArg' "PKG" Flag flagToList)
-
-      ,option "" ["print-ipid"]
-         "print the installed package ID calculated for this package"
-         regPrintId (\v flags -> flags { regPrintId = v })
-         trueArg
-      ]
-  }
-
-unregisterCommand :: CommandUI RegisterFlags
-unregisterCommand = CommandUI
-  { commandName         = "unregister"
-  , commandSynopsis     =
-      "Unregister this package with the compiler."
-  , commandDescription  = Nothing
-  , commandNotes        = Nothing
-  , commandUsage        = \pname ->
-      "Usage: " ++ pname ++ " unregister [FLAGS]\n"
-  , commandDefaultFlags = defaultRegisterFlags
-  , commandOptions      = \showOrParseArgs ->
-      [optionVerbosity regVerbosity (\v flags -> flags { regVerbosity = v })
-      ,optionDistPref
-         regDistPref (\d flags -> flags { regDistPref = d })
-          showOrParseArgs
-
-      ,option "" ["user"] ""
-         regPackageDB (\v flags -> flags { regPackageDB = v })
-         (choiceOpt [ (Flag UserPackageDB, ([],["user"]),
-                              "unregister this package in the user's local package database")
-                    , (Flag GlobalPackageDB, ([],["global"]),
-                              "(default) unregister this package in the  system-wide package database")])
-
-      ,option "" ["gen-script"]
-         "Instead of performing the unregister command, generate a script to unregister later"
-         regGenScript (\v flags -> flags { regGenScript = v })
-         trueArg
-      ]
-  }
-
-emptyRegisterFlags :: RegisterFlags
-emptyRegisterFlags = mempty
-
-instance Monoid RegisterFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup RegisterFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * HsColour flags
--- ------------------------------------------------------------
-
-data HscolourFlags = HscolourFlags {
-    hscolourCSS         :: Flag FilePath,
-    hscolourExecutables :: Flag Bool,
-    hscolourTestSuites  :: Flag Bool,
-    hscolourBenchmarks  :: Flag Bool,
-    hscolourForeignLibs :: Flag Bool,
-    hscolourDistPref    :: Flag FilePath,
-    hscolourVerbosity   :: Flag Verbosity,
-    hscolourCabalFilePath :: Flag FilePath
-    }
-  deriving (Show, Generic, Typeable)
-
-emptyHscolourFlags :: HscolourFlags
-emptyHscolourFlags = mempty
-
-defaultHscolourFlags :: HscolourFlags
-defaultHscolourFlags = HscolourFlags {
-    hscolourCSS         = NoFlag,
-    hscolourExecutables = Flag False,
-    hscolourTestSuites  = Flag False,
-    hscolourBenchmarks  = Flag False,
-    hscolourDistPref    = NoFlag,
-    hscolourForeignLibs = Flag False,
-    hscolourVerbosity   = Flag normal,
-    hscolourCabalFilePath = mempty
-  }
-
-instance Monoid HscolourFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup HscolourFlags where
-  (<>) = gmappend
-
-hscolourCommand :: CommandUI HscolourFlags
-hscolourCommand = CommandUI
-  { commandName         = "hscolour"
-  , commandSynopsis     =
-      "Generate HsColour colourised code, in HTML format."
-  , commandDescription  = Just (\_ -> "Requires the hscolour program.\n")
-  , commandNotes        = Just $ \_ ->
-      "Deprecated in favour of 'cabal haddock --hyperlink-source'."
-  , commandUsage        = \pname ->
-      "Usage: " ++ pname ++ " hscolour [FLAGS]\n"
-  , commandDefaultFlags = defaultHscolourFlags
-  , commandOptions      = \showOrParseArgs ->
-      [optionVerbosity hscolourVerbosity
-       (\v flags -> flags { hscolourVerbosity = v })
-      ,optionDistPref
-         hscolourDistPref (\d flags -> flags { hscolourDistPref = d })
-         showOrParseArgs
-
-      ,option "" ["executables"]
-         "Run hscolour for Executables targets"
-         hscolourExecutables (\v flags -> flags { hscolourExecutables = v })
-         trueArg
-
-      ,option "" ["tests"]
-         "Run hscolour for Test Suite targets"
-         hscolourTestSuites (\v flags -> flags { hscolourTestSuites = v })
-         trueArg
-
-      ,option "" ["benchmarks"]
-         "Run hscolour for Benchmark targets"
-         hscolourBenchmarks (\v flags -> flags { hscolourBenchmarks = v })
-         trueArg
-
-      ,option "" ["foreign-libraries"]
-         "Run hscolour for Foreign Library targets"
-         hscolourForeignLibs (\v flags -> flags { hscolourForeignLibs = v })
-         trueArg
-
-      ,option "" ["all"]
-         "Run hscolour for all targets"
-         (\f -> allFlags [ hscolourExecutables f
-                         , hscolourTestSuites  f
-                         , hscolourBenchmarks  f
-                         , hscolourForeignLibs f
-                         ])
-         (\v flags -> flags { hscolourExecutables = v
-                            , hscolourTestSuites  = v
-                            , hscolourBenchmarks  = v
-                            , hscolourForeignLibs = v
-                            })
-         trueArg
-
-      ,option "" ["css"]
-         "Use a cascading style sheet"
-         hscolourCSS (\v flags -> flags { hscolourCSS = v })
-         (reqArgFlag "PATH")
-      ]
-  }
-
--- ------------------------------------------------------------
--- * Haddock flags
--- ------------------------------------------------------------
-
-
--- | When we build haddock documentation, there are two cases:
---
--- 1. We build haddocks only for the current development version,
---    intended for local use and not for distribution. In this case,
---    we store the generated documentation in @<dist>/doc/html/<package name>@.
---
--- 2. We build haddocks for intended for uploading them to hackage.
---    In this case, we need to follow the layout that hackage expects
---    from documentation tarballs, and we might also want to use different
---    flags than for development builds, so in this case we store the generated
---    documentation in @<dist>/doc/html/<package id>-docs@.
-data HaddockTarget = ForHackage | ForDevelopment deriving (Eq, Show, Generic, Typeable)
-
-instance Binary HaddockTarget
-instance Structured HaddockTarget
-
-instance Pretty HaddockTarget where
-    pretty ForHackage     = Disp.text "for-hackage"
-    pretty ForDevelopment = Disp.text "for-development"
-
-instance Parsec HaddockTarget where
-    parsec = P.choice [ P.try $ P.string "for-hackage"     >> return ForHackage
-                      , P.string "for-development" >> return ForDevelopment]
-
-data HaddockFlags = HaddockFlags {
-    haddockProgramPaths :: [(String, FilePath)],
-    haddockProgramArgs  :: [(String, [String])],
-    haddockHoogle       :: Flag Bool,
-    haddockHtml         :: Flag Bool,
-    haddockHtmlLocation :: Flag String,
-    haddockForHackage   :: Flag HaddockTarget,
-    haddockExecutables  :: Flag Bool,
-    haddockTestSuites   :: Flag Bool,
-    haddockBenchmarks   :: Flag Bool,
-    haddockForeignLibs  :: Flag Bool,
-    haddockInternal     :: Flag Bool,
-    haddockCss          :: Flag FilePath,
-    haddockLinkedSource :: Flag Bool,
-    haddockQuickJump    :: Flag Bool,
-    haddockHscolourCss  :: Flag FilePath,
-    haddockContents     :: Flag PathTemplate,
-    haddockIndex        :: Flag PathTemplate,
-    haddockDistPref     :: Flag FilePath,
-    haddockKeepTempFiles:: Flag Bool,
-    haddockVerbosity    :: Flag Verbosity,
-    haddockCabalFilePath :: Flag FilePath,
-    haddockBaseUrl      :: Flag String,
-    haddockLib          :: Flag String,
-    haddockArgs         :: [String]
-  }
-  deriving (Show, Generic, Typeable)
-
-defaultHaddockFlags :: HaddockFlags
-defaultHaddockFlags  = HaddockFlags {
-    haddockProgramPaths = mempty,
-    haddockProgramArgs  = [],
-    haddockHoogle       = Flag False,
-    haddockHtml         = Flag False,
-    haddockHtmlLocation = NoFlag,
-    haddockForHackage   = NoFlag,
-    haddockExecutables  = Flag False,
-    haddockTestSuites   = Flag False,
-    haddockBenchmarks   = Flag False,
-    haddockForeignLibs  = Flag False,
-    haddockInternal     = Flag False,
-    haddockCss          = NoFlag,
-    haddockLinkedSource = Flag False,
-    haddockQuickJump    = Flag False,
-    haddockHscolourCss  = NoFlag,
-    haddockContents     = NoFlag,
-    haddockDistPref     = NoFlag,
-    haddockKeepTempFiles= Flag False,
-    haddockVerbosity    = Flag normal,
-    haddockCabalFilePath = mempty,
-    haddockIndex        = NoFlag,
-    haddockBaseUrl      = NoFlag,
-    haddockLib          = NoFlag,
-    haddockArgs         = mempty
-  }
-
-haddockCommand :: CommandUI HaddockFlags
-haddockCommand = CommandUI
-  { commandName         = "haddock"
-  , commandSynopsis     = "Generate Haddock HTML documentation."
-  , commandDescription  = Just $ \_ ->
-      "Requires the program haddock, version 2.x.\n"
-  , commandNotes        = Nothing
-  , commandUsage        = usageAlternatives "haddock" $
-      [ "[FLAGS]"
-      , "COMPONENTS [FLAGS]"
-      ]
-  , commandDefaultFlags = defaultHaddockFlags
-  , commandOptions      = \showOrParseArgs ->
-         haddockOptions showOrParseArgs
-      ++ programDbPaths   progDb ParseArgs
-             haddockProgramPaths (\v flags -> flags { haddockProgramPaths = v})
-      ++ programDbOption  progDb showOrParseArgs
-             haddockProgramArgs (\v fs -> fs { haddockProgramArgs = v })
-      ++ programDbOptions progDb ParseArgs
-             haddockProgramArgs  (\v flags -> flags { haddockProgramArgs = v})
-  }
-  where
-    progDb = addKnownProgram haddockProgram
-             $ addKnownProgram ghcProgram
-             $ emptyProgramDb
-
-haddockOptions :: ShowOrParseArgs -> [OptionField HaddockFlags]
-haddockOptions showOrParseArgs =
-  [optionVerbosity haddockVerbosity
-   (\v flags -> flags { haddockVerbosity = v })
-  ,optionDistPref
-   haddockDistPref (\d flags -> flags { haddockDistPref = d })
-   showOrParseArgs
-
-  ,option "" ["keep-temp-files"]
-   "Keep temporary files"
-   haddockKeepTempFiles (\b flags -> flags { haddockKeepTempFiles = b })
-   trueArg
-
-  ,option "" ["hoogle"]
-   "Generate a hoogle database"
-   haddockHoogle (\v flags -> flags { haddockHoogle = v })
-   trueArg
-
-  ,option "" ["html"]
-   "Generate HTML documentation (the default)"
-   haddockHtml (\v flags -> flags { haddockHtml = v })
-   trueArg
-
-  ,option "" ["html-location"]
-   "Location of HTML documentation for pre-requisite packages"
-   haddockHtmlLocation (\v flags -> flags { haddockHtmlLocation = v })
-   (reqArgFlag "URL")
-
-  ,option "" ["for-hackage"]
-   "Collection of flags to generate documentation suitable for upload to hackage"
-   haddockForHackage (\v flags -> flags { haddockForHackage = v })
-   (noArg (Flag ForHackage))
-
-  ,option "" ["executables"]
-   "Run haddock for Executables targets"
-   haddockExecutables (\v flags -> flags { haddockExecutables = v })
-   trueArg
-
-  ,option "" ["tests"]
-   "Run haddock for Test Suite targets"
-   haddockTestSuites (\v flags -> flags { haddockTestSuites = v })
-   trueArg
-
-  ,option "" ["benchmarks"]
-   "Run haddock for Benchmark targets"
-   haddockBenchmarks (\v flags -> flags { haddockBenchmarks = v })
-   trueArg
-
-  ,option "" ["foreign-libraries"]
-   "Run haddock for Foreign Library targets"
-   haddockForeignLibs (\v flags -> flags { haddockForeignLibs = v })
-   trueArg
-
-  ,option "" ["all"]
-   "Run haddock for all targets"
-   (\f -> allFlags [ haddockExecutables f
-                   , haddockTestSuites  f
-                   , haddockBenchmarks  f
-                   , haddockForeignLibs f
-                   ])
-         (\v flags -> flags { haddockExecutables = v
-                            , haddockTestSuites  = v
-                            , haddockBenchmarks  = v
-                            , haddockForeignLibs = v
-                            })
-         trueArg
-
-  ,option "" ["internal"]
-   "Run haddock for internal modules and include all symbols"
-   haddockInternal (\v flags -> flags { haddockInternal = v })
-   trueArg
-
-  ,option "" ["css"]
-   "Use PATH as the haddock stylesheet"
-   haddockCss (\v flags -> flags { haddockCss = v })
-   (reqArgFlag "PATH")
-
-  ,option "" ["hyperlink-source","hyperlink-sources","hyperlinked-source"]
-   "Hyperlink the documentation to the source code"
-   haddockLinkedSource (\v flags -> flags { haddockLinkedSource = v })
-   trueArg
-
-  ,option "" ["quickjump"]
-   "Generate an index for interactive documentation navigation"
-   haddockQuickJump (\v flags -> flags { haddockQuickJump = v })
-   trueArg
-
-  ,option "" ["hscolour-css"]
-   "Use PATH as the HsColour stylesheet"
-   haddockHscolourCss (\v flags -> flags { haddockHscolourCss = v })
-   (reqArgFlag "PATH")
-
-  ,option "" ["contents-location"]
-   "Bake URL in as the location for the contents page"
-   haddockContents (\v flags -> flags { haddockContents = v })
-   (reqArg' "URL"
-    (toFlag . toPathTemplate)
-    (flagToList . fmap fromPathTemplate))
-
-  ,option "" ["index-location"]
-   "Use a separately-generated HTML index"
-   haddockIndex (\v flags -> flags { haddockIndex = v})
-   (reqArg' "URL"
-    (toFlag . toPathTemplate)
-    (flagToList . fmap fromPathTemplate))
-
-  ,option "" ["base-url"]
-   "Base URL for static files."
-   haddockBaseUrl (\v flags -> flags { haddockBaseUrl = v})
-   (reqArgFlag "URL")
-
-  ,option "" ["lib"]
-   "location of Haddocks static / auxiliary files"
-   haddockLib (\v flags -> flags { haddockLib = v})
-   (reqArgFlag "DIR")
-  ]
-
-emptyHaddockFlags :: HaddockFlags
-emptyHaddockFlags = mempty
-
-instance Monoid HaddockFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup HaddockFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * HaddocksFlags flags
--- ------------------------------------------------------------
-
--- | Governs whether modules from a given interface should be visible or
--- hidden in the Haddock generated content page.  We don't expose this
--- functionality to the user, but simply use 'Visible' for only local packages.
--- Visibility of modules is available since @haddock-2.26.1@.
---
-data Visibility = Visible | Hidden
-  deriving (Eq, Show)
-
-data HaddockProjectFlags = HaddockProjectFlags {
-    haddockProjectHackage      :: Flag Bool,
-    -- ^ a shortcut option which builds documentation linked to hackage.  It implies:
-    -- * `--html-location='https://hackage.haskell.org/package/$prg-$version/docs'
-    -- * `--quickjump`
-    -- * `--gen-index`
-    -- * `--gen-contents`
-    -- * `--hyperlinked-source`
-    haddockProjectLocal        :: Flag Bool,
-    -- ^ a shortcut option which builds self contained directory which contains
-    -- all the documentation, it implies:
-    -- * `--quickjump`
-    -- * `--gen-index`
-    -- * `--gen-contents`
-    -- * `--hyperlinked-source`
-    --
-    -- And it will also pass `--base-url` option to `haddock`.
-
-    -- options passed to @haddock@ via 'createHaddockIndex'
-    haddockProjectDir          :: Flag String,
-    -- ^ output directory of combined haddocks, the default is './haddocks'
-    haddockProjectPrologue     :: Flag String,
-    haddockProjectGenIndex     :: Flag Bool,
-    haddockProjectGenContents  :: Flag Bool,
-    haddockProjectInterfaces   :: Flag [(FilePath, Maybe FilePath, Maybe FilePath, Visibility)],
-    -- ^ 'haddocksInterfaces' is inferred by the 'haddocksAction'; currently not
-    -- exposed to the user.
-
-    -- options passed to @haddock@ via 'HaddockFlags' when building
-    -- documentation
-
-    haddockProjectProgramPaths :: [(String, FilePath)],
-    haddockProjectProgramArgs  :: [(String, [String])],
-    haddockProjectHoogle       :: Flag Bool,
-    -- haddockHtml is not supported
-    haddockProjectHtmlLocation :: Flag String,
-    -- haddockForHackage is not supported
-    haddockProjectExecutables  :: Flag Bool,
-    haddockProjectTestSuites   :: Flag Bool,
-    haddockProjectBenchmarks   :: Flag Bool,
-    haddockProjectForeignLibs  :: Flag Bool,
-    haddockProjectInternal     :: Flag Bool,
-    haddockProjectCss          :: Flag FilePath,
-    haddockProjectLinkedSource :: Flag Bool,
-    haddockProjectQuickJump    :: Flag Bool,
-    haddockProjectHscolourCss  :: Flag FilePath,
-    -- haddockContent is not supported, a fixed value is provided
-    -- haddockIndex is not supported, a fixed value is provided
-    -- haddockDistPerf is not supported, note: it changes location of the haddocks
-    haddockProjectKeepTempFiles:: Flag Bool,
-    haddockProjectVerbosity    :: Flag Verbosity,
-    -- haddockBaseUrl is not supported, a fixed value is provided
-    haddockProjectLib          :: Flag String
-  }
-  deriving (Show, Generic, Typeable)
-
-defaultHaddockProjectFlags :: HaddockProjectFlags
-defaultHaddockProjectFlags = HaddockProjectFlags {
-    haddockProjectHackage      = Flag False,
-    haddockProjectLocal        = Flag False,
-    haddockProjectDir          = Flag "./haddocks",
-    haddockProjectPrologue     = NoFlag,
-    haddockProjectGenIndex     = Flag False,
-    haddockProjectGenContents  = Flag False,
-    haddockProjectTestSuites   = Flag False,
-    haddockProjectProgramPaths = mempty,
-    haddockProjectProgramArgs  = mempty,
-    haddockProjectHoogle       = Flag False,
-    haddockProjectHtmlLocation = NoFlag,
-    haddockProjectExecutables  = Flag False,
-    haddockProjectBenchmarks   = Flag False,
-    haddockProjectForeignLibs  = Flag False,
-    haddockProjectInternal     = Flag False,
-    haddockProjectCss          = NoFlag,
-    haddockProjectLinkedSource = Flag False,
-    haddockProjectQuickJump    = Flag False,
-    haddockProjectHscolourCss  = NoFlag,
-    haddockProjectKeepTempFiles= Flag False,
-    haddockProjectVerbosity    = Flag normal,
-    haddockProjectLib          = NoFlag,
-    haddockProjectInterfaces   = NoFlag
-  }
-
-haddockProjectCommand :: CommandUI HaddockProjectFlags
-haddockProjectCommand = CommandUI
-  { commandName        = "v2-haddock-project"
-  , commandSynopsis    = "Generate Haddocks HTML documentation for the cabal project."
-  , commandDescription = Just $ \_ ->
-      "Require the programm haddock, version 2.26.\n"
-  , commandNotes       = Nothing
-  , commandUsage       = usageAlternatives "haddocks" $
-      [ "[FLAGS]"
-      , "COMPONENTS [FLAGS]"
-      ]
-  , commandDefaultFlags = defaultHaddockProjectFlags
-  , commandOptions      = \showOrParseArgs ->
-         haddockProjectOptions showOrParseArgs
-      ++ programDbPaths   progDb ParseArgs
-             haddockProjectProgramPaths (\v flags -> flags { haddockProjectProgramPaths = v})
-      ++ programDbOption  progDb showOrParseArgs
-             haddockProjectProgramArgs (\v fs -> fs { haddockProjectProgramArgs = v })
-      ++ programDbOptions progDb ParseArgs
-             haddockProjectProgramArgs  (\v flags -> flags { haddockProjectProgramArgs = v})
-  }
-  where
-    progDb = addKnownProgram haddockProgram
-             $ addKnownProgram ghcProgram
-             $ emptyProgramDb
-
-haddockProjectOptions :: ShowOrParseArgs -> [OptionField HaddockProjectFlags]
-haddockProjectOptions _showOrParseArgs =
-    [option "" ["hackage"]
-     (concat ["A short-cut option to build documentation linked to hackage; "
-             ,"it implies --quickjump, --gen-index, --gen-contents, "
-             ,"--hyperlinked-source and --html-location"
-             ])
-     haddockProjectHackage (\v flags -> flags { haddockProjectHackage = v })
-     trueArg
-
-    ,option "" ["local"]
-     (concat ["A short-cut option to build self contained documentation; "
-             ,"it implies  --quickjump, --gen-index, --gen-contents "
-             ,"and --hyperlinked-source."
-             ])
-     haddockProjectLocal (\v flags -> flags { haddockProjectLocal = v })
-     trueArg
-
-    ,option "" ["output"]
-      "Output directory"
-      haddockProjectDir (\v flags -> flags { haddockProjectDir = v })
-      (optArg' "DIRECTORY" maybeToFlag (fmap Just . flagToList))
-
-    ,option "" ["prologue"]
-     "File path to a prologue file in haddock format"
-     haddockProjectPrologue (\v flags -> flags { haddockProjectPrologue = v})
-     (optArg' "PATH" maybeToFlag (fmap Just . flagToList))
-
-    ,option "" ["gen-index"]
-     "Generate index"
-     haddockProjectGenIndex (\v flags -> flags { haddockProjectGenIndex = v})
-     trueArg
-
-    ,option "" ["gen-contents"]
-     "Generate contents"
-     haddockProjectGenContents (\v flags -> flags { haddockProjectGenContents = v})
-     trueArg
-
-    ,option "" ["hoogle"]
-     "Generate a hoogle database"
-     haddockProjectHoogle (\v flags -> flags { haddockProjectHoogle = v })
-     trueArg
-
-    ,option "" ["html-location"]
-     "Location of HTML documentation for pre-requisite packages"
-     haddockProjectHtmlLocation (\v flags -> flags { haddockProjectHtmlLocation = v })
-     (reqArgFlag "URL")
-
-    ,option "" ["executables"]
-     "Run haddock for Executables targets"
-     haddockProjectExecutables (\v flags -> flags { haddockProjectExecutables = v })
-     trueArg
-
-    ,option "" ["tests"]
-     "Run haddock for Test Suite targets"
-     haddockProjectTestSuites (\v flags -> flags { haddockProjectTestSuites = v })
-     trueArg
-
-    ,option "" ["benchmarks"]
-     "Run haddock for Benchmark targets"
-     haddockProjectBenchmarks (\v flags -> flags { haddockProjectBenchmarks = v })
-     trueArg
-
-    ,option "" ["foreign-libraries"]
-     "Run haddock for Foreign Library targets"
-     haddockProjectForeignLibs (\v flags -> flags { haddockProjectForeignLibs = v })
-     trueArg
-
-    ,option "" ["internal"]
-     "Run haddock for internal modules and include all symbols"
-     haddockProjectInternal (\v flags -> flags { haddockProjectInternal = v })
-     trueArg
-
-    ,option "" ["css"]
-     "Use PATH as the haddock stylesheet"
-     haddockProjectCss (\v flags -> flags { haddockProjectCss = v })
-     (reqArgFlag "PATH")
-
-    ,option "" ["hyperlink-source","hyperlink-sources","hyperlinked-source"]
-     "Hyperlink the documentation to the source code"
-     haddockProjectLinkedSource (\v flags -> flags { haddockProjectLinkedSource = v })
-     trueArg
-
-    ,option "" ["quickjump"]
-     "Generate an index for interactive documentation navigation"
-     haddockProjectQuickJump (\v flags -> flags { haddockProjectQuickJump = v })
-     trueArg
-
-    ,option "" ["hscolour-css"]
-     "Use PATH as the HsColour stylesheet"
-     haddockProjectHscolourCss (\v flags -> flags { haddockProjectHscolourCss = v })
-     (reqArgFlag "PATH")
-
-    ,option "" ["keep-temp-files"]
-     "Keep temporary files"
-     haddockProjectKeepTempFiles (\b flags -> flags { haddockProjectKeepTempFiles = b })
-     trueArg
-
-    ,optionVerbosity haddockProjectVerbosity
-     (\v flags -> flags { haddockProjectVerbosity = v })
-
-    ,option "" ["lib"]
-     "location of Haddocks static / auxiliary files"
-     haddockProjectLib (\v flags -> flags { haddockProjectLib = v})
-     (reqArgFlag "DIR")
-    ]
-
-
-emptyHaddockProjectFlags :: HaddockProjectFlags
-emptyHaddockProjectFlags = mempty
-
-instance Monoid HaddockProjectFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup HaddockProjectFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * Clean flags
--- ------------------------------------------------------------
-
-data CleanFlags = CleanFlags {
-    cleanSaveConf  :: Flag Bool,
-    cleanDistPref  :: Flag FilePath,
-    cleanVerbosity :: Flag Verbosity,
-    cleanCabalFilePath :: Flag FilePath
-  }
-  deriving (Show, Generic, Typeable)
-
-defaultCleanFlags :: CleanFlags
-defaultCleanFlags  = CleanFlags {
-    cleanSaveConf  = Flag False,
-    cleanDistPref  = NoFlag,
-    cleanVerbosity = Flag normal,
-    cleanCabalFilePath = mempty
-  }
-
-cleanCommand :: CommandUI CleanFlags
-cleanCommand = CommandUI
-  { commandName         = "clean"
-  , commandSynopsis     = "Clean up after a build."
-  , commandDescription  = Just $ \_ ->
-      "Removes .hi, .o, preprocessed sources, etc.\n"
-  , commandNotes        = Nothing
-  , commandUsage        = \pname ->
-      "Usage: " ++ pname ++ " clean [FLAGS]\n"
-  , commandDefaultFlags = defaultCleanFlags
-  , commandOptions      = \showOrParseArgs ->
-      [optionVerbosity cleanVerbosity (\v flags -> flags { cleanVerbosity = v })
-      ,optionDistPref
-         cleanDistPref (\d flags -> flags { cleanDistPref = d })
-         showOrParseArgs
-
-      ,option "s" ["save-configure"]
-         "Do not remove the configuration file (dist/setup-config) during cleaning.  Saves need to reconfigure."
-         cleanSaveConf (\v flags -> flags { cleanSaveConf = v })
-         trueArg
-      ]
-  }
-
-emptyCleanFlags :: CleanFlags
-emptyCleanFlags = mempty
-
-instance Monoid CleanFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup CleanFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * Build flags
--- ------------------------------------------------------------
-
-data BuildFlags = BuildFlags {
-    buildProgramPaths :: [(String, FilePath)],
-    buildProgramArgs :: [(String, [String])],
-    buildDistPref    :: Flag FilePath,
-    buildVerbosity   :: Flag Verbosity,
-    buildNumJobs     :: Flag (Maybe Int),
-    -- TODO: this one should not be here, it's just that the silly
-    -- UserHooks stop us from passing extra info in other ways
-    buildArgs :: [String],
-    buildCabalFilePath :: Flag FilePath
-  }
-  deriving (Read, Show, Generic, Typeable)
-
-defaultBuildFlags :: BuildFlags
-defaultBuildFlags  = BuildFlags {
-    buildProgramPaths = mempty,
-    buildProgramArgs = [],
-    buildDistPref    = mempty,
-    buildVerbosity   = Flag normal,
-    buildNumJobs     = mempty,
-    buildArgs        = [],
-    buildCabalFilePath = mempty
-  }
-
-buildCommand :: ProgramDb -> CommandUI BuildFlags
-buildCommand progDb = CommandUI
-  { commandName         = "build"
-  , commandSynopsis     = "Compile all/specific components."
-  , commandDescription  = Just $ \_ -> wrapText $
-         "Components encompass executables, tests, and benchmarks.\n"
-      ++ "\n"
-      ++ "Affected by configuration options, see `configure`.\n"
-  , commandNotes        = Just $ \pname ->
-       "Examples:\n"
-        ++ "  " ++ pname ++ " build           "
-        ++ "    All the components in the package\n"
-        ++ "  " ++ pname ++ " build foo       "
-        ++ "    A component (i.e. lib, exe, test suite)\n\n"
-        ++ programFlagsDescription progDb
---TODO: re-enable once we have support for module/file targets
---        ++ "  " ++ pname ++ " build Foo.Bar   "
---        ++ "    A module\n"
---        ++ "  " ++ pname ++ " build Foo/Bar.hs"
---        ++ "    A file\n\n"
---        ++ "If a target is ambiguous it can be qualified with the component "
---        ++ "name, e.g.\n"
---        ++ "  " ++ pname ++ " build foo:Foo.Bar\n"
---        ++ "  " ++ pname ++ " build testsuite1:Foo/Bar.hs\n"
-  , commandUsage        = usageAlternatives "build" $
-      [ "[FLAGS]"
-      , "COMPONENTS [FLAGS]"
-      ]
-  , commandDefaultFlags = defaultBuildFlags
-  , commandOptions      = \showOrParseArgs ->
-      [ optionVerbosity
-        buildVerbosity (\v flags -> flags { buildVerbosity = v })
-
-      , optionDistPref
-        buildDistPref (\d flags -> flags { buildDistPref = d }) showOrParseArgs
-      ]
-      ++ buildOptions progDb showOrParseArgs
-  }
-
-buildOptions :: ProgramDb -> ShowOrParseArgs
-                -> [OptionField BuildFlags]
-buildOptions progDb showOrParseArgs =
-  [ optionNumJobs
-      buildNumJobs (\v flags -> flags { buildNumJobs = v })
-  ]
-
-  ++ programDbPaths progDb showOrParseArgs
-       buildProgramPaths (\v flags -> flags { buildProgramPaths = v})
-
-  ++ programDbOption progDb showOrParseArgs
-       buildProgramArgs (\v fs -> fs { buildProgramArgs = v })
-
-  ++ programDbOptions progDb showOrParseArgs
-       buildProgramArgs (\v flags -> flags { buildProgramArgs = v})
-
-emptyBuildFlags :: BuildFlags
-emptyBuildFlags = mempty
-
-instance Monoid BuildFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup BuildFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * REPL Flags
--- ------------------------------------------------------------
-
-data ReplOptions = ReplOptions {
-    replOptionsFlags :: [String],
-    replOptionsNoLoad :: Flag Bool
-  }
-  deriving (Show, Generic, Typeable)
-
-instance Binary ReplOptions
-instance Structured ReplOptions
-
-
-instance Monoid ReplOptions where
-  mempty = ReplOptions mempty (Flag False)
-  mappend = (<>)
-
-instance Semigroup ReplOptions where
-  (<>) = gmappend
-
-data ReplFlags = ReplFlags {
-    replProgramPaths :: [(String, FilePath)],
-    replProgramArgs :: [(String, [String])],
-    replDistPref    :: Flag FilePath,
-    replVerbosity   :: Flag Verbosity,
-    replReload      :: Flag Bool,
-    replReplOptions :: ReplOptions
-  }
-  deriving (Show, Generic, Typeable)
-
-defaultReplFlags :: ReplFlags
-defaultReplFlags  = ReplFlags {
-    replProgramPaths = mempty,
-    replProgramArgs = [],
-    replDistPref    = NoFlag,
-    replVerbosity   = Flag normal,
-    replReload      = Flag False,
-    replReplOptions = mempty
-  }
-
-instance Monoid ReplFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup ReplFlags where
-  (<>) = gmappend
-
-replCommand :: ProgramDb -> CommandUI ReplFlags
-replCommand progDb = CommandUI
-  { commandName         = "repl"
-  , commandSynopsis     =
-      "Open an interpreter session for the given component."
-  , commandDescription  = Just $ \pname -> wrapText $
-         "If the current directory contains no package, ignores COMPONENT "
-      ++ "parameters and opens an interactive interpreter session; if a "
-      ++ "sandbox is present, its package database will be used.\n"
-      ++ "\n"
-      ++ "Otherwise, (re)configures with the given or default flags, and "
-      ++ "loads the interpreter with the relevant modules. For executables, "
-      ++ "tests and benchmarks, loads the main module (and its "
-      ++ "dependencies); for libraries all exposed/other modules.\n"
-      ++ "\n"
-      ++ "The default component is the library itself, or the executable "
-      ++ "if that is the only component.\n"
-      ++ "\n"
-      ++ "Support for loading specific modules is planned but not "
-      ++ "implemented yet. For certain scenarios, `" ++ pname
-      ++ " exec -- ghci :l Foo` may be used instead. Note that `exec` will "
-      ++ "not (re)configure and you will have to specify the location of "
-      ++ "other modules, if required.\n"
-
-  , commandNotes        = Just $ \pname ->
-         "Examples:\n"
-      ++ "  " ++ pname ++ " repl           "
-      ++ "    The first component in the package\n"
-      ++ "  " ++ pname ++ " repl foo       "
-      ++ "    A named component (i.e. lib, exe, test suite)\n"
-      ++ "  " ++ pname ++ " repl --repl-options=\"-lstdc++\""
-      ++ "  Specifying flags for interpreter\n"
---TODO: re-enable once we have support for module/file targets
---        ++ "  " ++ pname ++ " repl Foo.Bar   "
---        ++ "    A module\n"
---        ++ "  " ++ pname ++ " repl Foo/Bar.hs"
---        ++ "    A file\n\n"
---        ++ "If a target is ambiguous it can be qualified with the component "
---        ++ "name, e.g.\n"
---        ++ "  " ++ pname ++ " repl foo:Foo.Bar\n"
---        ++ "  " ++ pname ++ " repl testsuite1:Foo/Bar.hs\n"
-  , commandUsage =  \pname -> "Usage: " ++ pname ++ " repl [COMPONENT] [FLAGS]\n"
-  , commandDefaultFlags = defaultReplFlags
-  , commandOptions = \showOrParseArgs ->
-      optionVerbosity replVerbosity (\v flags -> flags { replVerbosity = v })
-      : optionDistPref
-          replDistPref (\d flags -> flags { replDistPref = d })
-          showOrParseArgs
-
-      : programDbPaths   progDb showOrParseArgs
-          replProgramPaths (\v flags -> flags { replProgramPaths = v})
-
-     ++ programDbOption progDb showOrParseArgs
-          replProgramArgs (\v flags -> flags { replProgramArgs = v})
-
-     ++ programDbOptions progDb showOrParseArgs
-          replProgramArgs (\v flags -> flags { replProgramArgs = v})
-
-     ++ case showOrParseArgs of
-          ParseArgs ->
-            [ option "" ["reload"]
-              "Used from within an interpreter to update files."
-              replReload (\v flags -> flags { replReload = v })
-              trueArg
-            ]
-          _ -> []
-     ++ map liftReplOption (replOptions showOrParseArgs)
-  }
-  where
-    liftReplOption = liftOption replReplOptions (\v flags -> flags { replReplOptions = v })
-
-replOptions :: ShowOrParseArgs -> [OptionField ReplOptions]
-replOptions _ =
-  [ option [] ["repl-no-load"]
-    "Disable loading of project modules at REPL startup."
-    replOptionsNoLoad (\p flags -> flags { replOptionsNoLoad = p })
-    trueArg
-  , option [] ["repl-options"]
-    "Use the option(s) for the repl"
-    replOptionsFlags (\p flags -> flags { replOptionsFlags = p })
-    (reqArg "FLAG" (succeedReadE words) id)
-  ]
-
--- ------------------------------------------------------------
--- * Test flags
--- ------------------------------------------------------------
-
-data TestShowDetails = Never | Failures | Always | Streaming | Direct
-    deriving (Eq, Ord, Enum, Bounded, Generic, Show, Typeable)
-
-instance Binary TestShowDetails
-instance Structured TestShowDetails
-
-knownTestShowDetails :: [TestShowDetails]
-knownTestShowDetails = [minBound..maxBound]
-
-instance Pretty TestShowDetails where
-    pretty  = Disp.text . lowercase . show
-
-instance Parsec TestShowDetails where
-    parsec = maybe (fail "invalid TestShowDetails") return . classify =<< ident
-      where
-        ident        = P.munch1 (\c -> isAlpha c || c == '_' || c == '-')
-        classify str = lookup (lowercase str) enumMap
-        enumMap     :: [(String, TestShowDetails)]
-        enumMap      = [ (prettyShow x, x)
-                       | x <- knownTestShowDetails ]
-
---TODO: do we need this instance?
-instance Monoid TestShowDetails where
-    mempty = Never
-    mappend = (<>)
-
-instance Semigroup TestShowDetails where
-    a <> b = if a < b then b else a
-
-data TestFlags = TestFlags {
-    testDistPref    :: Flag FilePath,
-    testVerbosity   :: Flag Verbosity,
-    testHumanLog    :: Flag PathTemplate,
-    testMachineLog  :: Flag PathTemplate,
-    testShowDetails :: Flag TestShowDetails,
-    testKeepTix     :: Flag Bool,
-    testWrapper     :: Flag FilePath,
-    testFailWhenNoTestSuites :: Flag Bool,
-    -- TODO: think about if/how options are passed to test exes
-    testOptions     :: [PathTemplate]
-  } deriving (Show, Generic, Typeable)
-
-defaultTestFlags :: TestFlags
-defaultTestFlags  = TestFlags {
-    testDistPref    = NoFlag,
-    testVerbosity   = Flag normal,
-    testHumanLog    = toFlag $ toPathTemplate $ "$pkgid-$test-suite.log",
-    testMachineLog  = toFlag $ toPathTemplate $ "$pkgid.log",
-    testShowDetails = toFlag Failures,
-    testKeepTix     = toFlag False,
-    testWrapper     = NoFlag,
-    testFailWhenNoTestSuites = toFlag False,
-    testOptions     = []
-  }
-
-testCommand :: CommandUI TestFlags
-testCommand = CommandUI
-  { commandName         = "test"
-  , commandSynopsis     =
-      "Run all/specific tests in the test suite."
-  , commandDescription  = Just $ \ _pname -> wrapText $
-      testOrBenchmarkHelpText "test"
-  , commandNotes        = Nothing
-  , commandUsage        = usageAlternatives "test"
-      [ "[FLAGS]"
-      , "TESTCOMPONENTS [FLAGS]"
-      ]
-  , commandDefaultFlags = defaultTestFlags
-  , commandOptions = testOptions'
-  }
-
--- | Help text for @test@ and @bench@ commands.
-testOrBenchmarkHelpText
-  :: String   -- ^ Either @"test"@ or @"benchmark"@.
-  -> String   -- ^ Help text.
-testOrBenchmarkHelpText s = unlines $ map unwords
-  [ [ "The package must have been build with configuration"
-    , concat [ "flag `--enable-", s, "s`." ]
-    ]
-  , []  -- blank line
-  , [ concat [ "Note that additional dependencies of the ", s, "s" ]
-    , "must have already been installed."
-    ]
-  , []
-  , [ "By defining UserHooks in a custom Setup.hs, the package can define"
-    , concat [ "actions to be executed before and after running ", s, "s." ]
-    ]
-  ]
-
-testOptions' ::  ShowOrParseArgs -> [OptionField TestFlags]
-testOptions' showOrParseArgs =
-  [ optionVerbosity testVerbosity (\v flags -> flags { testVerbosity = v })
-  , optionDistPref
-        testDistPref (\d flags -> flags { testDistPref = d })
-        showOrParseArgs
-  , option [] ["log"]
-        ("Log all test suite results to file (name template can use "
-        ++ "$pkgid, $compiler, $os, $arch, $test-suite, $result)")
-        testHumanLog (\v flags -> flags { testHumanLog = v })
-        (reqArg' "TEMPLATE"
-            (toFlag . toPathTemplate)
-            (flagToList . fmap fromPathTemplate))
-  , option [] ["machine-log"]
-        ("Produce a machine-readable log file (name template can use "
-        ++ "$pkgid, $compiler, $os, $arch, $result)")
-        testMachineLog (\v flags -> flags { testMachineLog = v })
-        (reqArg' "TEMPLATE"
-            (toFlag . toPathTemplate)
-            (flagToList . fmap fromPathTemplate))
-  , option [] ["show-details"]
-        ("'always': always show results of individual test cases. "
-         ++ "'never': never show results of individual test cases. "
-         ++ "'failures': show results of failing test cases. "
-         ++ "'streaming': show results of test cases in real time."
-         ++ "'direct': send results of test cases in real time; no log file.")
-        testShowDetails (\v flags -> flags { testShowDetails = v })
-        (reqArg "FILTER"
-            (parsecToReadE (\_ -> "--show-details flag expects one of "
-                          ++ intercalate ", "
-                               (map prettyShow knownTestShowDetails))
-                        (fmap toFlag parsec))
-            (flagToList . fmap prettyShow))
-  , option [] ["keep-tix-files"]
-        "keep .tix files for HPC between test runs"
-        testKeepTix (\v flags -> flags { testKeepTix = v})
-        trueArg
-  , option [] ["test-wrapper"]
-        "Run test through a wrapper."
-        testWrapper (\v flags -> flags { testWrapper = v })
-        (reqArg' "FILE" (toFlag :: FilePath -> Flag FilePath)
-            (flagToList :: Flag FilePath -> [FilePath]))
-  , option [] ["fail-when-no-test-suites"]
-        ("Exit with failure when no test suites are found.")
-        testFailWhenNoTestSuites (\v flags -> flags { testFailWhenNoTestSuites = v})
-        trueArg
-  , option [] ["test-options"]
-        ("give extra options to test executables "
-         ++ "(name templates can use $pkgid, $compiler, "
-         ++ "$os, $arch, $test-suite)")
-        testOptions (\v flags -> flags { testOptions = v })
-        (reqArg' "TEMPLATES" (map toPathTemplate . splitArgs)
-            (const []))
-  , option [] ["test-option"]
-        ("give extra option to test executables "
-         ++ "(no need to quote options containing spaces, "
-         ++ "name template can use $pkgid, $compiler, "
-         ++ "$os, $arch, $test-suite)")
-        testOptions (\v flags -> flags { testOptions = v })
-        (reqArg' "TEMPLATE" (\x -> [toPathTemplate x])
-            (map fromPathTemplate))
-  ]
-
-emptyTestFlags :: TestFlags
-emptyTestFlags  = mempty
-
-instance Monoid TestFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup TestFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * Benchmark flags
--- ------------------------------------------------------------
-
-data BenchmarkFlags = BenchmarkFlags {
-    benchmarkDistPref  :: Flag FilePath,
-    benchmarkVerbosity :: Flag Verbosity,
-    benchmarkOptions   :: [PathTemplate]
-  } deriving (Show, Generic, Typeable)
-
-defaultBenchmarkFlags :: BenchmarkFlags
-defaultBenchmarkFlags  = BenchmarkFlags {
-    benchmarkDistPref  = NoFlag,
-    benchmarkVerbosity = Flag normal,
-    benchmarkOptions   = []
-  }
-
-benchmarkCommand :: CommandUI BenchmarkFlags
-benchmarkCommand = CommandUI
-  { commandName         = "bench"
-  , commandSynopsis     =
-      "Run all/specific benchmarks."
-  , commandDescription  = Just $ \ _pname -> wrapText $
-      testOrBenchmarkHelpText "benchmark"
-  , commandNotes        = Nothing
-  , commandUsage        = usageAlternatives "bench"
-      [ "[FLAGS]"
-      , "BENCHCOMPONENTS [FLAGS]"
-      ]
-  , commandDefaultFlags = defaultBenchmarkFlags
-  , commandOptions = benchmarkOptions'
-  }
-
-benchmarkOptions' :: ShowOrParseArgs -> [OptionField BenchmarkFlags]
-benchmarkOptions' showOrParseArgs =
-  [ optionVerbosity benchmarkVerbosity
-    (\v flags -> flags { benchmarkVerbosity = v })
-  , optionDistPref
-        benchmarkDistPref (\d flags -> flags { benchmarkDistPref = d })
-        showOrParseArgs
-  , option [] ["benchmark-options"]
-        ("give extra options to benchmark executables "
-         ++ "(name templates can use $pkgid, $compiler, "
-         ++ "$os, $arch, $benchmark)")
-        benchmarkOptions (\v flags -> flags { benchmarkOptions = v })
-        (reqArg' "TEMPLATES" (map toPathTemplate . splitArgs)
-            (const []))
-  , option [] ["benchmark-option"]
-        ("give extra option to benchmark executables "
-         ++ "(no need to quote options containing spaces, "
-         ++ "name template can use $pkgid, $compiler, "
-         ++ "$os, $arch, $benchmark)")
-        benchmarkOptions (\v flags -> flags { benchmarkOptions = v })
-        (reqArg' "TEMPLATE" (\x -> [toPathTemplate x])
-            (map fromPathTemplate))
-  ]
-
-emptyBenchmarkFlags :: BenchmarkFlags
-emptyBenchmarkFlags = mempty
-
-instance Monoid BenchmarkFlags where
-  mempty = gmempty
-  mappend = (<>)
-
-instance Semigroup BenchmarkFlags where
-  (<>) = gmappend
-
--- ------------------------------------------------------------
--- * Shared options utils
--- ------------------------------------------------------------
-
-programFlagsDescription :: ProgramDb -> String
-programFlagsDescription progDb =
-     "The flags --with-PROG and --PROG-option(s) can be used with"
-  ++ " the following programs:"
-  ++ (concatMap (\line -> "\n  " ++ unwords line) . wrapLine 77 . sort)
-     [ programName prog | (prog, _) <- knownPrograms progDb ]
-  ++ "\n"
-
--- | For each known program @PROG@ in 'progDb', produce a @with-PROG@
--- 'OptionField'.
-programDbPaths
-  :: ProgramDb
-  -> ShowOrParseArgs
-  -> (flags -> [(String, FilePath)])
-  -> ([(String, FilePath)] -> (flags -> flags))
-  -> [OptionField flags]
-programDbPaths progDb showOrParseArgs get set =
-  programDbPaths' ("with-" ++) progDb showOrParseArgs get set
-
--- | Like 'programDbPaths', but allows to customise the option name.
-programDbPaths'
-  :: (String -> String)
-  -> ProgramDb
-  -> ShowOrParseArgs
-  -> (flags -> [(String, FilePath)])
-  -> ([(String, FilePath)] -> (flags -> flags))
-  -> [OptionField flags]
-programDbPaths' mkName progDb showOrParseArgs get set =
-  case showOrParseArgs of
-    -- we don't want a verbose help text list so we just show a generic one:
-    ShowArgs  -> [withProgramPath "PROG"]
-    ParseArgs -> map (withProgramPath . programName . fst)
-                 (knownPrograms progDb)
-  where
-    withProgramPath prog =
-      option "" [mkName prog]
-        ("give the path to " ++ prog)
-        get set
-        (reqArg' "PATH" (\path -> [(prog, path)])
-          (\progPaths -> [ path | (prog', path) <- progPaths, prog==prog' ]))
-
--- | For each known program @PROG@ in 'progDb', produce a @PROG-option@
--- 'OptionField'.
-programDbOption
-  :: ProgramDb
-  -> ShowOrParseArgs
-  -> (flags -> [(String, [String])])
-  -> ([(String, [String])] -> (flags -> flags))
-  -> [OptionField flags]
-programDbOption progDb showOrParseArgs get set =
-  case showOrParseArgs of
-    -- we don't want a verbose help text list so we just show a generic one:
-    ShowArgs  -> [programOption "PROG"]
-    ParseArgs -> map (programOption  . programName . fst)
-                 (knownPrograms progDb)
-  where
-    programOption prog =
-      option "" [prog ++ "-option"]
-        ("give an extra option to " ++ prog ++
-         " (no need to quote options containing spaces)")
-        get set
-        (reqArg' "OPT" (\arg -> [(prog, [arg])])
-           (\progArgs -> concat [ args
-                                | (prog', args) <- progArgs, prog==prog' ]))
-
-
--- | For each known program @PROG@ in 'progDb', produce a @PROG-options@
--- 'OptionField'.
-programDbOptions
-  :: ProgramDb
-  -> ShowOrParseArgs
-  -> (flags -> [(String, [String])])
-  -> ([(String, [String])] -> (flags -> flags))
-  -> [OptionField flags]
-programDbOptions progDb showOrParseArgs get set =
-  case showOrParseArgs of
-    -- we don't want a verbose help text list so we just show a generic one:
-    ShowArgs  -> [programOptions  "PROG"]
-    ParseArgs -> map (programOptions . programName . fst)
-                 (knownPrograms progDb)
-  where
-    programOptions prog =
-      option "" [prog ++ "-options"]
-        ("give extra options to " ++ prog)
-        get set
-        (reqArg' "OPTS" (\args -> [(prog, splitArgs args)]) (const []))
-
--- ------------------------------------------------------------
--- * GetOpt Utils
--- ------------------------------------------------------------
-
-boolOpt :: SFlags -> SFlags
-           -> MkOptDescr (a -> Flag Bool) (Flag Bool -> a -> a) a
-boolOpt  = Command.boolOpt  flagToMaybe Flag
-
-boolOpt' :: OptFlags -> OptFlags
-            -> MkOptDescr (a -> Flag Bool) (Flag Bool -> a -> a) a
-boolOpt' = Command.boolOpt' flagToMaybe Flag
-
-trueArg, falseArg :: MkOptDescr (a -> Flag Bool) (Flag Bool -> a -> a) a
-trueArg  sfT lfT = boolOpt' (sfT, lfT) ([], [])   sfT lfT
-falseArg sfF lfF = boolOpt' ([],  [])  (sfF, lfF) sfF lfF
-
-reqArgFlag :: ArgPlaceHolder -> SFlags -> LFlags -> Description ->
-              (b -> Flag String) -> (Flag String -> b -> b) -> OptDescr b
-reqArgFlag ad = reqArg ad (succeedReadE Flag) flagToList
-
-optionDistPref :: (flags -> Flag FilePath)
-               -> (Flag FilePath -> flags -> flags)
-               -> ShowOrParseArgs
-               -> OptionField flags
-optionDistPref get set = \showOrParseArgs ->
-  option "" (distPrefFlagName showOrParseArgs)
-    (   "The directory where Cabal puts generated build files "
-     ++ "(default " ++ defaultDistPref ++ ")")
-    get set
-    (reqArgFlag "DIR")
-  where
-    distPrefFlagName ShowArgs  = ["builddir"]
-    distPrefFlagName ParseArgs = ["builddir", "distdir", "distpref"]
-
-optionVerbosity :: (flags -> Flag Verbosity)
-                -> (Flag Verbosity -> flags -> flags)
-                -> OptionField flags
-optionVerbosity get set =
-  option "v" ["verbose"]
-    "Control verbosity (n is 0--3, default verbosity level is 1)"
-    get set
-    (optArg "n" (fmap Flag flagToVerbosity)
-                (Flag verbose) -- default Value if no n is given
-                (fmap (Just . showForCabal) . flagToList))
-
-optionNumJobs :: (flags -> Flag (Maybe Int))
-              -> (Flag (Maybe Int) -> flags -> flags)
-              -> OptionField flags
-optionNumJobs get set =
-  option "j" ["jobs"]
-    "Run NUM jobs simultaneously (or '$ncpus' if no NUM is given)."
-    get set
-    (optArg "NUM" (fmap Flag numJobsParser)
-                  (Flag Nothing)
-                  (map (Just . maybe "$ncpus" show) . flagToList))
-  where
-    numJobsParser :: ReadE (Maybe Int)
-    numJobsParser = ReadE $ \s ->
-      case s of
-        "$ncpus" -> Right Nothing
-        _        -> case reads s of
-          [(n, "")]
-            | n < 1     -> Left "The number of jobs should be 1 or more."
-            | otherwise -> Right (Just n)
-          _             -> Left "The jobs value should be a number or '$ncpus'"
-
--- ------------------------------------------------------------
--- * Other Utils
--- ------------------------------------------------------------
-
--- | Arguments to pass to a @configure@ script, e.g. generated by
--- @autoconf@.
-configureArgs :: Bool -> ConfigFlags -> [String]
-configureArgs bcHack flags
-  = hc_flag
- ++ optFlag  "with-hc-pkg" configHcPkg
- ++ optFlag' "prefix"      prefix
- ++ optFlag' "bindir"      bindir
- ++ optFlag' "libdir"      libdir
- ++ optFlag' "libexecdir"  libexecdir
- ++ optFlag' "datadir"     datadir
- ++ optFlag' "sysconfdir"  sysconfdir
- ++ configConfigureArgs flags
-  where
-        hc_flag = case (configHcFlavor flags, configHcPath flags) of
-                        (_, Flag hc_path) -> [hc_flag_name ++ hc_path]
-                        (Flag hc, NoFlag) -> [hc_flag_name ++ prettyShow hc]
-                        (NoFlag,NoFlag)   -> []
-        hc_flag_name
-            --TODO kill off thic bc hack when defaultUserHooks is removed.
-            | bcHack    = "--with-hc="
-            | otherwise = "--with-compiler="
-        optFlag name config_field = case config_field flags of
-                        Flag p -> ["--" ++ name ++ "=" ++ p]
-                        NoFlag -> []
-        optFlag' name config_field = optFlag name (fmap fromPathTemplate
-                                                 . config_field
-                                                 . configInstallDirs)
-
-configureCCompiler :: Verbosity -> ProgramDb
-                      -> IO (FilePath, [String])
-configureCCompiler verbosity progdb = configureProg verbosity progdb gccProgram
-
-configureLinker :: Verbosity -> ProgramDb -> IO (FilePath, [String])
-configureLinker verbosity progdb = configureProg verbosity progdb ldProgram
-
-configureProg :: Verbosity -> ProgramDb -> Program
-                 -> IO (FilePath, [String])
-configureProg verbosity programDb prog = do
-    (p, _) <- requireProgram verbosity prog programDb
-    let pInv = programInvocation p []
-    return (progInvokePath pInv, progInvokeArgs pInv)
-
--- | Helper function to split a string into a list of arguments.
--- It's supposed to handle quoted things sensibly, eg:
---
--- > splitArgs "--foo=\"C:/Program Files/Bar/" --baz"
--- >   = ["--foo=C:/Program Files/Bar", "--baz"]
---
--- > splitArgs "\"-DMSGSTR=\\\"foo bar\\\"\" --baz"
--- >   = ["-DMSGSTR=\"foo bar\"","--baz"]
---
-splitArgs :: String -> [String]
-splitArgs  = space []
-  where
-    space :: String -> String -> [String]
-    space w []      = word w []
-    space w ( c :s)
-        | isSpace c = word w (space [] s)
-    space w ('"':s) = string w s
-    space w s       = nonstring w s
-
-    string :: String -> String -> [String]
-    string w []      = word w []
-    string w ('"':s) = space w s
-    string w ('\\':'"':s) = string ('"':w) s
-    string w ( c :s) = string (c:w) s
-
-    nonstring :: String -> String -> [String]
-    nonstring w  []      = word w []
-    nonstring w  ('"':s) = string w s
-    nonstring w  ( c :s) = space (c:w) s
-
-    word [] s = s
-    word w  s = reverse w : s
+import Distribution.Simple.Setup.Benchmark
+import Distribution.Simple.Setup.Build
+import Distribution.Simple.Setup.Clean
+import Distribution.Simple.Setup.Common
+import Distribution.Simple.Setup.Config
+import Distribution.Simple.Setup.Copy
+import Distribution.Simple.Setup.Global
+import Distribution.Simple.Setup.Haddock
+import Distribution.Simple.Setup.Hscolour
+import Distribution.Simple.Setup.Install
+import Distribution.Simple.Setup.Register
+import Distribution.Simple.Setup.Repl
+import Distribution.Simple.Setup.SDist
+import Distribution.Simple.Setup.Test
 
 -- The test cases kinda have to be rewritten from the ground up... :/
 --hunitTests :: [Test]
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Benchmark.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Benchmark.hs
new file mode 100644
index 000000000..0b854f551
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Benchmark.hs
@@ -0,0 +1,103 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Benchmark
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the benchmarking command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Benchmark (
+  BenchmarkFlags(..), emptyBenchmarkFlags,
+  defaultBenchmarkFlags, benchmarkCommand,
+  benchmarkOptions'
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Simple.Utils
+import Distribution.Simple.InstallDirs
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Benchmark flags
+-- ------------------------------------------------------------
+
+data BenchmarkFlags = BenchmarkFlags {
+    benchmarkDistPref  :: Flag FilePath,
+    benchmarkVerbosity :: Flag Verbosity,
+    benchmarkOptions   :: [PathTemplate]
+  } deriving (Show, Generic, Typeable)
+
+defaultBenchmarkFlags :: BenchmarkFlags
+defaultBenchmarkFlags  = BenchmarkFlags {
+    benchmarkDistPref  = NoFlag,
+    benchmarkVerbosity = Flag normal,
+    benchmarkOptions   = []
+  }
+
+benchmarkCommand :: CommandUI BenchmarkFlags
+benchmarkCommand = CommandUI
+  { commandName         = "bench"
+  , commandSynopsis     =
+      "Run all/specific benchmarks."
+  , commandDescription  = Just $ \ _pname -> wrapText $
+      testOrBenchmarkHelpText "benchmark"
+  , commandNotes        = Nothing
+  , commandUsage        = usageAlternatives "bench"
+      [ "[FLAGS]"
+      , "BENCHCOMPONENTS [FLAGS]"
+      ]
+  , commandDefaultFlags = defaultBenchmarkFlags
+  , commandOptions = benchmarkOptions'
+  }
+
+benchmarkOptions' :: ShowOrParseArgs -> [OptionField BenchmarkFlags]
+benchmarkOptions' showOrParseArgs =
+  [ optionVerbosity benchmarkVerbosity
+    (\v flags -> flags { benchmarkVerbosity = v })
+  , optionDistPref
+        benchmarkDistPref (\d flags -> flags { benchmarkDistPref = d })
+        showOrParseArgs
+  , option [] ["benchmark-options"]
+        ("give extra options to benchmark executables "
+         ++ "(name templates can use $pkgid, $compiler, "
+         ++ "$os, $arch, $benchmark)")
+        benchmarkOptions (\v flags -> flags { benchmarkOptions = v })
+        (reqArg' "TEMPLATES" (map toPathTemplate . splitArgs)
+            (const []))
+  , option [] ["benchmark-option"]
+        ("give extra option to benchmark executables "
+         ++ "(no need to quote options containing spaces, "
+         ++ "name template can use $pkgid, $compiler, "
+         ++ "$os, $arch, $benchmark)")
+        benchmarkOptions (\v flags -> flags { benchmarkOptions = v })
+        (reqArg' "TEMPLATE" (\x -> [toPathTemplate x])
+            (map fromPathTemplate))
+  ]
+
+emptyBenchmarkFlags :: BenchmarkFlags
+emptyBenchmarkFlags = mempty
+
+instance Monoid BenchmarkFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup BenchmarkFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Build.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Build.hs
new file mode 100644
index 000000000..7adf67f3e
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Build.hs
@@ -0,0 +1,130 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Build
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the build command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Build (
+  BuildFlags(..),    emptyBuildFlags,    defaultBuildFlags,    buildCommand,
+  DumpBuildInfo(..),
+  buildOptions,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Simple.Utils
+import Distribution.Simple.Program
+import Distribution.Verbosity
+import Distribution.Types.DumpBuildInfo
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Build flags
+-- ------------------------------------------------------------
+
+data BuildFlags = BuildFlags {
+    buildProgramPaths :: [(String, FilePath)],
+    buildProgramArgs :: [(String, [String])],
+    buildDistPref    :: Flag FilePath,
+    buildVerbosity   :: Flag Verbosity,
+    buildNumJobs     :: Flag (Maybe Int),
+    -- TODO: this one should not be here, it's just that the silly
+    -- UserHooks stop us from passing extra info in other ways
+    buildArgs :: [String],
+    buildCabalFilePath :: Flag FilePath
+  }
+  deriving (Read, Show, Generic, Typeable)
+
+defaultBuildFlags :: BuildFlags
+defaultBuildFlags  = BuildFlags {
+    buildProgramPaths = mempty,
+    buildProgramArgs = [],
+    buildDistPref    = mempty,
+    buildVerbosity   = Flag normal,
+    buildNumJobs     = mempty,
+    buildArgs        = [],
+    buildCabalFilePath = mempty
+  }
+
+buildCommand :: ProgramDb -> CommandUI BuildFlags
+buildCommand progDb = CommandUI
+  { commandName         = "build"
+  , commandSynopsis     = "Compile all/specific components."
+  , commandDescription  = Just $ \_ -> wrapText $
+         "Components encompass executables, tests, and benchmarks.\n"
+      ++ "\n"
+      ++ "Affected by configuration options, see `configure`.\n"
+  , commandNotes        = Just $ \pname ->
+       "Examples:\n"
+        ++ "  " ++ pname ++ " build           "
+        ++ "    All the components in the package\n"
+        ++ "  " ++ pname ++ " build foo       "
+        ++ "    A component (i.e. lib, exe, test suite)\n\n"
+        ++ programFlagsDescription progDb
+--TODO: re-enable once we have support for module/file targets
+--        ++ "  " ++ pname ++ " build Foo.Bar   "
+--        ++ "    A module\n"
+--        ++ "  " ++ pname ++ " build Foo/Bar.hs"
+--        ++ "    A file\n\n"
+--        ++ "If a target is ambiguous it can be qualified with the component "
+--        ++ "name, e.g.\n"
+--        ++ "  " ++ pname ++ " build foo:Foo.Bar\n"
+--        ++ "  " ++ pname ++ " build testsuite1:Foo/Bar.hs\n"
+  , commandUsage        = usageAlternatives "build" $
+      [ "[FLAGS]"
+      , "COMPONENTS [FLAGS]"
+      ]
+  , commandDefaultFlags = defaultBuildFlags
+  , commandOptions      = \showOrParseArgs ->
+      [ optionVerbosity
+        buildVerbosity (\v flags -> flags { buildVerbosity = v })
+
+      , optionDistPref
+        buildDistPref (\d flags -> flags { buildDistPref = d }) showOrParseArgs
+      ]
+      ++ buildOptions progDb showOrParseArgs
+  }
+
+buildOptions :: ProgramDb -> ShowOrParseArgs
+                -> [OptionField BuildFlags]
+buildOptions progDb showOrParseArgs =
+  [ optionNumJobs
+      buildNumJobs (\v flags -> flags { buildNumJobs = v })
+  ]
+
+  ++ programDbPaths progDb showOrParseArgs
+       buildProgramPaths (\v flags -> flags { buildProgramPaths = v})
+
+  ++ programDbOption progDb showOrParseArgs
+       buildProgramArgs (\v fs -> fs { buildProgramArgs = v })
+
+  ++ programDbOptions progDb showOrParseArgs
+       buildProgramArgs (\v flags -> flags { buildProgramArgs = v})
+
+emptyBuildFlags :: BuildFlags
+emptyBuildFlags = mempty
+
+instance Monoid BuildFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup BuildFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Clean.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Clean.hs
new file mode 100644
index 000000000..e2b723c22
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Clean.hs
@@ -0,0 +1,86 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Clean
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the clean command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Clean (
+
+  CleanFlags(..),    emptyCleanFlags,    defaultCleanFlags,    cleanCommand,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Clean flags
+-- ------------------------------------------------------------
+
+data CleanFlags = CleanFlags {
+    cleanSaveConf  :: Flag Bool,
+    cleanDistPref  :: Flag FilePath,
+    cleanVerbosity :: Flag Verbosity,
+    cleanCabalFilePath :: Flag FilePath
+  }
+  deriving (Show, Generic, Typeable)
+
+defaultCleanFlags :: CleanFlags
+defaultCleanFlags  = CleanFlags {
+    cleanSaveConf  = Flag False,
+    cleanDistPref  = NoFlag,
+    cleanVerbosity = Flag normal,
+    cleanCabalFilePath = mempty
+  }
+
+cleanCommand :: CommandUI CleanFlags
+cleanCommand = CommandUI
+  { commandName         = "clean"
+  , commandSynopsis     = "Clean up after a build."
+  , commandDescription  = Just $ \_ ->
+      "Removes .hi, .o, preprocessed sources, etc.\n"
+  , commandNotes        = Nothing
+  , commandUsage        = \pname ->
+      "Usage: " ++ pname ++ " clean [FLAGS]\n"
+  , commandDefaultFlags = defaultCleanFlags
+  , commandOptions      = \showOrParseArgs ->
+      [optionVerbosity cleanVerbosity (\v flags -> flags { cleanVerbosity = v })
+      ,optionDistPref
+         cleanDistPref (\d flags -> flags { cleanDistPref = d })
+         showOrParseArgs
+
+      ,option "s" ["save-configure"]
+         "Do not remove the configuration file (dist/setup-config) during cleaning.  Saves need to reconfigure."
+         cleanSaveConf (\v flags -> flags { cleanSaveConf = v })
+         trueArg
+      ]
+  }
+
+emptyCleanFlags :: CleanFlags
+emptyCleanFlags = mempty
+
+instance Monoid CleanFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup CleanFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Common.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Common.hs
new file mode 100644
index 000000000..ff9187b45
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Common.hs
@@ -0,0 +1,284 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Common
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Common utilities for defining command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Common (
+  CopyDest(..),
+  configureCCompiler, configureLinker,
+  programDbOption, programDbOptions,
+  programDbPaths, programDbPaths',
+  programFlagsDescription,
+  splitArgs, testOrBenchmarkHelpText,
+
+  defaultDistPref, optionDistPref,
+
+  Flag(..),
+  toFlag,
+  fromFlag,
+  fromFlagOrDefault,
+  flagToMaybe,
+  flagToList,
+  maybeToFlag,
+  BooleanFlag(..),
+  boolOpt, boolOpt', trueArg, falseArg,
+  reqArgFlag,
+  optionVerbosity, optionNumJobs
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.ReadE
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import qualified Distribution.Simple.Command as Command
+import Distribution.Simple.Flag
+import Distribution.Simple.Utils
+import Distribution.Simple.Program
+import Distribution.Simple.InstallDirs
+import Distribution.Verbosity
+
+
+-- FIXME Not sure where this should live
+defaultDistPref :: FilePath
+defaultDistPref = "dist"
+
+-- | Help text for @test@ and @bench@ commands.
+testOrBenchmarkHelpText
+  :: String   -- ^ Either @"test"@ or @"benchmark"@.
+  -> String   -- ^ Help text.
+testOrBenchmarkHelpText s = unlines $ map unwords
+  [ [ "The package must have been build with configuration"
+    , concat [ "flag `--enable-", s, "s`." ]
+    ]
+  , []  -- blank line
+  , [ concat [ "Note that additional dependencies of the ", s, "s" ]
+    , "must have already been installed."
+    ]
+  , []
+  , [ "By defining UserHooks in a custom Setup.hs, the package can define"
+    , concat [ "actions to be executed before and after running ", s, "s." ]
+    ]
+  ]
+
+-- ------------------------------------------------------------
+-- * Shared options utils
+-- ------------------------------------------------------------
+
+programFlagsDescription :: ProgramDb -> String
+programFlagsDescription progDb =
+     "The flags --with-PROG and --PROG-option(s) can be used with"
+  ++ " the following programs:"
+  ++ (concatMap (\line -> "\n  " ++ unwords line) . wrapLine 77 . sort)
+     [ programName prog | (prog, _) <- knownPrograms progDb ]
+  ++ "\n"
+
+-- | For each known program @PROG@ in 'progDb', produce a @with-PROG@
+-- 'OptionField'.
+programDbPaths
+  :: ProgramDb
+  -> ShowOrParseArgs
+  -> (flags -> [(String, FilePath)])
+  -> ([(String, FilePath)] -> (flags -> flags))
+  -> [OptionField flags]
+programDbPaths progDb showOrParseArgs get set =
+  programDbPaths' ("with-" ++) progDb showOrParseArgs get set
+
+-- | Like 'programDbPaths', but allows to customise the option name.
+programDbPaths'
+  :: (String -> String)
+  -> ProgramDb
+  -> ShowOrParseArgs
+  -> (flags -> [(String, FilePath)])
+  -> ([(String, FilePath)] -> (flags -> flags))
+  -> [OptionField flags]
+programDbPaths' mkName progDb showOrParseArgs get set =
+  case showOrParseArgs of
+    -- we don't want a verbose help text list so we just show a generic one:
+    ShowArgs  -> [withProgramPath "PROG"]
+    ParseArgs -> map (withProgramPath . programName . fst)
+                 (knownPrograms progDb)
+  where
+    withProgramPath prog =
+      option "" [mkName prog]
+        ("give the path to " ++ prog)
+        get set
+        (reqArg' "PATH" (\path -> [(prog, path)])
+          (\progPaths -> [ path | (prog', path) <- progPaths, prog==prog' ]))
+
+-- | For each known program @PROG@ in 'progDb', produce a @PROG-option@
+-- 'OptionField'.
+programDbOption
+  :: ProgramDb
+  -> ShowOrParseArgs
+  -> (flags -> [(String, [String])])
+  -> ([(String, [String])] -> (flags -> flags))
+  -> [OptionField flags]
+programDbOption progDb showOrParseArgs get set =
+  case showOrParseArgs of
+    -- we don't want a verbose help text list so we just show a generic one:
+    ShowArgs  -> [programOption "PROG"]
+    ParseArgs -> map (programOption  . programName . fst)
+                 (knownPrograms progDb)
+  where
+    programOption prog =
+      option "" [prog ++ "-option"]
+        ("give an extra option to " ++ prog ++
+         " (no need to quote options containing spaces)")
+        get set
+        (reqArg' "OPT" (\arg -> [(prog, [arg])])
+           (\progArgs -> concat [ args
+                                | (prog', args) <- progArgs, prog==prog' ]))
+
+
+-- | For each known program @PROG@ in 'progDb', produce a @PROG-options@
+-- 'OptionField'.
+programDbOptions
+  :: ProgramDb
+  -> ShowOrParseArgs
+  -> (flags -> [(String, [String])])
+  -> ([(String, [String])] -> (flags -> flags))
+  -> [OptionField flags]
+programDbOptions progDb showOrParseArgs get set =
+  case showOrParseArgs of
+    -- we don't want a verbose help text list so we just show a generic one:
+    ShowArgs  -> [programOptions  "PROG"]
+    ParseArgs -> map (programOptions . programName . fst)
+                 (knownPrograms progDb)
+  where
+    programOptions prog =
+      option "" [prog ++ "-options"]
+        ("give extra options to " ++ prog)
+        get set
+        (reqArg' "OPTS" (\args -> [(prog, splitArgs args)]) (const []))
+
+-- ------------------------------------------------------------
+-- * GetOpt Utils
+-- ------------------------------------------------------------
+
+boolOpt :: SFlags -> SFlags
+           -> MkOptDescr (a -> Flag Bool) (Flag Bool -> a -> a) a
+boolOpt  = Command.boolOpt  flagToMaybe Flag
+
+boolOpt' :: OptFlags -> OptFlags
+            -> MkOptDescr (a -> Flag Bool) (Flag Bool -> a -> a) a
+boolOpt' = Command.boolOpt' flagToMaybe Flag
+
+trueArg, falseArg :: MkOptDescr (a -> Flag Bool) (Flag Bool -> a -> a) a
+trueArg  sfT lfT = boolOpt' (sfT, lfT) ([], [])   sfT lfT
+falseArg sfF lfF = boolOpt' ([],  [])  (sfF, lfF) sfF lfF
+
+reqArgFlag :: ArgPlaceHolder -> SFlags -> LFlags -> Description ->
+              (b -> Flag String) -> (Flag String -> b -> b) -> OptDescr b
+reqArgFlag ad = reqArg ad (succeedReadE Flag) flagToList
+
+optionDistPref :: (flags -> Flag FilePath)
+               -> (Flag FilePath -> flags -> flags)
+               -> ShowOrParseArgs
+               -> OptionField flags
+optionDistPref get set = \showOrParseArgs ->
+  option "" (distPrefFlagName showOrParseArgs)
+    (   "The directory where Cabal puts generated build files "
+     ++ "(default " ++ defaultDistPref ++ ")")
+    get set
+    (reqArgFlag "DIR")
+  where
+    distPrefFlagName ShowArgs  = ["builddir"]
+    distPrefFlagName ParseArgs = ["builddir", "distdir", "distpref"]
+
+optionVerbosity :: (flags -> Flag Verbosity)
+                -> (Flag Verbosity -> flags -> flags)
+                -> OptionField flags
+optionVerbosity get set =
+  option "v" ["verbose"]
+    "Control verbosity (n is 0--3, default verbosity level is 1)"
+    get set
+    (optArg "n" (fmap Flag flagToVerbosity)
+                (Flag verbose) -- default Value if no n is given
+                (fmap (Just . showForCabal) . flagToList))
+
+optionNumJobs :: (flags -> Flag (Maybe Int))
+              -> (Flag (Maybe Int) -> flags -> flags)
+              -> OptionField flags
+optionNumJobs get set =
+  option "j" ["jobs"]
+    "Run NUM jobs simultaneously (or '$ncpus' if no NUM is given)."
+    get set
+    (optArg "NUM" (fmap Flag numJobsParser)
+                  (Flag Nothing)
+                  (map (Just . maybe "$ncpus" show) . flagToList))
+  where
+    numJobsParser :: ReadE (Maybe Int)
+    numJobsParser = ReadE $ \s ->
+      case s of
+        "$ncpus" -> Right Nothing
+        _        -> case reads s of
+          [(n, "")]
+            | n < 1     -> Left "The number of jobs should be 1 or more."
+            | otherwise -> Right (Just n)
+          _             -> Left "The jobs value should be a number or '$ncpus'"
+
+-- ------------------------------------------------------------
+-- * Other Utils
+-- ------------------------------------------------------------
+
+configureCCompiler :: Verbosity -> ProgramDb
+                      -> IO (FilePath, [String])
+configureCCompiler verbosity progdb = configureProg verbosity progdb gccProgram
+
+configureLinker :: Verbosity -> ProgramDb -> IO (FilePath, [String])
+configureLinker verbosity progdb = configureProg verbosity progdb ldProgram
+
+configureProg :: Verbosity -> ProgramDb -> Program
+                 -> IO (FilePath, [String])
+configureProg verbosity programDb prog = do
+    (p, _) <- requireProgram verbosity prog programDb
+    let pInv = programInvocation p []
+    return (progInvokePath pInv, progInvokeArgs pInv)
+
+-- | Helper function to split a string into a list of arguments.
+-- It's supposed to handle quoted things sensibly, eg:
+--
+-- > splitArgs "--foo=\"C:/Program Files/Bar/" --baz"
+-- >   = ["--foo=C:/Program Files/Bar", "--baz"]
+--
+-- > splitArgs "\"-DMSGSTR=\\\"foo bar\\\"\" --baz"
+-- >   = ["-DMSGSTR=\"foo bar\"","--baz"]
+--
+splitArgs :: String -> [String]
+splitArgs  = space []
+  where
+    space :: String -> String -> [String]
+    space w []      = word w []
+    space w ( c :s)
+        | isSpace c = word w (space [] s)
+    space w ('"':s) = string w s
+    space w s       = nonstring w s
+
+    string :: String -> String -> [String]
+    string w []      = word w []
+    string w ('"':s) = space w s
+    string w ('\\':'"':s) = string ('"':w) s
+    string w ( c :s) = string (c:w) s
+
+    nonstring :: String -> String -> [String]
+    nonstring w  []      = word w []
+    nonstring w  ('"':s) = string w s
+    nonstring w  ( c :s) = space (c:w) s
+
+    word [] s = s
+    word w  s = reverse w : s
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Config.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Config.hs
new file mode 100644
index 000000000..1e5db8cdb
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Config.hs
@@ -0,0 +1,794 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Config
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the configure command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Config (
+  ConfigFlags(..),   emptyConfigFlags,   defaultConfigFlags,   configureCommand,
+  configPrograms,
+  configAbsolutePaths, readPackageDb, readPackageDbList, showPackageDb, showPackageDbList,
+  configureArgs, configureOptions, installDirsOptions
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Compiler
+import Distribution.ReadE
+import Distribution.Parsec
+import Distribution.Pretty
+import qualified Distribution.Compat.CharParsing as P
+import qualified Text.PrettyPrint as Disp
+import Distribution.ModuleName
+import Distribution.PackageDescription
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Compiler
+import Distribution.Simple.Flag
+import Distribution.Simple.Utils
+import Distribution.Simple.Program
+import Distribution.Simple.InstallDirs
+import Distribution.Verbosity
+import Distribution.Utils.NubList
+import Distribution.Types.ComponentId
+import Distribution.Types.DumpBuildInfo
+import Distribution.Types.GivenComponent
+import Distribution.Types.Module
+import Distribution.Types.PackageVersionConstraint
+
+import Distribution.Compat.Stack
+import Distribution.Compat.Semigroup (Last' (..), Option' (..))
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Config flags
+-- ------------------------------------------------------------
+
+-- | Flags to @configure@ command.
+--
+-- IMPORTANT: every time a new flag is added, 'D.C.Setup.filterConfigureFlags'
+-- should be updated.
+-- IMPORTANT: every time a new flag is added, it should be added to the Eq instance
+data ConfigFlags = ConfigFlags {
+    -- This is the same hack as in 'buildArgs' and 'copyArgs'.
+    -- TODO: Stop using this eventually when 'UserHooks' gets changed
+    configArgs :: [String],
+
+    --FIXME: the configPrograms is only here to pass info through to configure
+    -- because the type of configure is constrained by the UserHooks.
+    -- when we change UserHooks next we should pass the initial
+    -- ProgramDb directly and not via ConfigFlags
+    configPrograms_     :: Option' (Last' ProgramDb), -- ^All programs that
+                                                      -- @cabal@ may run
+    configProgramPaths  :: [(String, FilePath)], -- ^user specified programs paths
+    configProgramArgs   :: [(String, [String])], -- ^user specified programs args
+    configProgramPathExtra :: NubList FilePath,  -- ^Extend the $PATH
+    configHcFlavor      :: Flag CompilerFlavor, -- ^The \"flavor\" of the
+                                                -- compiler, e.g. GHC.
+    configHcPath        :: Flag FilePath, -- ^given compiler location
+    configHcPkg         :: Flag FilePath, -- ^given hc-pkg location
+    configVanillaLib    :: Flag Bool,     -- ^Enable vanilla library
+    configProfLib       :: Flag Bool,     -- ^Enable profiling in the library
+    configSharedLib     :: Flag Bool,     -- ^Build shared library
+    configStaticLib     :: Flag Bool,     -- ^Build static library
+    configDynExe        :: Flag Bool,     -- ^Enable dynamic linking of the
+                                          -- executables.
+    configFullyStaticExe :: Flag Bool,     -- ^Enable fully static linking of the
+                                          -- executables.
+    configProfExe       :: Flag Bool,     -- ^Enable profiling in the
+                                          -- executables.
+    configProf          :: Flag Bool,     -- ^Enable profiling in the library
+                                          -- and executables.
+    configProfDetail    :: Flag ProfDetailLevel, -- ^Profiling detail level
+                                          --  in the library and executables.
+    configProfLibDetail :: Flag ProfDetailLevel, -- ^Profiling  detail level
+                                                 -- in the library
+    configConfigureArgs :: [String],      -- ^Extra arguments to @configure@
+    configOptimization  :: Flag OptimisationLevel,  -- ^Enable optimization.
+    configProgPrefix    :: Flag PathTemplate, -- ^Installed executable prefix.
+    configProgSuffix    :: Flag PathTemplate, -- ^Installed executable suffix.
+    configInstallDirs   :: InstallDirs (Flag PathTemplate), -- ^Installation
+                                                            -- paths
+    configScratchDir    :: Flag FilePath,
+    configExtraLibDirs  :: [FilePath],   -- ^ path to search for extra libraries
+    configExtraLibDirsStatic :: [FilePath],   -- ^ path to search for extra
+                                              --   libraries when linking
+                                              --   fully static executables
+    configExtraFrameworkDirs :: [FilePath],   -- ^ path to search for extra
+                                              -- frameworks (OS X only)
+    configExtraIncludeDirs :: [FilePath],   -- ^ path to search for header files
+    configIPID          :: Flag String, -- ^ explicit IPID to be used
+    configCID           :: Flag ComponentId, -- ^ explicit CID to be used
+    configDeterministic :: Flag Bool, -- ^ be as deterministic as possible
+                                      -- (e.g., invariant over GHC, database,
+                                      -- etc).  Used by the test suite
+
+    configDistPref :: Flag FilePath, -- ^"dist" prefix
+    configCabalFilePath :: Flag FilePath, -- ^ Cabal file to use
+    configVerbosity :: Flag Verbosity, -- ^verbosity level
+    configUserInstall :: Flag Bool,    -- ^The --user\/--global flag
+    configPackageDBs :: [Maybe PackageDB], -- ^Which package DBs to use
+    configGHCiLib   :: Flag Bool,      -- ^Enable compiling library for GHCi
+    configSplitSections :: Flag Bool,      -- ^Enable -split-sections with GHC
+    configSplitObjs :: Flag Bool,      -- ^Enable -split-objs with GHC
+    configStripExes :: Flag Bool,      -- ^Enable executable stripping
+    configStripLibs :: Flag Bool,      -- ^Enable library stripping
+    configConstraints :: [PackageVersionConstraint], -- ^Additional constraints for
+                                                     -- dependencies.
+    configDependencies :: [GivenComponent],
+      -- ^The packages depended on which already exist
+    configPromisedDependencies :: [GivenComponent],
+      -- ^The packages depended on which doesn't yet exist (i.e. promised).
+      -- Promising dependencies enables us to configure components in parallel,
+      -- and avoids expensive builds if they are not necessary.
+      -- For example, in multi-repl mode, we don't want to build dependencies that
+      -- are loaded into the interactive session, since we have to build them again.
+
+    configInstantiateWith :: [(ModuleName, Module)],
+      -- ^ The requested Backpack instantiation.  If empty, either this
+      -- package does not use Backpack, or we just want to typecheck
+      -- the indefinite package.
+    configConfigurationsFlags :: FlagAssignment,
+    configTests               :: Flag Bool, -- ^Enable test suite compilation
+    configBenchmarks          :: Flag Bool, -- ^Enable benchmark compilation
+    configCoverage :: Flag Bool, -- ^Enable program coverage
+    configLibCoverage :: Flag Bool, -- ^Enable program coverage (deprecated)
+    configExactConfiguration  :: Flag Bool,
+      -- ^All direct dependencies and flags are provided on the command line by
+      -- the user via the '--dependency' and '--flags' options.
+    configFlagError :: Flag String,
+      -- ^Halt and show an error message indicating an error in flag assignment
+    configRelocatable :: Flag Bool, -- ^ Enable relocatable package built
+    configDebugInfo :: Flag DebugInfoLevel,  -- ^ Emit debug info.
+    configDumpBuildInfo :: Flag DumpBuildInfo,
+      -- ^ Should we dump available build information on build?
+      -- Dump build information to disk before attempting to build,
+      -- tooling can parse these files and use them to compile the
+      -- source files themselves.
+    configUseResponseFiles :: Flag Bool,
+      -- ^ Whether to use response files at all. They're used for such tools
+      -- as haddock, or ld.
+    configAllowDependingOnPrivateLibs :: Flag Bool
+      -- ^ Allow depending on private sublibraries. This is used by external
+      -- tools (like cabal-install) so they can add multiple-public-libraries
+      -- compatibility to older ghcs by checking visibility externally.
+  }
+  deriving (Generic, Read, Show, Typeable)
+
+instance Binary ConfigFlags
+instance Structured ConfigFlags
+
+-- | More convenient version of 'configPrograms'. Results in an
+-- 'error' if internal invariant is violated.
+configPrograms :: WithCallStack (ConfigFlags -> ProgramDb)
+configPrograms = fromMaybe (error "FIXME: remove configPrograms") . fmap getLast'
+               . getOption' . configPrograms_
+
+instance Eq ConfigFlags where
+  (==) a b =
+    -- configPrograms skipped: not user specified, has no Eq instance
+    equal configProgramPaths
+    && equal configProgramArgs
+    && equal configProgramPathExtra
+    && equal configHcFlavor
+    && equal configHcPath
+    && equal configHcPkg
+    && equal configVanillaLib
+    && equal configProfLib
+    && equal configSharedLib
+    && equal configStaticLib
+    && equal configDynExe
+    && equal configFullyStaticExe
+    && equal configProfExe
+    && equal configProf
+    && equal configProfDetail
+    && equal configProfLibDetail
+    && equal configConfigureArgs
+    && equal configOptimization
+    && equal configProgPrefix
+    && equal configProgSuffix
+    && equal configInstallDirs
+    && equal configScratchDir
+    && equal configExtraLibDirs
+    && equal configExtraLibDirsStatic
+    && equal configExtraIncludeDirs
+    && equal configIPID
+    && equal configDeterministic
+    && equal configDistPref
+    && equal configVerbosity
+    && equal configUserInstall
+    && equal configPackageDBs
+    && equal configGHCiLib
+    && equal configSplitSections
+    && equal configSplitObjs
+    && equal configStripExes
+    && equal configStripLibs
+    && equal configConstraints
+    && equal configDependencies
+    && equal configPromisedDependencies
+    && equal configConfigurationsFlags
+    && equal configTests
+    && equal configBenchmarks
+    && equal configCoverage
+    && equal configLibCoverage
+    && equal configExactConfiguration
+    && equal configFlagError
+    && equal configRelocatable
+    && equal configDebugInfo
+    && equal configDumpBuildInfo
+    && equal configUseResponseFiles
+    where
+      equal f = on (==) f a b
+
+configAbsolutePaths :: ConfigFlags -> IO ConfigFlags
+configAbsolutePaths f =
+  (\v -> f { configPackageDBs = v })
+  `liftM` traverse (maybe (return Nothing) (liftM Just . absolutePackageDBPath))
+  (configPackageDBs f)
+
+defaultConfigFlags :: ProgramDb -> ConfigFlags
+defaultConfigFlags progDb = emptyConfigFlags {
+    configArgs         = [],
+    configPrograms_    = Option' (Just (Last' progDb)),
+    configHcFlavor     = maybe NoFlag Flag defaultCompilerFlavor,
+    configVanillaLib   = Flag True,
+    configProfLib      = NoFlag,
+    configSharedLib    = NoFlag,
+    configStaticLib    = NoFlag,
+    configDynExe       = Flag False,
+    configFullyStaticExe = Flag False,
+    configProfExe      = NoFlag,
+    configProf         = NoFlag,
+    configProfDetail   = NoFlag,
+    configProfLibDetail= NoFlag,
+    configOptimization = Flag NormalOptimisation,
+    configProgPrefix   = Flag (toPathTemplate ""),
+    configProgSuffix   = Flag (toPathTemplate ""),
+    configDistPref     = NoFlag,
+    configCabalFilePath = NoFlag,
+    configVerbosity    = Flag normal,
+    configUserInstall  = Flag False,           --TODO: reverse this
+#if defined(mingw32_HOST_OS)
+    -- See #8062 and GHC #21019.
+    configGHCiLib      = Flag False,
+#else
+    configGHCiLib      = NoFlag,
+#endif
+    configSplitSections = Flag False,
+    configSplitObjs    = Flag False, -- takes longer, so turn off by default
+    configStripExes    = NoFlag,
+    configStripLibs    = NoFlag,
+    configTests        = Flag False,
+    configBenchmarks   = Flag False,
+    configCoverage     = Flag False,
+    configLibCoverage  = NoFlag,
+    configExactConfiguration = Flag False,
+    configFlagError    = NoFlag,
+    configRelocatable  = Flag False,
+    configDebugInfo    = Flag NoDebugInfo,
+    configDumpBuildInfo = NoFlag,
+    configUseResponseFiles = NoFlag
+  }
+
+configureCommand :: ProgramDb -> CommandUI ConfigFlags
+configureCommand progDb = CommandUI
+  { commandName         = "configure"
+  , commandSynopsis     = "Prepare to build the package."
+  , commandDescription  = Just $ \_ -> wrapText $
+         "Configure how the package is built by setting "
+      ++ "package (and other) flags.\n"
+      ++ "\n"
+      ++ "The configuration affects several other commands, "
+      ++ "including build, test, bench, run, repl.\n"
+  , commandNotes        = Just $ \_pname -> programFlagsDescription progDb
+  , commandUsage        = \pname ->
+      "Usage: " ++ pname ++ " configure [FLAGS]\n"
+  , commandDefaultFlags = defaultConfigFlags progDb
+  , commandOptions      = \showOrParseArgs ->
+         configureOptions showOrParseArgs
+      ++ programDbPaths   progDb showOrParseArgs
+           configProgramPaths (\v fs -> fs { configProgramPaths = v })
+      ++ programDbOption progDb showOrParseArgs
+           configProgramArgs (\v fs -> fs { configProgramArgs = v })
+      ++ programDbOptions progDb showOrParseArgs
+           configProgramArgs (\v fs -> fs { configProgramArgs = v })
+  }
+
+-- | Inverse to 'dispModSubstEntry'.
+parsecModSubstEntry :: ParsecParser (ModuleName, Module)
+parsecModSubstEntry = do
+    k <- parsec
+    _ <- P.char '='
+    v <- parsec
+    return (k, v)
+
+-- | Pretty-print a single entry of a module substitution.
+dispModSubstEntry :: (ModuleName, Module) -> Disp.Doc
+dispModSubstEntry (k, v) = pretty k <<>> Disp.char '=' <<>> pretty v
+
+configureOptions :: ShowOrParseArgs -> [OptionField ConfigFlags]
+configureOptions showOrParseArgs =
+      [optionVerbosity configVerbosity
+       (\v flags -> flags { configVerbosity = v })
+      ,optionDistPref
+         configDistPref (\d flags -> flags { configDistPref = d })
+         showOrParseArgs
+
+      ,option [] ["compiler"] "compiler"
+         configHcFlavor (\v flags -> flags { configHcFlavor = v })
+         (choiceOpt [ (Flag GHC,   ("g", ["ghc"]),   "compile with GHC")
+                    , (Flag GHCJS, ([] , ["ghcjs"]), "compile with GHCJS")
+                    , (Flag UHC,   ([] , ["uhc"]),   "compile with UHC")
+                    -- "haskell-suite" compiler id string will be replaced
+                    -- by a more specific one during the configure stage
+                    , (Flag (HaskellSuite "haskell-suite"), ([] , ["haskell-suite"]),
+                        "compile with a haskell-suite compiler")])
+
+      ,option "" ["cabal-file"]
+         "use this Cabal file"
+         configCabalFilePath (\v flags -> flags { configCabalFilePath = v })
+         (reqArgFlag "PATH")
+
+      ,option "w" ["with-compiler"]
+         "give the path to a particular compiler"
+         configHcPath (\v flags -> flags { configHcPath = v })
+         (reqArgFlag "PATH")
+
+      ,option "" ["with-hc-pkg"]
+         "give the path to the package tool"
+         configHcPkg (\v flags -> flags { configHcPkg = v })
+         (reqArgFlag "PATH")
+      ]
+   ++ map liftInstallDirs installDirsOptions
+   ++ [option "" ["program-prefix"]
+          "prefix to be applied to installed executables"
+          configProgPrefix
+          (\v flags -> flags { configProgPrefix = v })
+          (reqPathTemplateArgFlag "PREFIX")
+
+      ,option "" ["program-suffix"]
+          "suffix to be applied to installed executables"
+          configProgSuffix (\v flags -> flags { configProgSuffix = v } )
+          (reqPathTemplateArgFlag "SUFFIX")
+
+      ,option "" ["library-vanilla"]
+         "Vanilla libraries"
+         configVanillaLib (\v flags -> flags { configVanillaLib = v })
+         (boolOpt [] [])
+
+      ,option "p" ["library-profiling"]
+         "Library profiling"
+         configProfLib (\v flags -> flags { configProfLib = v })
+         (boolOpt "p" [])
+
+      ,option "" ["shared"]
+         "Shared library"
+         configSharedLib (\v flags -> flags { configSharedLib = v })
+         (boolOpt [] [])
+
+      ,option "" ["static"]
+         "Static library"
+         configStaticLib (\v flags -> flags { configStaticLib = v })
+         (boolOpt [] [])
+
+      ,option "" ["executable-dynamic"]
+         "Executable dynamic linking"
+         configDynExe (\v flags -> flags { configDynExe = v })
+         (boolOpt [] [])
+
+      ,option "" ["executable-static"]
+         "Executable fully static linking"
+         configFullyStaticExe (\v flags -> flags { configFullyStaticExe = v })
+         (boolOpt [] [])
+
+      ,option "" ["profiling"]
+         "Executable and library profiling"
+         configProf (\v flags -> flags { configProf = v })
+         (boolOpt [] [])
+
+      ,option "" ["executable-profiling"]
+         "Executable profiling (DEPRECATED)"
+         configProfExe (\v flags -> flags { configProfExe = v })
+         (boolOpt [] [])
+
+      ,option "" ["profiling-detail"]
+         ("Profiling detail level for executable and library (default, " ++
+          "none, exported-functions, toplevel-functions,  all-functions, late).")
+         configProfDetail (\v flags -> flags { configProfDetail = v })
+         (reqArg' "level" (Flag . flagToProfDetailLevel)
+                          showProfDetailLevelFlag)
+
+      ,option "" ["library-profiling-detail"]
+         "Profiling detail level for libraries only."
+         configProfLibDetail (\v flags -> flags { configProfLibDetail = v })
+         (reqArg' "level" (Flag . flagToProfDetailLevel)
+                          showProfDetailLevelFlag)
+
+      ,multiOption "optimization"
+         configOptimization (\v flags -> flags { configOptimization = v })
+         [optArg' "n" (Flag . flagToOptimisationLevel)
+                     (\f -> case f of
+                              Flag NoOptimisation      -> []
+                              Flag NormalOptimisation  -> [Nothing]
+                              Flag MaximumOptimisation -> [Just "2"]
+                              _                        -> [])
+                 "O" ["enable-optimization","enable-optimisation"]
+                 "Build with optimization (n is 0--2, default is 1)",
+          noArg (Flag NoOptimisation) []
+                ["disable-optimization","disable-optimisation"]
+                "Build without optimization"
+         ]
+
+      ,multiOption "debug-info"
+         configDebugInfo (\v flags -> flags { configDebugInfo = v })
+         [optArg' "n" (Flag . flagToDebugInfoLevel)
+                     (\f -> case f of
+                              Flag NoDebugInfo      -> []
+                              Flag MinimalDebugInfo -> [Just "1"]
+                              Flag NormalDebugInfo  -> [Nothing]
+                              Flag MaximalDebugInfo -> [Just "3"]
+                              _                     -> [])
+                 "" ["enable-debug-info"]
+                 "Emit debug info (n is 0--3, default is 0)",
+          noArg (Flag NoDebugInfo) []
+                ["disable-debug-info"]
+                "Don't emit debug info"
+         ]
+
+      , multiOption "build-info"
+         configDumpBuildInfo
+         (\v flags -> flags { configDumpBuildInfo = v })
+         [noArg (Flag DumpBuildInfo) []
+                ["enable-build-info"]
+                "Enable build information generation during project building",
+          noArg (Flag NoDumpBuildInfo) []
+                ["disable-build-info"]
+                "Disable build information generation during project building"
+         ]
+
+      ,option "" ["library-for-ghci"]
+         "compile library for use with GHCi"
+         configGHCiLib (\v flags -> flags { configGHCiLib = v })
+         (boolOpt [] [])
+
+      ,option "" ["split-sections"]
+         "compile library code such that unneeded definitions can be dropped from the final executable (GHC 7.8+)"
+         configSplitSections (\v flags -> flags { configSplitSections = v })
+         (boolOpt [] [])
+
+      ,option "" ["split-objs"]
+         "split library into smaller objects to reduce binary sizes (GHC 6.6+)"
+         configSplitObjs (\v flags -> flags { configSplitObjs = v })
+         (boolOpt [] [])
+
+      ,option "" ["executable-stripping"]
+         "strip executables upon installation to reduce binary sizes"
+         configStripExes (\v flags -> flags { configStripExes = v })
+         (boolOpt [] [])
+
+      ,option "" ["library-stripping"]
+         "strip libraries upon installation to reduce binary sizes"
+         configStripLibs (\v flags -> flags { configStripLibs = v })
+         (boolOpt [] [])
+
+      ,option "" ["configure-option"]
+         "Extra option for configure"
+         configConfigureArgs (\v flags -> flags { configConfigureArgs = v })
+         (reqArg' "OPT" (\x -> [x]) id)
+
+      ,option "" ["user-install"]
+         "doing a per-user installation"
+         configUserInstall (\v flags -> flags { configUserInstall = v })
+         (boolOpt' ([],["user"]) ([], ["global"]))
+
+      ,option "" ["package-db"]
+         (   "Append the given package database to the list of package"
+          ++ " databases used (to satisfy dependencies and register into)."
+          ++ " May be a specific file, 'global' or 'user'. The initial list"
+          ++ " is ['global'], ['global', 'user'], or ['global', $sandbox],"
+          ++ " depending on context. Use 'clear' to reset the list to empty."
+          ++ " See the user guide for details.")
+         configPackageDBs (\v flags -> flags { configPackageDBs = v })
+         (reqArg' "DB" readPackageDbList showPackageDbList)
+
+      ,option "f" ["flags"]
+         "Force values for the given flags in Cabal conditionals in the .cabal file.  E.g., --flags=\"debug -usebytestrings\" forces the flag \"debug\" to true and \"usebytestrings\" to false."
+         configConfigurationsFlags (\v flags -> flags { configConfigurationsFlags = v })
+         (reqArg "FLAGS"
+              (parsecToReadE (\err -> "Invalid flag assignment: " ++ err) legacyParsecFlagAssignment)
+              legacyShowFlagAssignment')
+
+      ,option "" ["extra-include-dirs"]
+         "A list of directories to search for header files"
+         configExtraIncludeDirs (\v flags -> flags {configExtraIncludeDirs = v})
+         (reqArg' "PATH" (\x -> [x]) id)
+
+      ,option "" ["deterministic"]
+         "Try to be as deterministic as possible (used by the test suite)"
+         configDeterministic (\v flags -> flags {configDeterministic = v})
+         (boolOpt [] [])
+
+      ,option "" ["ipid"]
+         "Installed package ID to compile this package as"
+         configIPID (\v flags -> flags {configIPID = v})
+         (reqArgFlag "IPID")
+
+      ,option "" ["cid"]
+         "Installed component ID to compile this component as"
+         (fmap prettyShow . configCID) (\v flags -> flags {configCID = fmap mkComponentId v})
+         (reqArgFlag "CID")
+
+      ,option "" ["extra-lib-dirs"]
+         "A list of directories to search for external libraries"
+         configExtraLibDirs (\v flags -> flags {configExtraLibDirs = v})
+         (reqArg' "PATH" (\x -> [x]) id)
+
+      ,option "" ["extra-lib-dirs-static"]
+         "A list of directories to search for external libraries when linking fully static executables"
+         configExtraLibDirsStatic (\v flags -> flags {configExtraLibDirsStatic = v})
+         (reqArg' "PATH" (\x -> [x]) id)
+
+      ,option "" ["extra-framework-dirs"]
+         "A list of directories to search for external frameworks (OS X only)"
+         configExtraFrameworkDirs
+         (\v flags -> flags {configExtraFrameworkDirs = v})
+         (reqArg' "PATH" (\x -> [x]) id)
+
+      ,option "" ["extra-prog-path"]
+         "A list of directories to search for required programs (in addition to the normal search locations)"
+         configProgramPathExtra (\v flags -> flags {configProgramPathExtra = v})
+         (reqArg' "PATH" (\x -> toNubList [x]) fromNubList)
+
+      ,option "" ["constraint"]
+         "A list of additional constraints on the dependencies."
+         configConstraints (\v flags -> flags { configConstraints = v})
+         (reqArg "DEPENDENCY"
+                 (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsec))
+                 (map prettyShow))
+
+      ,option "" ["dependency"]
+         "A list of exact dependencies. E.g., --dependency=\"void=void-0.5.8-177d5cdf20962d0581fe2e4932a6c309\""
+         configDependencies (\v flags -> flags { configDependencies = v})
+         (reqArg "NAME[:COMPONENT_NAME]=CID"
+                 (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsecGivenComponent))
+                 (map prettyGivenComponent))
+
+      ,option "" ["promised-dependency"]
+         "A list of promised dependencies. E.g., --promised-dependency=\"void=void-0.5.8-177d5cdf20962d0581fe2e4932a6c309\""
+         configPromisedDependencies (\v flags -> flags { configPromisedDependencies = v})
+         (reqArg "NAME[:COMPONENT_NAME]=CID"
+                 (parsecToReadE (const "dependency expected") ((\x -> [x]) `fmap` parsecGivenComponent))
+                 (map prettyGivenComponent))
+
+      ,option "" ["instantiate-with"]
+        "A mapping of signature names to concrete module instantiations."
+        configInstantiateWith (\v flags -> flags { configInstantiateWith = v  })
+        (reqArg "NAME=MOD"
+            (parsecToReadE ("Cannot parse module substitution: " ++) (fmap (:[]) parsecModSubstEntry))
+            (map (Disp.renderStyle defaultStyle . dispModSubstEntry)))
+
+      ,option "" ["tests"]
+         "dependency checking and compilation for test suites listed in the package description file."
+         configTests (\v flags -> flags { configTests = v })
+         (boolOpt [] [])
+
+      ,option "" ["coverage"]
+         "build package with Haskell Program Coverage. (GHC only)"
+         configCoverage (\v flags -> flags { configCoverage = v })
+         (boolOpt [] [])
+
+      ,option "" ["library-coverage"]
+         "build package with Haskell Program Coverage. (GHC only) (DEPRECATED)"
+         configLibCoverage (\v flags -> flags { configLibCoverage = v })
+         (boolOpt [] [])
+
+      ,option "" ["exact-configuration"]
+         "All direct dependencies and flags are provided on the command line."
+         configExactConfiguration
+         (\v flags -> flags { configExactConfiguration = v })
+         trueArg
+
+      ,option "" ["benchmarks"]
+         "dependency checking and compilation for benchmarks listed in the package description file."
+         configBenchmarks (\v flags -> flags { configBenchmarks = v })
+         (boolOpt [] [])
+
+      ,option "" ["relocatable"]
+         "building a package that is relocatable. (GHC only)"
+         configRelocatable (\v flags -> flags { configRelocatable = v})
+         (boolOpt [] [])
+
+      ,option "" ["response-files"]
+         "enable workaround for old versions of programs like \"ar\" that do not support @file arguments"
+         configUseResponseFiles
+         (\v flags -> flags { configUseResponseFiles = v })
+         (boolOpt' ([], ["disable-response-files"]) ([], []))
+
+      ,option "" ["allow-depending-on-private-libs"]
+         (  "Allow depending on private libraries. "
+         ++ "If set, the library visibility check MUST be done externally." )
+         configAllowDependingOnPrivateLibs
+         (\v flags -> flags { configAllowDependingOnPrivateLibs = v })
+         trueArg
+      ]
+  where
+    liftInstallDirs =
+      liftOption configInstallDirs (\v flags -> flags { configInstallDirs = v })
+
+    reqPathTemplateArgFlag title _sf _lf d get set =
+      reqArgFlag title _sf _lf d
+        (fmap fromPathTemplate . get) (set . fmap toPathTemplate)
+
+readPackageDbList :: String -> [Maybe PackageDB]
+readPackageDbList str = [readPackageDb str]
+
+-- | Parse a PackageDB stack entry
+--
+-- @since 3.7.0.0
+readPackageDb :: String -> Maybe PackageDB
+readPackageDb "clear"  = Nothing
+readPackageDb "global" = Just GlobalPackageDB
+readPackageDb "user"   = Just UserPackageDB
+readPackageDb other    = Just (SpecificPackageDB other)
+
+showPackageDbList :: [Maybe PackageDB] -> [String]
+showPackageDbList = map showPackageDb
+
+-- | Show a PackageDB stack entry
+--
+-- @since 3.7.0.0
+showPackageDb :: Maybe PackageDB -> String
+showPackageDb Nothing                       = "clear"
+showPackageDb (Just GlobalPackageDB)        = "global"
+showPackageDb (Just UserPackageDB)          = "user"
+showPackageDb (Just (SpecificPackageDB db)) = db
+
+showProfDetailLevelFlag :: Flag ProfDetailLevel -> [String]
+showProfDetailLevelFlag NoFlag    = []
+showProfDetailLevelFlag (Flag dl) = [showProfDetailLevel dl]
+
+parsecGivenComponent :: ParsecParser GivenComponent
+parsecGivenComponent = do
+  pn <- parsec
+  ln <- P.option LMainLibName $ do
+    _ <- P.char ':'
+    ucn <- parsec
+    return $ if unUnqualComponentName ucn == unPackageName pn
+             then LMainLibName
+             else LSubLibName ucn
+  _ <- P.char '='
+  cid <- parsec
+  return $ GivenComponent pn ln cid
+
+prettyGivenComponent :: GivenComponent -> String
+prettyGivenComponent (GivenComponent pn cn cid) =
+  prettyShow pn
+  ++ case cn of LMainLibName -> ""
+                LSubLibName n -> ":" ++ prettyShow n
+  ++ "=" ++ prettyShow cid
+
+installDirsOptions :: [OptionField (InstallDirs (Flag PathTemplate))]
+installDirsOptions =
+  [ option "" ["prefix"]
+      "bake this prefix in preparation of installation"
+      prefix (\v flags -> flags { prefix = v })
+      installDirArg
+
+  , option "" ["bindir"]
+      "installation directory for executables"
+      bindir (\v flags -> flags { bindir = v })
+      installDirArg
+
+  , option "" ["libdir"]
+      "installation directory for libraries"
+      libdir (\v flags -> flags { libdir = v })
+      installDirArg
+
+  , option "" ["libsubdir"]
+      "subdirectory of libdir in which libs are installed"
+      libsubdir (\v flags -> flags { libsubdir = v })
+      installDirArg
+
+  , option "" ["dynlibdir"]
+      "installation directory for dynamic libraries"
+      dynlibdir (\v flags -> flags { dynlibdir = v })
+      installDirArg
+
+  , option "" ["libexecdir"]
+      "installation directory for program executables"
+      libexecdir (\v flags -> flags { libexecdir = v })
+      installDirArg
+
+  , option "" ["libexecsubdir"]
+      "subdirectory of libexecdir in which private executables are installed"
+      libexecsubdir (\v flags -> flags { libexecsubdir = v })
+      installDirArg
+
+  , option "" ["datadir"]
+      "installation directory for read-only data"
+      datadir (\v flags -> flags { datadir = v })
+      installDirArg
+
+  , option "" ["datasubdir"]
+      "subdirectory of datadir in which data files are installed"
+      datasubdir (\v flags -> flags { datasubdir = v })
+      installDirArg
+
+  , option "" ["docdir"]
+      "installation directory for documentation"
+      docdir (\v flags -> flags { docdir = v })
+      installDirArg
+
+  , option "" ["htmldir"]
+      "installation directory for HTML documentation"
+      htmldir (\v flags -> flags { htmldir = v })
+      installDirArg
+
+  , option "" ["haddockdir"]
+      "installation directory for haddock interfaces"
+      haddockdir (\v flags -> flags { haddockdir = v })
+      installDirArg
+
+  , option "" ["sysconfdir"]
+      "installation directory for configuration files"
+      sysconfdir (\v flags -> flags { sysconfdir = v })
+      installDirArg
+  ]
+  where
+    installDirArg _sf _lf d get set =
+      reqArgFlag "DIR" _sf _lf d
+        (fmap fromPathTemplate . get) (set . fmap toPathTemplate)
+
+emptyConfigFlags :: ConfigFlags
+emptyConfigFlags = mempty
+
+instance Monoid ConfigFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup ConfigFlags where
+  (<>) = gmappend
+
+
+-- | Arguments to pass to a @configure@ script, e.g. generated by
+-- @autoconf@.
+configureArgs :: Bool -> ConfigFlags -> [String]
+configureArgs bcHack flags
+  = hc_flag
+ ++ optFlag  "with-hc-pkg" configHcPkg
+ ++ optFlag' "prefix"      prefix
+ ++ optFlag' "bindir"      bindir
+ ++ optFlag' "libdir"      libdir
+ ++ optFlag' "libexecdir"  libexecdir
+ ++ optFlag' "datadir"     datadir
+ ++ optFlag' "sysconfdir"  sysconfdir
+ ++ configConfigureArgs flags
+  where
+        hc_flag = case (configHcFlavor flags, configHcPath flags) of
+                        (_, Flag hc_path) -> [hc_flag_name ++ hc_path]
+                        (Flag hc, NoFlag) -> [hc_flag_name ++ prettyShow hc]
+                        (NoFlag,NoFlag)   -> []
+        hc_flag_name
+            --TODO kill off thic bc hack when defaultUserHooks is removed.
+            | bcHack    = "--with-hc="
+            | otherwise = "--with-compiler="
+        optFlag name config_field = case config_field flags of
+                        Flag p -> ["--" ++ name ++ "=" ++ p]
+                        NoFlag -> []
+        optFlag' name config_field = optFlag name (fmap fromPathTemplate
+                                                 . config_field
+                                                 . configInstallDirs)
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Copy.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Copy.hs
new file mode 100644
index 000000000..0da627a73
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Copy.hs
@@ -0,0 +1,123 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Copy
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the copy command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Copy (
+
+  CopyFlags(..),     emptyCopyFlags,     defaultCopyFlags,     copyCommand,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.ReadE
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Simple.Utils
+import Distribution.Simple.InstallDirs
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Copy flags
+-- ------------------------------------------------------------
+
+-- | Flags to @copy@: (destdir, copy-prefix (backwards compat), verbosity)
+data CopyFlags = CopyFlags {
+    copyDest      :: Flag CopyDest,
+    copyDistPref  :: Flag FilePath,
+    copyVerbosity :: Flag Verbosity,
+    -- This is the same hack as in 'buildArgs'.  But I (ezyang) don't
+    -- think it's a hack, it's the right way to make hooks more robust
+    -- TODO: Stop using this eventually when 'UserHooks' gets changed
+    copyArgs :: [String],
+    copyCabalFilePath :: Flag FilePath
+  }
+  deriving (Show, Generic)
+
+defaultCopyFlags :: CopyFlags
+defaultCopyFlags  = CopyFlags {
+    copyDest      = Flag NoCopyDest,
+    copyDistPref  = NoFlag,
+    copyVerbosity = Flag normal,
+    copyArgs      = [],
+    copyCabalFilePath = mempty
+  }
+
+copyCommand :: CommandUI CopyFlags
+copyCommand = CommandUI
+  { commandName         = "copy"
+  , commandSynopsis     = "Copy the files of all/specific components to install locations."
+  , commandDescription  = Just $ \_ -> wrapText $
+          "Components encompass executables and libraries. "
+       ++ "Does not call register, and allows a prefix at install time. "
+       ++ "Without the --destdir flag, configure determines location.\n"
+  , commandNotes        = Just $ \pname ->
+       "Examples:\n"
+        ++ "  " ++ pname ++ " copy           "
+        ++ "    All the components in the package\n"
+        ++ "  " ++ pname ++ " copy foo       "
+        ++ "    A component (i.e. lib, exe, test suite)"
+  , commandUsage        = usageAlternatives "copy" $
+      [ "[FLAGS]"
+      , "COMPONENTS [FLAGS]"
+      ]
+  , commandDefaultFlags = defaultCopyFlags
+  , commandOptions      = \showOrParseArgs -> case showOrParseArgs of
+      ShowArgs -> filter ((`notElem` ["target-package-db"])
+                          . optionName) $ copyOptions ShowArgs
+      ParseArgs -> copyOptions ParseArgs
+}
+
+copyOptions ::  ShowOrParseArgs -> [OptionField CopyFlags]
+copyOptions showOrParseArgs =
+  [optionVerbosity copyVerbosity (\v flags -> flags { copyVerbosity = v })
+
+  ,optionDistPref
+    copyDistPref (\d flags -> flags { copyDistPref = d })
+    showOrParseArgs
+
+  ,option "" ["destdir"]
+    "directory to copy files to, prepended to installation directories"
+    copyDest (\v flags -> case copyDest flags of
+                 Flag (CopyToDb _) -> error "Use either 'destdir' or 'target-package-db'."
+                 _ -> flags { copyDest = v })
+    (reqArg "DIR" (succeedReadE (Flag . CopyTo))
+      (\f -> case f of Flag (CopyTo p) -> [p]; _ -> []))
+
+  ,option "" ["target-package-db"]
+    "package database to copy files into. Required when using ${pkgroot} prefix."
+    copyDest (\v flags -> case copyDest flags of
+                 NoFlag -> flags { copyDest = v }
+                 Flag NoCopyDest -> flags { copyDest = v }
+                 _ -> error "Use either 'destdir' or 'target-package-db'.")
+    (reqArg "DATABASE" (succeedReadE (Flag . CopyToDb))
+      (\f -> case f of Flag (CopyToDb p) -> [p]; _ -> []))
+  ]
+
+emptyCopyFlags :: CopyFlags
+emptyCopyFlags = mempty
+
+instance Monoid CopyFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup CopyFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Global.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Global.hs
new file mode 100644
index 000000000..35e7b60f8
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Global.hs
@@ -0,0 +1,102 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Global
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the global command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Global (
+  GlobalFlags(..),   emptyGlobalFlags,   defaultGlobalFlags,   globalCommand,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Simple.Setup.Common
+
+
+-- ------------------------------------------------------------
+-- * Global flags
+-- ------------------------------------------------------------
+
+-- In fact since individual flags types are monoids and these are just sets of
+-- flags then they are also monoids pointwise. This turns out to be really
+-- useful. The mempty is the set of empty flags and mappend allows us to
+-- override specific flags. For example we can start with default flags and
+-- override with the ones we get from a file or the command line, or both.
+
+-- | Flags that apply at the top level, not to any sub-command.
+data GlobalFlags = GlobalFlags {
+    globalVersion        :: Flag Bool,
+    globalNumericVersion :: Flag Bool
+  } deriving (Generic, Typeable)
+
+defaultGlobalFlags :: GlobalFlags
+defaultGlobalFlags  = GlobalFlags {
+    globalVersion        = Flag False,
+    globalNumericVersion = Flag False
+  }
+
+globalCommand :: [Command action] -> CommandUI GlobalFlags
+globalCommand commands = CommandUI
+  { commandName         = ""
+  , commandSynopsis     = ""
+  , commandUsage        = \pname ->
+         "This Setup program uses the Haskell Cabal Infrastructure.\n"
+      ++ "See http://www.haskell.org/cabal/ for more information.\n"
+      ++ "\n"
+      ++ "Usage: " ++ pname ++ " [GLOBAL FLAGS] [COMMAND [FLAGS]]\n"
+  , commandDescription = Just $ \pname ->
+      let
+        commands' = commands ++ [commandAddAction helpCommandUI undefined]
+        cmdDescs = getNormalCommandDescriptions commands'
+        maxlen    = maximum $ [length name | (name, _) <- cmdDescs]
+        align str = str ++ replicate (maxlen - length str) ' '
+      in
+         "Commands:\n"
+      ++ unlines [ "  " ++ align name ++ "    " ++ descr
+                 | (name, descr) <- cmdDescs ]
+      ++ "\n"
+      ++ "For more information about a command use\n"
+      ++ "  " ++ pname ++ " COMMAND --help\n\n"
+      ++ "Typical steps for installing Cabal packages:\n"
+      ++ concat [ "  " ++ pname ++ " " ++ x ++ "\n"
+                | x <- ["configure", "build", "install"]]
+  , commandNotes        = Nothing
+  , commandDefaultFlags = defaultGlobalFlags
+  , commandOptions      = \_ ->
+      [option ['V'] ["version"]
+         "Print version information"
+         globalVersion (\v flags -> flags { globalVersion = v })
+         trueArg
+      ,option [] ["numeric-version"]
+         "Print just the version number"
+         globalNumericVersion (\v flags -> flags { globalNumericVersion = v })
+         trueArg
+      ]
+  }
+
+emptyGlobalFlags :: GlobalFlags
+emptyGlobalFlags = mempty
+
+instance Monoid GlobalFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup GlobalFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Haddock.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Haddock.hs
new file mode 100644
index 000000000..1a35e796b
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Haddock.hs
@@ -0,0 +1,534 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Haddock
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the haddock command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Haddock (
+
+  HaddockTarget(..),
+  HaddockFlags(..),  emptyHaddockFlags,  defaultHaddockFlags,  haddockCommand,
+  Visibility(..),
+  HaddockProjectFlags(..), emptyHaddockProjectFlags, defaultHaddockProjectFlags, haddockProjectCommand,
+  haddockOptions, haddockProjectOptions,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Parsec
+import Distribution.Pretty
+import qualified Distribution.Compat.CharParsing as P
+import qualified Text.PrettyPrint as Disp
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Simple.Program
+import Distribution.Simple.InstallDirs
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Haddock flags
+-- ------------------------------------------------------------
+
+
+-- | When we build haddock documentation, there are two cases:
+--
+-- 1. We build haddocks only for the current development version,
+--    intended for local use and not for distribution. In this case,
+--    we store the generated documentation in @<dist>/doc/html/<package name>@.
+--
+-- 2. We build haddocks for intended for uploading them to hackage.
+--    In this case, we need to follow the layout that hackage expects
+--    from documentation tarballs, and we might also want to use different
+--    flags than for development builds, so in this case we store the generated
+--    documentation in @<dist>/doc/html/<package id>-docs@.
+data HaddockTarget = ForHackage | ForDevelopment deriving (Eq, Show, Generic, Typeable)
+
+instance Binary HaddockTarget
+instance Structured HaddockTarget
+
+instance Pretty HaddockTarget where
+    pretty ForHackage     = Disp.text "for-hackage"
+    pretty ForDevelopment = Disp.text "for-development"
+
+instance Parsec HaddockTarget where
+    parsec = P.choice [ P.try $ P.string "for-hackage"     >> return ForHackage
+                      , P.string "for-development" >> return ForDevelopment]
+
+data HaddockFlags = HaddockFlags {
+    haddockProgramPaths :: [(String, FilePath)],
+    haddockProgramArgs  :: [(String, [String])],
+    haddockHoogle       :: Flag Bool,
+    haddockHtml         :: Flag Bool,
+    haddockHtmlLocation :: Flag String,
+    haddockForHackage   :: Flag HaddockTarget,
+    haddockExecutables  :: Flag Bool,
+    haddockTestSuites   :: Flag Bool,
+    haddockBenchmarks   :: Flag Bool,
+    haddockForeignLibs  :: Flag Bool,
+    haddockInternal     :: Flag Bool,
+    haddockCss          :: Flag FilePath,
+    haddockLinkedSource :: Flag Bool,
+    haddockQuickJump    :: Flag Bool,
+    haddockHscolourCss  :: Flag FilePath,
+    haddockContents     :: Flag PathTemplate,
+    haddockIndex        :: Flag PathTemplate,
+    haddockDistPref     :: Flag FilePath,
+    haddockKeepTempFiles:: Flag Bool,
+    haddockVerbosity    :: Flag Verbosity,
+    haddockCabalFilePath :: Flag FilePath,
+    haddockBaseUrl      :: Flag String,
+    haddockLib          :: Flag String,
+    haddockOutputDir    :: Flag FilePath,
+    haddockArgs         :: [String]
+  }
+  deriving (Show, Generic, Typeable)
+
+defaultHaddockFlags :: HaddockFlags
+defaultHaddockFlags  = HaddockFlags {
+    haddockProgramPaths = mempty,
+    haddockProgramArgs  = [],
+    haddockHoogle       = Flag False,
+    haddockHtml         = Flag False,
+    haddockHtmlLocation = NoFlag,
+    haddockForHackage   = NoFlag,
+    haddockExecutables  = Flag False,
+    haddockTestSuites   = Flag False,
+    haddockBenchmarks   = Flag False,
+    haddockForeignLibs  = Flag False,
+    haddockInternal     = Flag False,
+    haddockCss          = NoFlag,
+    haddockLinkedSource = Flag False,
+    haddockQuickJump    = Flag False,
+    haddockHscolourCss  = NoFlag,
+    haddockContents     = NoFlag,
+    haddockDistPref     = NoFlag,
+    haddockKeepTempFiles= Flag False,
+    haddockVerbosity    = Flag normal,
+    haddockCabalFilePath = mempty,
+    haddockIndex        = NoFlag,
+    haddockBaseUrl      = NoFlag,
+    haddockLib          = NoFlag,
+    haddockOutputDir    = NoFlag,
+    haddockArgs         = mempty
+  }
+
+haddockCommand :: CommandUI HaddockFlags
+haddockCommand = CommandUI
+  { commandName         = "haddock"
+  , commandSynopsis     = "Generate Haddock HTML documentation."
+  , commandDescription  = Just $ \_ ->
+      "Requires the program haddock, version 2.x.\n"
+  , commandNotes        = Nothing
+  , commandUsage        = usageAlternatives "haddock" $
+      [ "[FLAGS]"
+      , "COMPONENTS [FLAGS]"
+      ]
+  , commandDefaultFlags = defaultHaddockFlags
+  , commandOptions      = \showOrParseArgs ->
+         haddockOptions showOrParseArgs
+      ++ programDbPaths   progDb ParseArgs
+             haddockProgramPaths (\v flags -> flags { haddockProgramPaths = v})
+      ++ programDbOption  progDb showOrParseArgs
+             haddockProgramArgs (\v fs -> fs { haddockProgramArgs = v })
+      ++ programDbOptions progDb ParseArgs
+             haddockProgramArgs  (\v flags -> flags { haddockProgramArgs = v})
+  }
+  where
+    progDb = addKnownProgram haddockProgram
+             $ addKnownProgram ghcProgram
+             $ emptyProgramDb
+
+haddockOptions :: ShowOrParseArgs -> [OptionField HaddockFlags]
+haddockOptions showOrParseArgs =
+  [optionVerbosity haddockVerbosity
+   (\v flags -> flags { haddockVerbosity = v })
+  ,optionDistPref
+   haddockDistPref (\d flags -> flags { haddockDistPref = d })
+   showOrParseArgs
+
+  ,option "" ["keep-temp-files"]
+   "Keep temporary files"
+   haddockKeepTempFiles (\b flags -> flags { haddockKeepTempFiles = b })
+   trueArg
+
+  ,option "" ["hoogle"]
+   "Generate a hoogle database"
+   haddockHoogle (\v flags -> flags { haddockHoogle = v })
+   trueArg
+
+  ,option "" ["html"]
+   "Generate HTML documentation (the default)"
+   haddockHtml (\v flags -> flags { haddockHtml = v })
+   trueArg
+
+  ,option "" ["html-location"]
+   "Location of HTML documentation for pre-requisite packages"
+   haddockHtmlLocation (\v flags -> flags { haddockHtmlLocation = v })
+   (reqArgFlag "URL")
+
+  ,option "" ["for-hackage"]
+   "Collection of flags to generate documentation suitable for upload to hackage"
+   haddockForHackage (\v flags -> flags { haddockForHackage = v })
+   (noArg (Flag ForHackage))
+
+  ,option "" ["executables"]
+   "Run haddock for Executables targets"
+   haddockExecutables (\v flags -> flags { haddockExecutables = v })
+   trueArg
+
+  ,option "" ["tests"]
+   "Run haddock for Test Suite targets"
+   haddockTestSuites (\v flags -> flags { haddockTestSuites = v })
+   trueArg
+
+  ,option "" ["benchmarks"]
+   "Run haddock for Benchmark targets"
+   haddockBenchmarks (\v flags -> flags { haddockBenchmarks = v })
+   trueArg
+
+  ,option "" ["foreign-libraries"]
+   "Run haddock for Foreign Library targets"
+   haddockForeignLibs (\v flags -> flags { haddockForeignLibs = v })
+   trueArg
+
+  ,option "" ["all"]
+   "Run haddock for all targets"
+   (\f -> allFlags [ haddockExecutables f
+                   , haddockTestSuites  f
+                   , haddockBenchmarks  f
+                   , haddockForeignLibs f
+                   ])
+         (\v flags -> flags { haddockExecutables = v
+                            , haddockTestSuites  = v
+                            , haddockBenchmarks  = v
+                            , haddockForeignLibs = v
+                            })
+         trueArg
+
+  ,option "" ["internal"]
+   "Run haddock for internal modules and include all symbols"
+   haddockInternal (\v flags -> flags { haddockInternal = v })
+   trueArg
+
+  ,option "" ["css"]
+   "Use PATH as the haddock stylesheet"
+   haddockCss (\v flags -> flags { haddockCss = v })
+   (reqArgFlag "PATH")
+
+  ,option "" ["hyperlink-source","hyperlink-sources","hyperlinked-source"]
+   "Hyperlink the documentation to the source code"
+   haddockLinkedSource (\v flags -> flags { haddockLinkedSource = v })
+   trueArg
+
+  ,option "" ["quickjump"]
+   "Generate an index for interactive documentation navigation"
+   haddockQuickJump (\v flags -> flags { haddockQuickJump = v })
+   trueArg
+
+  ,option "" ["hscolour-css"]
+   "Use PATH as the HsColour stylesheet"
+   haddockHscolourCss (\v flags -> flags { haddockHscolourCss = v })
+   (reqArgFlag "PATH")
+
+  ,option "" ["contents-location"]
+   "Bake URL in as the location for the contents page"
+   haddockContents (\v flags -> flags { haddockContents = v })
+   (reqArg' "URL"
+    (toFlag . toPathTemplate)
+    (flagToList . fmap fromPathTemplate))
+
+  ,option "" ["index-location"]
+   "Use a separately-generated HTML index"
+   haddockIndex (\v flags -> flags { haddockIndex = v})
+   (reqArg' "URL"
+    (toFlag . toPathTemplate)
+    (flagToList . fmap fromPathTemplate))
+
+  ,option "" ["base-url"]
+   "Base URL for static files."
+   haddockBaseUrl (\v flags -> flags { haddockBaseUrl = v})
+   (reqArgFlag "URL")
+
+  ,option "" ["lib"]
+   "location of Haddocks static / auxiliary files"
+   haddockLib (\v flags -> flags { haddockLib = v})
+   (reqArgFlag "DIR")
+
+  ,option "" ["output-dir"]
+   "Generate haddock documentation into this directory. This flag is provided as a technology preview and is subject to change in the next releases."
+   haddockOutputDir (\v flags -> flags { haddockOutputDir = v })
+   (reqArgFlag "DIR")
+  ]
+
+emptyHaddockFlags :: HaddockFlags
+emptyHaddockFlags = mempty
+
+instance Monoid HaddockFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup HaddockFlags where
+  (<>) = gmappend
+
+-- ------------------------------------------------------------
+-- * HaddocksFlags flags
+-- ------------------------------------------------------------
+
+-- | Governs whether modules from a given interface should be visible or
+-- hidden in the Haddock generated content page.  We don't expose this
+-- functionality to the user, but simply use 'Visible' for only local packages.
+-- Visibility of modules is available since @haddock-2.26.1@.
+--
+data Visibility = Visible | Hidden
+  deriving (Eq, Show)
+
+data HaddockProjectFlags = HaddockProjectFlags {
+    haddockProjectHackage      :: Flag Bool,
+    -- ^ a shortcut option which builds documentation linked to hackage.  It implies:
+    -- * `--html-location='https://hackage.haskell.org/package/$prg-$version/docs'
+    -- * `--quickjump`
+    -- * `--gen-index`
+    -- * `--gen-contents`
+    -- * `--hyperlinked-source`
+    haddockProjectLocal        :: Flag Bool,
+    -- ^ a shortcut option which builds self contained directory which contains
+    -- all the documentation, it implies:
+    -- * `--quickjump`
+    -- * `--gen-index`
+    -- * `--gen-contents`
+    -- * `--hyperlinked-source`
+    --
+    -- And it will also pass `--base-url` option to `haddock`.
+
+    -- options passed to @haddock@ via 'createHaddockIndex'
+    haddockProjectDir          :: Flag String,
+    -- ^ output directory of combined haddocks, the default is './haddocks'
+    haddockProjectPrologue     :: Flag String,
+    haddockProjectGenIndex     :: Flag Bool,
+    haddockProjectGenContents  :: Flag Bool,
+    haddockProjectInterfaces   :: Flag [(FilePath, Maybe FilePath, Maybe FilePath, Visibility)],
+    -- ^ 'haddocksInterfaces' is inferred by the 'haddocksAction'; currently not
+    -- exposed to the user.
+
+    -- options passed to @haddock@ via 'HaddockFlags' when building
+    -- documentation
+
+    haddockProjectProgramPaths :: [(String, FilePath)],
+    haddockProjectProgramArgs  :: [(String, [String])],
+    haddockProjectHoogle       :: Flag Bool,
+    -- haddockHtml is not supported
+    haddockProjectHtmlLocation :: Flag String,
+    -- haddockForHackage is not supported
+    haddockProjectExecutables  :: Flag Bool,
+    haddockProjectTestSuites   :: Flag Bool,
+    haddockProjectBenchmarks   :: Flag Bool,
+    haddockProjectForeignLibs  :: Flag Bool,
+    haddockProjectInternal     :: Flag Bool,
+    haddockProjectCss          :: Flag FilePath,
+    haddockProjectLinkedSource :: Flag Bool,
+    haddockProjectQuickJump    :: Flag Bool,
+    haddockProjectHscolourCss  :: Flag FilePath,
+    -- haddockContent is not supported, a fixed value is provided
+    -- haddockIndex is not supported, a fixed value is provided
+    -- haddockDistPerf is not supported, note: it changes location of the haddocks
+    haddockProjectKeepTempFiles:: Flag Bool,
+    haddockProjectVerbosity    :: Flag Verbosity,
+    -- haddockBaseUrl is not supported, a fixed value is provided
+    haddockProjectLib          :: Flag String,
+    haddockProjectOutputDir    :: Flag FilePath
+  }
+  deriving (Show, Generic, Typeable)
+
+defaultHaddockProjectFlags :: HaddockProjectFlags
+defaultHaddockProjectFlags = HaddockProjectFlags {
+    haddockProjectHackage      = Flag False,
+    haddockProjectLocal        = Flag False,
+    haddockProjectDir          = Flag "./haddocks",
+    haddockProjectPrologue     = NoFlag,
+    haddockProjectGenIndex     = Flag False,
+    haddockProjectGenContents  = Flag False,
+    haddockProjectTestSuites   = Flag False,
+    haddockProjectProgramPaths = mempty,
+    haddockProjectProgramArgs  = mempty,
+    haddockProjectHoogle       = Flag False,
+    haddockProjectHtmlLocation = NoFlag,
+    haddockProjectExecutables  = Flag False,
+    haddockProjectBenchmarks   = Flag False,
+    haddockProjectForeignLibs  = Flag False,
+    haddockProjectInternal     = Flag False,
+    haddockProjectCss          = NoFlag,
+    haddockProjectLinkedSource = Flag False,
+    haddockProjectQuickJump    = Flag False,
+    haddockProjectHscolourCss  = NoFlag,
+    haddockProjectKeepTempFiles= Flag False,
+    haddockProjectVerbosity    = Flag normal,
+    haddockProjectLib          = NoFlag,
+    haddockProjectOutputDir    = NoFlag,
+    haddockProjectInterfaces   = NoFlag
+  }
+
+haddockProjectCommand :: CommandUI HaddockProjectFlags
+haddockProjectCommand = CommandUI
+  { commandName        = "v2-haddock-project"
+  , commandSynopsis    = "Generate Haddocks HTML documentation for the cabal project."
+  , commandDescription = Just $ \_ ->
+      "Require the programm haddock, version 2.26.\n"
+  , commandNotes       = Nothing
+  , commandUsage       = usageAlternatives "haddocks" $
+      [ "[FLAGS]"
+      , "COMPONENTS [FLAGS]"
+      ]
+  , commandDefaultFlags = defaultHaddockProjectFlags
+  , commandOptions      = \showOrParseArgs ->
+         haddockProjectOptions showOrParseArgs
+      ++ programDbPaths   progDb ParseArgs
+             haddockProjectProgramPaths (\v flags -> flags { haddockProjectProgramPaths = v})
+      ++ programDbOption  progDb showOrParseArgs
+             haddockProjectProgramArgs (\v fs -> fs { haddockProjectProgramArgs = v })
+      ++ programDbOptions progDb ParseArgs
+             haddockProjectProgramArgs  (\v flags -> flags { haddockProjectProgramArgs = v})
+  }
+  where
+    progDb = addKnownProgram haddockProgram
+             $ addKnownProgram ghcProgram
+             $ emptyProgramDb
+
+haddockProjectOptions :: ShowOrParseArgs -> [OptionField HaddockProjectFlags]
+haddockProjectOptions _showOrParseArgs =
+    [option "" ["hackage"]
+     (concat ["A short-cut option to build documentation linked to hackage; "
+             ,"it implies --quickjump, --gen-index, --gen-contents, "
+             ,"--hyperlinked-source and --html-location"
+             ])
+     haddockProjectHackage (\v flags -> flags { haddockProjectHackage = v })
+     trueArg
+
+    ,option "" ["local"]
+     (concat ["A short-cut option to build self contained documentation; "
+             ,"it implies  --quickjump, --gen-index, --gen-contents "
+             ,"and --hyperlinked-source."
+             ])
+     haddockProjectLocal (\v flags -> flags { haddockProjectLocal = v })
+     trueArg
+
+    ,option "" ["output"]
+      "Output directory"
+      haddockProjectDir (\v flags -> flags { haddockProjectDir = v })
+      (optArg' "DIRECTORY" maybeToFlag (fmap Just . flagToList))
+
+    ,option "" ["prologue"]
+     "File path to a prologue file in haddock format"
+     haddockProjectPrologue (\v flags -> flags { haddockProjectPrologue = v})
+     (optArg' "PATH" maybeToFlag (fmap Just . flagToList))
+
+    ,option "" ["gen-index"]
+     "Generate index"
+     haddockProjectGenIndex (\v flags -> flags { haddockProjectGenIndex = v})
+     trueArg
+
+    ,option "" ["gen-contents"]
+     "Generate contents"
+     haddockProjectGenContents (\v flags -> flags { haddockProjectGenContents = v})
+     trueArg
+
+    ,option "" ["hoogle"]
+     "Generate a hoogle database"
+     haddockProjectHoogle (\v flags -> flags { haddockProjectHoogle = v })
+     trueArg
+
+    ,option "" ["html-location"]
+     "Location of HTML documentation for pre-requisite packages"
+     haddockProjectHtmlLocation (\v flags -> flags { haddockProjectHtmlLocation = v })
+     (reqArgFlag "URL")
+
+    ,option "" ["executables"]
+     "Run haddock for Executables targets"
+     haddockProjectExecutables (\v flags -> flags { haddockProjectExecutables = v })
+     trueArg
+
+    ,option "" ["tests"]
+     "Run haddock for Test Suite targets"
+     haddockProjectTestSuites (\v flags -> flags { haddockProjectTestSuites = v })
+     trueArg
+
+    ,option "" ["benchmarks"]
+     "Run haddock for Benchmark targets"
+     haddockProjectBenchmarks (\v flags -> flags { haddockProjectBenchmarks = v })
+     trueArg
+
+    ,option "" ["foreign-libraries"]
+     "Run haddock for Foreign Library targets"
+     haddockProjectForeignLibs (\v flags -> flags { haddockProjectForeignLibs = v })
+     trueArg
+
+    ,option "" ["internal"]
+     "Run haddock for internal modules and include all symbols"
+     haddockProjectInternal (\v flags -> flags { haddockProjectInternal = v })
+     trueArg
+
+    ,option "" ["css"]
+     "Use PATH as the haddock stylesheet"
+     haddockProjectCss (\v flags -> flags { haddockProjectCss = v })
+     (reqArgFlag "PATH")
+
+    ,option "" ["hyperlink-source","hyperlink-sources","hyperlinked-source"]
+     "Hyperlink the documentation to the source code"
+     haddockProjectLinkedSource (\v flags -> flags { haddockProjectLinkedSource = v })
+     trueArg
+
+    ,option "" ["quickjump"]
+     "Generate an index for interactive documentation navigation"
+     haddockProjectQuickJump (\v flags -> flags { haddockProjectQuickJump = v })
+     trueArg
+
+    ,option "" ["hscolour-css"]
+     "Use PATH as the HsColour stylesheet"
+     haddockProjectHscolourCss (\v flags -> flags { haddockProjectHscolourCss = v })
+     (reqArgFlag "PATH")
+
+    ,option "" ["keep-temp-files"]
+     "Keep temporary files"
+     haddockProjectKeepTempFiles (\b flags -> flags { haddockProjectKeepTempFiles = b })
+     trueArg
+
+    ,optionVerbosity haddockProjectVerbosity
+     (\v flags -> flags { haddockProjectVerbosity = v })
+
+    ,option "" ["lib"]
+     "location of Haddocks static / auxiliary files"
+     haddockProjectLib (\v flags -> flags { haddockProjectLib = v})
+     (reqArgFlag "DIR")
+
+    ,option "" ["output-dir"]
+     "Generate haddock documentation into this directory. This flag is provided as a technology preview and is subject to change in the next releases."
+     haddockProjectOutputDir (\v flags -> flags { haddockProjectOutputDir = v})
+     (reqArgFlag "DIR")
+    ]
+
+
+emptyHaddockProjectFlags :: HaddockProjectFlags
+emptyHaddockProjectFlags = mempty
+
+instance Monoid HaddockProjectFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup HaddockProjectFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Hscolour.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Hscolour.hs
new file mode 100644
index 000000000..44debdad5
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Hscolour.hs
@@ -0,0 +1,130 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Hscolour
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the hscolour command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Hscolour (
+
+  HscolourFlags(..), emptyHscolourFlags, defaultHscolourFlags, hscolourCommand,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * HsColour flags
+-- ------------------------------------------------------------
+
+data HscolourFlags = HscolourFlags {
+    hscolourCSS         :: Flag FilePath,
+    hscolourExecutables :: Flag Bool,
+    hscolourTestSuites  :: Flag Bool,
+    hscolourBenchmarks  :: Flag Bool,
+    hscolourForeignLibs :: Flag Bool,
+    hscolourDistPref    :: Flag FilePath,
+    hscolourVerbosity   :: Flag Verbosity,
+    hscolourCabalFilePath :: Flag FilePath
+    }
+  deriving (Show, Generic, Typeable)
+
+emptyHscolourFlags :: HscolourFlags
+emptyHscolourFlags = mempty
+
+defaultHscolourFlags :: HscolourFlags
+defaultHscolourFlags = HscolourFlags {
+    hscolourCSS         = NoFlag,
+    hscolourExecutables = Flag False,
+    hscolourTestSuites  = Flag False,
+    hscolourBenchmarks  = Flag False,
+    hscolourDistPref    = NoFlag,
+    hscolourForeignLibs = Flag False,
+    hscolourVerbosity   = Flag normal,
+    hscolourCabalFilePath = mempty
+  }
+
+instance Monoid HscolourFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup HscolourFlags where
+  (<>) = gmappend
+
+hscolourCommand :: CommandUI HscolourFlags
+hscolourCommand = CommandUI
+  { commandName         = "hscolour"
+  , commandSynopsis     =
+      "Generate HsColour colourised code, in HTML format."
+  , commandDescription  = Just (\_ -> "Requires the hscolour program.\n")
+  , commandNotes        = Just $ \_ ->
+      "Deprecated in favour of 'cabal haddock --hyperlink-source'."
+  , commandUsage        = \pname ->
+      "Usage: " ++ pname ++ " hscolour [FLAGS]\n"
+  , commandDefaultFlags = defaultHscolourFlags
+  , commandOptions      = \showOrParseArgs ->
+      [optionVerbosity hscolourVerbosity
+       (\v flags -> flags { hscolourVerbosity = v })
+      ,optionDistPref
+         hscolourDistPref (\d flags -> flags { hscolourDistPref = d })
+         showOrParseArgs
+
+      ,option "" ["executables"]
+         "Run hscolour for Executables targets"
+         hscolourExecutables (\v flags -> flags { hscolourExecutables = v })
+         trueArg
+
+      ,option "" ["tests"]
+         "Run hscolour for Test Suite targets"
+         hscolourTestSuites (\v flags -> flags { hscolourTestSuites = v })
+         trueArg
+
+      ,option "" ["benchmarks"]
+         "Run hscolour for Benchmark targets"
+         hscolourBenchmarks (\v flags -> flags { hscolourBenchmarks = v })
+         trueArg
+
+      ,option "" ["foreign-libraries"]
+         "Run hscolour for Foreign Library targets"
+         hscolourForeignLibs (\v flags -> flags { hscolourForeignLibs = v })
+         trueArg
+
+      ,option "" ["all"]
+         "Run hscolour for all targets"
+         (\f -> allFlags [ hscolourExecutables f
+                         , hscolourTestSuites  f
+                         , hscolourBenchmarks  f
+                         , hscolourForeignLibs f
+                         ])
+         (\v flags -> flags { hscolourExecutables = v
+                            , hscolourTestSuites  = v
+                            , hscolourBenchmarks  = v
+                            , hscolourForeignLibs = v
+                            })
+         trueArg
+
+      ,option "" ["css"]
+         "Use a cascading style sheet"
+         hscolourCSS (\v flags -> flags { hscolourCSS = v })
+         (reqArgFlag "PATH")
+      ]
+  }
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Install.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Install.hs
new file mode 100644
index 000000000..546516428
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Install.hs
@@ -0,0 +1,124 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Install
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the install command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Install (
+  InstallFlags(..),  emptyInstallFlags,  defaultInstallFlags,  installCommand,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.ReadE
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Compiler
+import Distribution.Simple.Flag
+import Distribution.Simple.Utils
+import Distribution.Simple.InstallDirs
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Install flags
+-- ------------------------------------------------------------
+
+-- | Flags to @install@: (package db, verbosity)
+data InstallFlags = InstallFlags {
+    installPackageDB :: Flag PackageDB,
+    installDest      :: Flag CopyDest,
+    installDistPref  :: Flag FilePath,
+    installUseWrapper :: Flag Bool,
+    installInPlace    :: Flag Bool,
+    installVerbosity :: Flag Verbosity,
+    -- this is only here, because we can not
+    -- change the hooks API.
+    installCabalFilePath :: Flag FilePath
+  }
+  deriving (Show, Generic)
+
+defaultInstallFlags :: InstallFlags
+defaultInstallFlags  = InstallFlags {
+    installPackageDB = NoFlag,
+    installDest      = Flag NoCopyDest,
+    installDistPref  = NoFlag,
+    installUseWrapper = Flag False,
+    installInPlace    = Flag False,
+    installVerbosity = Flag normal,
+    installCabalFilePath = mempty
+  }
+
+installCommand :: CommandUI InstallFlags
+installCommand = CommandUI
+  { commandName         = "install"
+  , commandSynopsis     =
+      "Copy the files into the install locations. Run register."
+  , commandDescription  = Just $ \_ -> wrapText $
+         "Unlike the copy command, install calls the register command."
+      ++ "If you want to install into a location that is not what was"
+      ++ "specified in the configure step, use the copy command.\n"
+  , commandNotes        = Nothing
+  , commandUsage        = \pname ->
+      "Usage: " ++ pname ++ " install [FLAGS]\n"
+  , commandDefaultFlags = defaultInstallFlags
+  , commandOptions      = \showOrParseArgs -> case showOrParseArgs of
+      ShowArgs -> filter ((`notElem` ["target-package-db"])
+                          . optionName) $ installOptions ShowArgs
+      ParseArgs -> installOptions ParseArgs
+  }
+
+installOptions ::  ShowOrParseArgs -> [OptionField InstallFlags]
+installOptions showOrParseArgs =
+  [optionVerbosity installVerbosity (\v flags -> flags { installVerbosity = v })
+  ,optionDistPref
+    installDistPref (\d flags -> flags { installDistPref = d })
+    showOrParseArgs
+
+  ,option "" ["inplace"]
+    "install the package in the install subdirectory of the dist prefix, so it can be used without being installed"
+    installInPlace (\v flags -> flags { installInPlace = v })
+    trueArg
+
+  ,option "" ["shell-wrappers"]
+    "using shell script wrappers around executables"
+    installUseWrapper (\v flags -> flags { installUseWrapper = v })
+    (boolOpt [] [])
+
+  ,option "" ["package-db"] ""
+    installPackageDB (\v flags -> flags { installPackageDB = v })
+    (choiceOpt [ (Flag UserPackageDB, ([],["user"]),
+                   "upon configuration register this package in the user's local package database")
+               , (Flag GlobalPackageDB, ([],["global"]),
+                   "(default) upon configuration register this package in the system-wide package database")])
+  ,option "" ["target-package-db"]
+    "package database to install into. Required when using ${pkgroot} prefix."
+    installDest (\v flags -> flags { installDest = v })
+    (reqArg "DATABASE" (succeedReadE (Flag . CopyToDb))
+      (\f -> case f of Flag (CopyToDb p) -> [p]; _ -> []))
+  ]
+
+emptyInstallFlags :: InstallFlags
+emptyInstallFlags = mempty
+
+instance Monoid InstallFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup InstallFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Register.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Register.hs
new file mode 100644
index 000000000..2211bbc9a
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Register.hs
@@ -0,0 +1,152 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Register
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the register command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Register (
+  RegisterFlags(..), emptyRegisterFlags, defaultRegisterFlags, registerCommand,
+                                                               unregisterCommand,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Compiler
+import Distribution.Simple.Flag
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Register flags
+-- ------------------------------------------------------------
+
+-- | Flags to @register@ and @unregister@: (user package, gen-script,
+-- in-place, verbosity)
+data RegisterFlags = RegisterFlags {
+    regPackageDB   :: Flag PackageDB,
+    regGenScript   :: Flag Bool,
+    regGenPkgConf  :: Flag (Maybe FilePath),
+    regInPlace     :: Flag Bool,
+    regDistPref    :: Flag FilePath,
+    regPrintId     :: Flag Bool,
+    regVerbosity   :: Flag Verbosity,
+    -- Same as in 'buildArgs' and 'copyArgs'
+    regArgs        :: [String],
+    regCabalFilePath :: Flag FilePath
+  }
+  deriving (Show, Generic, Typeable)
+
+defaultRegisterFlags :: RegisterFlags
+defaultRegisterFlags = RegisterFlags {
+    regPackageDB   = NoFlag,
+    regGenScript   = Flag False,
+    regGenPkgConf  = NoFlag,
+    regInPlace     = Flag False,
+    regDistPref    = NoFlag,
+    regPrintId     = Flag False,
+    regArgs        = [],
+    regCabalFilePath = mempty,
+    regVerbosity   = Flag normal
+  }
+
+registerCommand :: CommandUI RegisterFlags
+registerCommand = CommandUI
+  { commandName         = "register"
+  , commandSynopsis     =
+      "Register this package with the compiler."
+  , commandDescription  = Nothing
+  , commandNotes        = Nothing
+  , commandUsage        = \pname ->
+      "Usage: " ++ pname ++ " register [FLAGS]\n"
+  , commandDefaultFlags = defaultRegisterFlags
+  , commandOptions      = \showOrParseArgs ->
+      [optionVerbosity regVerbosity (\v flags -> flags { regVerbosity = v })
+      ,optionDistPref
+         regDistPref (\d flags -> flags { regDistPref = d })
+         showOrParseArgs
+
+      ,option "" ["packageDB"] ""
+         regPackageDB (\v flags -> flags { regPackageDB = v })
+         (choiceOpt [ (Flag UserPackageDB, ([],["user"]),
+                                "upon registration, register this package in the user's local package database")
+                    , (Flag GlobalPackageDB, ([],["global"]),
+                                "(default)upon registration, register this package in the system-wide package database")])
+
+      ,option "" ["inplace"]
+         "register the package in the build location, so it can be used without being installed"
+         regInPlace (\v flags -> flags { regInPlace = v })
+         trueArg
+
+      ,option "" ["gen-script"]
+         "instead of registering, generate a script to register later"
+         regGenScript (\v flags -> flags { regGenScript = v })
+         trueArg
+
+      ,option "" ["gen-pkg-config"]
+         "instead of registering, generate a package registration file/directory"
+         regGenPkgConf (\v flags -> flags { regGenPkgConf  = v })
+         (optArg' "PKG" Flag flagToList)
+
+      ,option "" ["print-ipid"]
+         "print the installed package ID calculated for this package"
+         regPrintId (\v flags -> flags { regPrintId = v })
+         trueArg
+      ]
+  }
+
+unregisterCommand :: CommandUI RegisterFlags
+unregisterCommand = CommandUI
+  { commandName         = "unregister"
+  , commandSynopsis     =
+      "Unregister this package with the compiler."
+  , commandDescription  = Nothing
+  , commandNotes        = Nothing
+  , commandUsage        = \pname ->
+      "Usage: " ++ pname ++ " unregister [FLAGS]\n"
+  , commandDefaultFlags = defaultRegisterFlags
+  , commandOptions      = \showOrParseArgs ->
+      [optionVerbosity regVerbosity (\v flags -> flags { regVerbosity = v })
+      ,optionDistPref
+         regDistPref (\d flags -> flags { regDistPref = d })
+          showOrParseArgs
+
+      ,option "" ["user"] ""
+         regPackageDB (\v flags -> flags { regPackageDB = v })
+         (choiceOpt [ (Flag UserPackageDB, ([],["user"]),
+                              "unregister this package in the user's local package database")
+                    , (Flag GlobalPackageDB, ([],["global"]),
+                              "(default) unregister this package in the  system-wide package database")])
+
+      ,option "" ["gen-script"]
+         "Instead of performing the unregister command, generate a script to unregister later"
+         regGenScript (\v flags -> flags { regGenScript = v })
+         trueArg
+      ]
+  }
+
+emptyRegisterFlags :: RegisterFlags
+emptyRegisterFlags = mempty
+
+instance Monoid RegisterFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup RegisterFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Repl.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Repl.hs
new file mode 100644
index 000000000..c92348dff
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Repl.hs
@@ -0,0 +1,174 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.Repl
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the repl command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Repl (
+
+  ReplFlags(..),                         defaultReplFlags,     replCommand,
+  ReplOptions(..),
+  replOptions,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.ReadE
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Simple.Utils
+import Distribution.Simple.Program
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * REPL Flags
+-- ------------------------------------------------------------
+
+data ReplOptions = ReplOptions {
+    replOptionsFlags :: [String],
+    replOptionsNoLoad :: Flag Bool,
+    replOptionsFlagOutput :: Flag FilePath
+  }
+  deriving (Show, Generic, Typeable)
+
+instance Binary ReplOptions
+instance Structured ReplOptions
+
+
+instance Monoid ReplOptions where
+  mempty = ReplOptions mempty (Flag False) NoFlag
+  mappend = (<>)
+
+instance Semigroup ReplOptions where
+  (<>) = gmappend
+
+data ReplFlags = ReplFlags {
+    replProgramPaths :: [(String, FilePath)],
+    replProgramArgs :: [(String, [String])],
+    replDistPref    :: Flag FilePath,
+    replVerbosity   :: Flag Verbosity,
+    replReload      :: Flag Bool,
+    replReplOptions :: ReplOptions
+  }
+  deriving (Show, Generic, Typeable)
+
+defaultReplFlags :: ReplFlags
+defaultReplFlags  = ReplFlags {
+    replProgramPaths = mempty,
+    replProgramArgs = [],
+    replDistPref    = NoFlag,
+    replVerbosity   = Flag normal,
+    replReload      = Flag False,
+    replReplOptions = mempty
+  }
+
+instance Monoid ReplFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup ReplFlags where
+  (<>) = gmappend
+
+replCommand :: ProgramDb -> CommandUI ReplFlags
+replCommand progDb = CommandUI
+  { commandName         = "repl"
+  , commandSynopsis     =
+      "Open an interpreter session for the given component."
+  , commandDescription  = Just $ \pname -> wrapText $
+         "If the current directory contains no package, ignores COMPONENT "
+      ++ "parameters and opens an interactive interpreter session; if a "
+      ++ "sandbox is present, its package database will be used.\n"
+      ++ "\n"
+      ++ "Otherwise, (re)configures with the given or default flags, and "
+      ++ "loads the interpreter with the relevant modules. For executables, "
+      ++ "tests and benchmarks, loads the main module (and its "
+      ++ "dependencies); for libraries all exposed/other modules.\n"
+      ++ "\n"
+      ++ "The default component is the library itself, or the executable "
+      ++ "if that is the only component.\n"
+      ++ "\n"
+      ++ "Support for loading specific modules is planned but not "
+      ++ "implemented yet. For certain scenarios, `" ++ pname
+      ++ " exec -- ghci :l Foo` may be used instead. Note that `exec` will "
+      ++ "not (re)configure and you will have to specify the location of "
+      ++ "other modules, if required.\n"
+
+  , commandNotes        = Just $ \pname ->
+         "Examples:\n"
+      ++ "  " ++ pname ++ " repl           "
+      ++ "    The first component in the package\n"
+      ++ "  " ++ pname ++ " repl foo       "
+      ++ "    A named component (i.e. lib, exe, test suite)\n"
+      ++ "  " ++ pname ++ " repl --repl-options=\"-lstdc++\""
+      ++ "  Specifying flags for interpreter\n"
+--TODO: re-enable once we have support for module/file targets
+--        ++ "  " ++ pname ++ " repl Foo.Bar   "
+--        ++ "    A module\n"
+--        ++ "  " ++ pname ++ " repl Foo/Bar.hs"
+--        ++ "    A file\n\n"
+--        ++ "If a target is ambiguous it can be qualified with the component "
+--        ++ "name, e.g.\n"
+--        ++ "  " ++ pname ++ " repl foo:Foo.Bar\n"
+--        ++ "  " ++ pname ++ " repl testsuite1:Foo/Bar.hs\n"
+  , commandUsage =  \pname -> "Usage: " ++ pname ++ " repl [COMPONENT] [FLAGS]\n"
+  , commandDefaultFlags = defaultReplFlags
+  , commandOptions = \showOrParseArgs ->
+      optionVerbosity replVerbosity (\v flags -> flags { replVerbosity = v })
+      : optionDistPref
+          replDistPref (\d flags -> flags { replDistPref = d })
+          showOrParseArgs
+
+      : programDbPaths   progDb showOrParseArgs
+          replProgramPaths (\v flags -> flags { replProgramPaths = v})
+
+     ++ programDbOption progDb showOrParseArgs
+          replProgramArgs (\v flags -> flags { replProgramArgs = v})
+
+     ++ programDbOptions progDb showOrParseArgs
+          replProgramArgs (\v flags -> flags { replProgramArgs = v})
+
+     ++ case showOrParseArgs of
+          ParseArgs ->
+            [ option "" ["reload"]
+              "Used from within an interpreter to update files."
+              replReload (\v flags -> flags { replReload = v })
+              trueArg
+            ]
+          _ -> []
+     ++ map liftReplOption (replOptions showOrParseArgs)
+  }
+  where
+    liftReplOption = liftOption replReplOptions (\v flags -> flags { replReplOptions = v })
+
+replOptions :: ShowOrParseArgs -> [OptionField ReplOptions]
+replOptions _ =
+  [ option [] ["repl-no-load"]
+    "Disable loading of project modules at REPL startup."
+    replOptionsNoLoad (\p flags -> flags { replOptionsNoLoad = p })
+    trueArg
+  , option [] ["repl-options"]
+    "Use the option(s) for the repl"
+    replOptionsFlags (\p flags -> flags { replOptionsFlags = p })
+    (reqArg "FLAG" (succeedReadE words) id)
+  , option [] ["repl-multi-file"]
+    "Write repl options to this directory rather than starting repl mode"
+    replOptionsFlagOutput (\p flags -> flags { replOptionsFlagOutput = p })
+    (reqArg "DIR" (succeedReadE Flag) flagToList)
+  ]
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/SDist.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/SDist.hs
new file mode 100644
index 000000000..214c9222f
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/SDist.hs
@@ -0,0 +1,100 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Setup.SDist
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the sdist command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.SDist (
+
+  SDistFlags(..),    emptySDistFlags,    defaultSDistFlags,    sdistCommand,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * SDist flags
+-- ------------------------------------------------------------
+
+-- | Flags to @sdist@: (snapshot, verbosity)
+data SDistFlags = SDistFlags {
+    sDistSnapshot    :: Flag Bool,
+    sDistDirectory   :: Flag FilePath,
+    sDistDistPref    :: Flag FilePath,
+    sDistListSources :: Flag FilePath,
+    sDistVerbosity   :: Flag Verbosity
+  }
+  deriving (Show, Generic, Typeable)
+
+defaultSDistFlags :: SDistFlags
+defaultSDistFlags = SDistFlags {
+    sDistSnapshot    = Flag False,
+    sDistDirectory   = mempty,
+    sDistDistPref    = NoFlag,
+    sDistListSources = mempty,
+    sDistVerbosity   = Flag normal
+  }
+
+sdistCommand :: CommandUI SDistFlags
+sdistCommand = CommandUI
+  { commandName         = "sdist"
+  , commandSynopsis     =
+      "Generate a source distribution file (.tar.gz)."
+  , commandDescription  = Nothing
+  , commandNotes        = Nothing
+  , commandUsage        = \pname ->
+      "Usage: " ++ pname ++ " sdist [FLAGS]\n"
+  , commandDefaultFlags = defaultSDistFlags
+  , commandOptions      = \showOrParseArgs ->
+      [optionVerbosity sDistVerbosity (\v flags -> flags { sDistVerbosity = v })
+      ,optionDistPref
+         sDistDistPref (\d flags -> flags { sDistDistPref = d })
+         showOrParseArgs
+
+      ,option "" ["list-sources"]
+         "Just write a list of the package's sources to a file"
+         sDistListSources (\v flags -> flags { sDistListSources = v })
+         (reqArgFlag "FILE")
+
+      ,option "" ["snapshot"]
+         "Produce a snapshot source distribution"
+         sDistSnapshot (\v flags -> flags { sDistSnapshot = v })
+         trueArg
+
+      ,option "" ["output-directory"]
+       ("Generate a source distribution in the given directory, "
+        ++ "without creating a tarball")
+         sDistDirectory (\v flags -> flags { sDistDirectory = v })
+         (reqArgFlag "DIR")
+      ]
+  }
+
+emptySDistFlags :: SDistFlags
+emptySDistFlags = mempty
+
+instance Monoid SDistFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup SDistFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Test.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Test.hs
new file mode 100644
index 000000000..ec30e7418
--- /dev/null
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Setup/Test.hs
@@ -0,0 +1,190 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE DeriveGeneric #-}
+{-# LANGUAGE FlexibleContexts #-}
+{-# LANGUAGE RankNTypes #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Distribution.Simple.Test
+-- Copyright   :  Isaac Jones 2003-2004
+--                Duncan Coutts 2007
+-- License     :  BSD3
+--
+-- Maintainer  :  cabal-devel@haskell.org
+-- Portability :  portable
+--
+-- Definition of the testing command-line options.
+-- See: @Distribution.Simple.Setup@
+
+module Distribution.Simple.Setup.Test (
+
+  TestFlags(..),     emptyTestFlags,     defaultTestFlags,     testCommand,
+  TestShowDetails(..),
+  testOptions' ,
+  ) where
+
+import Prelude ()
+import Distribution.Compat.Prelude hiding (get)
+
+import Distribution.ReadE
+import Distribution.Parsec
+import Distribution.Pretty
+import qualified Distribution.Compat.CharParsing as P
+import qualified Text.PrettyPrint as Disp
+import Distribution.Simple.Command hiding (boolOpt, boolOpt')
+import Distribution.Simple.Flag
+import Distribution.Simple.Utils
+import Distribution.Simple.InstallDirs
+import Distribution.Verbosity
+
+import Distribution.Simple.Setup.Common
+
+-- ------------------------------------------------------------
+-- * Test flags
+-- ------------------------------------------------------------
+
+data TestShowDetails = Never | Failures | Always | Streaming | Direct
+    deriving (Eq, Ord, Enum, Bounded, Generic, Show, Typeable)
+
+instance Binary TestShowDetails
+instance Structured TestShowDetails
+
+knownTestShowDetails :: [TestShowDetails]
+knownTestShowDetails = [minBound..maxBound]
+
+instance Pretty TestShowDetails where
+    pretty  = Disp.text . lowercase . show
+
+instance Parsec TestShowDetails where
+    parsec = maybe (fail "invalid TestShowDetails") return . classify =<< ident
+      where
+        ident        = P.munch1 (\c -> isAlpha c || c == '_' || c == '-')
+        classify str = lookup (lowercase str) enumMap
+        enumMap     :: [(String, TestShowDetails)]
+        enumMap      = [ (prettyShow x, x)
+                       | x <- knownTestShowDetails ]
+
+--TODO: do we need this instance?
+instance Monoid TestShowDetails where
+    mempty = Never
+    mappend = (<>)
+
+instance Semigroup TestShowDetails where
+    a <> b = if a < b then b else a
+
+data TestFlags = TestFlags {
+    testDistPref    :: Flag FilePath,
+    testVerbosity   :: Flag Verbosity,
+    testHumanLog    :: Flag PathTemplate,
+    testMachineLog  :: Flag PathTemplate,
+    testShowDetails :: Flag TestShowDetails,
+    testKeepTix     :: Flag Bool,
+    testWrapper     :: Flag FilePath,
+    testFailWhenNoTestSuites :: Flag Bool,
+    -- TODO: think about if/how options are passed to test exes
+    testOptions     :: [PathTemplate]
+  } deriving (Show, Generic, Typeable)
+
+defaultTestFlags :: TestFlags
+defaultTestFlags  = TestFlags {
+    testDistPref    = NoFlag,
+    testVerbosity   = Flag normal,
+    testHumanLog    = toFlag $ toPathTemplate $ "$pkgid-$test-suite.log",
+    testMachineLog  = toFlag $ toPathTemplate $ "$pkgid.log",
+    testShowDetails = toFlag Failures,
+    testKeepTix     = toFlag False,
+    testWrapper     = NoFlag,
+    testFailWhenNoTestSuites = toFlag False,
+    testOptions     = []
+  }
+
+testCommand :: CommandUI TestFlags
+testCommand = CommandUI
+  { commandName         = "test"
+  , commandSynopsis     =
+      "Run all/specific tests in the test suite."
+  , commandDescription  = Just $ \ _pname -> wrapText $
+      testOrBenchmarkHelpText "test"
+  , commandNotes        = Nothing
+  , commandUsage        = usageAlternatives "test"
+      [ "[FLAGS]"
+      , "TESTCOMPONENTS [FLAGS]"
+      ]
+  , commandDefaultFlags = defaultTestFlags
+  , commandOptions = testOptions'
+  }
+
+testOptions' ::  ShowOrParseArgs -> [OptionField TestFlags]
+testOptions' showOrParseArgs =
+  [ optionVerbosity testVerbosity (\v flags -> flags { testVerbosity = v })
+  , optionDistPref
+        testDistPref (\d flags -> flags { testDistPref = d })
+        showOrParseArgs
+  , option [] ["log"]
+        ("Log all test suite results to file (name template can use "
+        ++ "$pkgid, $compiler, $os, $arch, $test-suite, $result)")
+        testHumanLog (\v flags -> flags { testHumanLog = v })
+        (reqArg' "TEMPLATE"
+            (toFlag . toPathTemplate)
+            (flagToList . fmap fromPathTemplate))
+  , option [] ["machine-log"]
+        ("Produce a machine-readable log file (name template can use "
+        ++ "$pkgid, $compiler, $os, $arch, $result)")
+        testMachineLog (\v flags -> flags { testMachineLog = v })
+        (reqArg' "TEMPLATE"
+            (toFlag . toPathTemplate)
+            (flagToList . fmap fromPathTemplate))
+  , option [] ["show-details"]
+        ("'always': always show results of individual test cases. "
+         ++ "'never': never show results of individual test cases. "
+         ++ "'failures': show results of failing test cases. "
+         ++ "'streaming': show results of test cases in real time."
+         ++ "'direct': send results of test cases in real time; no log file.")
+        testShowDetails (\v flags -> flags { testShowDetails = v })
+        (reqArg "FILTER"
+            (parsecToReadE (\_ -> "--show-details flag expects one of "
+                          ++ intercalate ", "
+                               (map prettyShow knownTestShowDetails))
+                        (fmap toFlag parsec))
+            (flagToList . fmap prettyShow))
+  , option [] ["keep-tix-files"]
+        "keep .tix files for HPC between test runs"
+        testKeepTix (\v flags -> flags { testKeepTix = v})
+        trueArg
+  , option [] ["test-wrapper"]
+        "Run test through a wrapper."
+        testWrapper (\v flags -> flags { testWrapper = v })
+        (reqArg' "FILE" (toFlag :: FilePath -> Flag FilePath)
+            (flagToList :: Flag FilePath -> [FilePath]))
+  , option [] ["fail-when-no-test-suites"]
+        ("Exit with failure when no test suites are found.")
+        testFailWhenNoTestSuites (\v flags -> flags { testFailWhenNoTestSuites = v})
+        trueArg
+  , option [] ["test-options"]
+        ("give extra options to test executables "
+         ++ "(name templates can use $pkgid, $compiler, "
+         ++ "$os, $arch, $test-suite)")
+        testOptions (\v flags -> flags { testOptions = v })
+        (reqArg' "TEMPLATES" (map toPathTemplate . splitArgs)
+            (const []))
+  , option [] ["test-option"]
+        ("give extra option to test executables "
+         ++ "(no need to quote options containing spaces, "
+         ++ "name template can use $pkgid, $compiler, "
+         ++ "$os, $arch, $test-suite)")
+        testOptions (\v flags -> flags { testOptions = v })
+        (reqArg' "TEMPLATE" (\x -> [toPathTemplate x])
+            (map fromPathTemplate))
+  ]
+
+emptyTestFlags :: TestFlags
+emptyTestFlags  = mempty
+
+instance Monoid TestFlags where
+  mempty = gmempty
+  mappend = (<>)
+
+instance Semigroup TestFlags where
+  (<>) = gmappend
+
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/ShowBuildInfo.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/ShowBuildInfo.hs
index 729fb6899..6cfecd8f4 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/ShowBuildInfo.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/ShowBuildInfo.hs
@@ -76,7 +76,7 @@ import Distribution.Compiler
 import Distribution.Verbosity
 import Distribution.Simple.Compiler (Compiler, showCompilerId, compilerFlavor)
 import Distribution.Simple.Program
-import Distribution.Simple.Setup
+import Distribution.Simple.Setup.Build ( BuildFlags )
 import Distribution.Simple.Utils (cabalVersion)
 import Distribution.Utils.Json
 import Distribution.Types.Component
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/SrcDist.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/SrcDist.hs
index 1cb2b8410..e3bf177ac 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/SrcDist.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/SrcDist.hs
@@ -56,7 +56,8 @@ import Distribution.Version
 import Distribution.Simple.Configure (findDistPrefOrDefault)
 import Distribution.Simple.Glob (matchDirFileGlobWithDie)
 import Distribution.Simple.Utils
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag
+import Distribution.Simple.Setup.SDist
 import Distribution.Simple.PreProcess
 import Distribution.Simple.BuildPaths
 import Distribution.Simple.Program
@@ -500,10 +501,7 @@ printPackageProblems :: Verbosity -> PackageDescription -> IO ()
 printPackageProblems verbosity pkg_descr = do
   ioChecks      <- checkPackageFiles verbosity pkg_descr "."
   let pureChecks = checkConfiguredPackage pkg_descr
-      isDistError (PackageDistSuspicious     _) = False
-      isDistError (PackageDistSuspiciousWarn _) = False
-      isDistError _                             = True
-      (errors, warnings) = partition isDistError (pureChecks ++ ioChecks)
+      (errors, warnings) = partition isHackageDistError (pureChecks ++ ioChecks)
   unless (null errors) $
       notice verbosity $ "Distribution quality errors:\n"
                       ++ unlines (map ppPackageCheck errors)
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Test.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Test.hs
index c13790fc0..90adfb385 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Test.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Test.hs
@@ -28,7 +28,8 @@ import Distribution.Simple.Hpc
 import Distribution.Simple.InstallDirs
 import qualified Distribution.Simple.LocalBuildInfo as LBI
 import qualified Distribution.Types.LocalBuildInfo as LBI
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag ( fromFlag )
+import Distribution.Simple.Setup.Test
 import Distribution.Simple.UserHooks
 import qualified Distribution.Simple.Test.ExeV10 as ExeV10
 import qualified Distribution.Simple.Test.LibV09 as LibV09
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Test/ExeV10.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Test/ExeV10.hs
index 470d68211..6d120bc58 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Test/ExeV10.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Test/ExeV10.hs
@@ -18,7 +18,8 @@ import Distribution.Simple.Hpc
 import Distribution.Simple.InstallDirs
 import qualified Distribution.Simple.LocalBuildInfo as LBI
 import qualified Distribution.Types.LocalBuildInfo as LBI
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag
+import Distribution.Simple.Setup.Test
 import Distribution.Simple.Test.Log
 import Distribution.Simple.Utils
 import Distribution.System
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Test/LibV09.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Test/LibV09.hs
index 1cf84a25e..f1cc099d6 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Test/LibV09.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Test/LibV09.hs
@@ -24,7 +24,8 @@ import Distribution.Simple.Hpc
 import Distribution.Simple.InstallDirs
 import qualified Distribution.Simple.LocalBuildInfo as LBI
 import qualified Distribution.Types.LocalBuildInfo as LBI
-import Distribution.Simple.Setup
+import Distribution.Simple.Flag ( Flag(NoFlag, Flag), fromFlag )
+import Distribution.Simple.Setup.Test
 import Distribution.Simple.Test.Log
 import Distribution.Simple.Utils
 import Distribution.System
diff --git a/libraries/Cabal/Cabal/src/Distribution/Simple/Test/Log.hs b/libraries/Cabal/Cabal/src/Distribution/Simple/Test/Log.hs
index 77939f20b..973d56f35 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Simple/Test/Log.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Simple/Test/Log.hs
@@ -23,7 +23,7 @@ import qualified Distribution.PackageDescription as PD
 import Distribution.Simple.Compiler
 import Distribution.Simple.InstallDirs
 import qualified Distribution.Simple.LocalBuildInfo as LBI
-import Distribution.Simple.Setup
+import Distribution.Simple.Setup.Test ( TestShowDetails(Always, Never) )
 import Distribution.Simple.Utils
 import Distribution.System
 import Distribution.TestSuite
diff --git a/libraries/Cabal/Cabal/src/Distribution/Types/AnnotatedId.hs b/libraries/Cabal/Cabal/src/Distribution/Types/AnnotatedId.hs
index 49a3c0f40..6719e4148 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Types/AnnotatedId.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Types/AnnotatedId.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE DeriveFunctor #-}
 module Distribution.Types.AnnotatedId (
     AnnotatedId(..)
 ) where
@@ -19,7 +20,7 @@ data AnnotatedId id = AnnotatedId {
         ann_cname :: ComponentName,
         ann_id    :: id
     }
-    deriving (Show)
+    deriving (Show, Functor)
 
 instance Eq id => Eq (AnnotatedId id) where
     x == y = ann_id x == ann_id y
@@ -29,6 +30,3 @@ instance Ord id => Ord (AnnotatedId id) where
 
 instance Package (AnnotatedId id) where
     packageId = ann_pid
-
-instance Functor AnnotatedId where
-    fmap f (AnnotatedId pid cn x) = AnnotatedId pid cn (f x)
diff --git a/libraries/Cabal/Cabal/src/Distribution/Types/LocalBuildInfo.hs b/libraries/Cabal/Cabal/src/Distribution/Types/LocalBuildInfo.hs
index bc9f6bc45..f9ed5cda3 100644
--- a/libraries/Cabal/Cabal/src/Distribution/Types/LocalBuildInfo.hs
+++ b/libraries/Cabal/Cabal/src/Distribution/Types/LocalBuildInfo.hs
@@ -67,7 +67,7 @@ import Distribution.Simple.Program
 import Distribution.PackageDescription
 import Distribution.Simple.Compiler
 import Distribution.Simple.PackageIndex
-import Distribution.Simple.Setup
+import Distribution.Simple.Setup.Config
 import Distribution.System
 import Distribution.Pretty
 
@@ -109,6 +109,9 @@ data LocalBuildInfo = LocalBuildInfo {
         componentNameMap :: Map ComponentName [ComponentLocalBuildInfo],
                 -- ^ A map from component name to all matching
                 -- components.  These coincide with 'componentGraph'
+        promisedPkgs  :: Map (PackageName, ComponentName) ComponentId,
+                -- ^ The packages we were promised, but aren't already installed.
+                -- MP: Perhaps this just needs to be a Set UnitId at this stage.
         installedPkgs :: InstalledPackageIndex,
                 -- ^ All the info about the installed packages that the
                 -- current package depends on (directly or indirectly).
diff --git a/libraries/Cabal/Makefile b/libraries/Cabal/Makefile
index bac0d30a4..9b9cd1457 100644
--- a/libraries/Cabal/Makefile
+++ b/libraries/Cabal/Makefile
@@ -57,7 +57,7 @@ $(TEMPLATE_PATHS) : templates/Paths_pkg.template.hs cabal-dev-scripts/src/GenPat
 
 buildinfo-fields-reference : phony
 	cabal build --builddir=dist-newstyle-bi --project-file=cabal.project.buildinfo buildinfo-reference-generator
-	$$(cabal-plan list-bin --builddir=dist-newstyle-bi buildinfo-reference-generator) buildinfo-reference-generator/template.zinza | tee $@
+	$$(cabal list-bin --builddir=dist-newstyle-bi buildinfo-reference-generator) buildinfo-reference-generator/template.zinza | tee $@
 
 # analyse-imports
 analyse-imports : phony
@@ -113,24 +113,22 @@ hackage-roundtrip-tests :
 	$(CABALRUN) hackage-tests -- roundtrip +RTS -s -qg -I0 -A64M -N${THREADS} -RTS ${TEST}
 
 cabal-install-test:
-	@which cabal-plan
 	$(CABALBUILD) -j3 cabal-tests cabal
 	rm -rf .ghc.environment.*
-	cd cabal-testsuite && `cabal-plan list-bin cabal-tests` --with-cabal=`cabal-plan list-bin cabal` --hide-successes -j3 ${TEST}
+	cd cabal-testsuite && `cabal list-bin cabal-tests` --with-cabal=`cabal list-bin cabal` --hide-successes -j3 ${TEST}
 
 # hackage-benchmarks (solver)
 
 hackage-benchmarks-run:
 	$(CABALBUILD) -j3 hackage-benchmark cabal
 	rm -rf .ghc.environment.*
-	$$(cabal-plan list-bin hackage-benchmark) --cabal1=cabal --cabal2=$$(cabal-plan list-bin cabal) --packages="hakyll servant-auth-server" --print-trials --concurrently
+	$$(cabal list-bin hackage-benchmark) --cabal1=cabal --cabal2=$$(cabal list-bin cabal) --packages="hakyll servant-auth-server" --print-trials --concurrently
 
 
 # This doesn't run build, as you first need to test with cabal-install-test :)
 cabal-install-test-accept:
-	@which cabal-plan
 	rm -rf .ghc.environment.*
-	cd cabal-testsuite && `cabal-plan list-bin cabal-tests` --with-cabal=`cabal-plan list-bin cabal` --hide-successes -j3 --accept ${TEST}
+	cd cabal-testsuite && `cabal list-bin cabal-tests` --with-cabal=`cabal list-bin cabal` --hide-successes -j3 --accept ${TEST}
 
 # Docker validation
 
@@ -195,7 +193,7 @@ bootstrap-json-%: phony
 	cd bootstrap && cabal v2-run -v0 cabal-bootstrap-gen -- linux-$*.plan.json \
 		| python3 -m json.tool > linux-$*.json
 
-BOOTSTRAP_GHC_VERSIONS := 8.10.7 9.0.2 9.2.6 9.4.4
+BOOTSTRAP_GHC_VERSIONS := 8.10.7 9.0.2 9.2.7 9.4.4
 
 bootstrap-jsons: $(BOOTSTRAP_GHC_VERSIONS:%=bootstrap-json-%)
 
diff --git a/libraries/Cabal/bootstrap/cabal-bootstrap-gen.cabal b/libraries/Cabal/bootstrap/cabal-bootstrap-gen.cabal
index 64c5a098f..439e80117 100644
--- a/libraries/Cabal/bootstrap/cabal-bootstrap-gen.cabal
+++ b/libraries/Cabal/bootstrap/cabal-bootstrap-gen.cabal
@@ -11,8 +11,8 @@ executable cabal-bootstrap-gen
     , aeson                  ^>=1.5.2.0  || ^>=2.0.3.0 || ^>=2.1.0.0
     , base                   ^>=4.12.0.0 || ^>=4.13.0.0 || ^>=4.14.0.0 || ^>=4.15.0.0 || ^>=4.16.0.0 || ^>=4.17.0.0
     , bytestring             ^>=0.10.8.2 || ^>=0.11.0.0
-    , Cabal                  ^>=3.2.0.0  || ^>=3.4.1.0  || ^>=3.6.3.0 || ^>=3.8.1.0 || ^>=3.10.1.0
-    , Cabal-syntax           ^>=3.8.1.0 || ^>=3.10.1.0
+    , Cabal                  ^>=3.2.0.0  || ^>=3.4.1.0  || ^>=3.6.3.0 || ^>=3.10.1.0
+    , Cabal-syntax           ^>=3.10.1.0
     , cabal-install-parsers  ^>=0.3.0.1  || ^>=0.4.5 || ^>=0.6
     , cabal-plan             ^>=0.7.0.0
     , containers             ^>=0.6.0.1
diff --git a/libraries/Cabal/bootstrap/cabal.project b/libraries/Cabal/bootstrap/cabal.project
index d1eb5750c..8d1ac11b2 100644
--- a/libraries/Cabal/bootstrap/cabal.project
+++ b/libraries/Cabal/bootstrap/cabal.project
@@ -3,3 +3,6 @@
 
 packages: .
 optimization: False
+
+allow-newer:
+  cabal-install-parsers:Cabal-syntax
diff --git a/libraries/Cabal/bootstrap/linux-8.10.7.json b/libraries/Cabal/bootstrap/linux-8.10.7.json
index d60690f20..7c753100d 100644
--- a/libraries/Cabal/bootstrap/linux-8.10.7.json
+++ b/libraries/Cabal/bootstrap/linux-8.10.7.json
@@ -102,7 +102,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
             "cabal_sha256": "49d8a7f372d35363011591b253cae4c8db8b9ec594590448e20b7bed7acaee98",
@@ -120,24 +120,24 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
-            "cabal_sha256": "e3d78b13db9512aeb106e44a334ab42b7aa48d26c097299084084cb8be5c5568",
+            "cabal_sha256": "29b28d2e19ae9f5ff92cea4ab8d2e185408ee5de73b4127f7b485a904c9a8b15",
             "flags": [
                 "-devel"
             ],
             "package": "network",
             "revision": 0,
             "source": "hackage",
-            "src_sha256": "7f7620fef1a1af3d3d6747f510e73223a5c600e7d7fd9ace073d1222bdc63d85",
-            "version": "3.1.2.7"
+            "src_sha256": "fde2d4b065f1984c76755004c64a29ae9ec52c8bf74f2485d805ef577e7c7822",
+            "version": "3.1.2.8"
         },
         {
-            "cabal_sha256": "6ca77c4e80b4e4109e30549c269631a9cc295c8fc2431ce4123972a5f80f7bfc",
+            "cabal_sha256": "e5ae7c083ef3a22248558f8451669bb1c55ea8090f5908b86b9033743c161730",
             "flags": [],
             "package": "th-compat",
-            "revision": 0,
+            "revision": 2,
             "source": "hackage",
             "src_sha256": "d8f97ac14ab47b6b8a7b0fdb4ff95426322ec56badd01652ac15da4a44d4bab8",
             "version": "0.1.4"
@@ -166,13 +166,13 @@
             "version": "4000.4.1"
         },
         {
-            "cabal_sha256": "58d5514b688ec037f53b9d60097b9d87f6b3847da68f65124987d67222c3a334",
+            "cabal_sha256": "0bdd3486d3a1bcbed0513b46af4a13ca74b395313fa5b6e0068d6b7413b76a04",
             "flags": [],
             "package": "base-orphans",
             "revision": 0,
             "source": "hackage",
-            "src_sha256": "888fd67f0dbe932778f5b170922ce80d0dcab1680ee98f1d6fcc362f20d9e447",
-            "version": "0.8.7"
+            "src_sha256": "613ed4d8241ed5a648a59ae6569a6962990bb545711d020d49fb83fa12d16e62",
+            "version": "0.9.0"
         },
         {
             "cabal_sha256": "2ef1bd3511e82ba56f7f23cd793dd2da84338a1e7c2cbea5b151417afe3baada",
@@ -184,24 +184,24 @@
             "version": "0.1.0.1"
         },
         {
-            "cabal_sha256": "02acedd7ac829b52756fe481a1d53294d8f5d42aaa56df560c62c6cec3587a14",
+            "cabal_sha256": "585792335d5541dba78fa8dfcb291a89cd5812a281825ff7a44afa296ab5d58a",
             "flags": [
                 "+integer-gmp",
                 "-random-initial-seed"
             ],
             "package": "hashable",
-            "revision": 0,
+            "revision": 1,
             "source": "hackage",
             "src_sha256": "1b4000ea82b81f69d46d0af4152c10c6303873510738e24cfc4767760d30e3f8",
             "version": "1.4.2.0"
         },
         {
-            "cabal_sha256": "2b9409023536823233ce3134558565d01b3382e651fa54ac8cb8a99967e023c9",
+            "cabal_sha256": "46367dc0c8326dcbeb7b93f200b567491c2f6029bccf822b8bb26ee660397e08",
             "flags": [
                 "-bench"
             ],
             "package": "async",
-            "revision": 2,
+            "revision": 3,
             "source": "hackage",
             "src_sha256": "484df85be0e76c4fed9376451e48e1d0c6e97952ce79735b72d54297e7e0a725",
             "version": "2.2.4"
@@ -264,7 +264,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
             "cabal_sha256": "facd0c04925ef925ec05243471fd16055229fdf51f64db1a1049de0cc6c6dfc3",
@@ -403,7 +403,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         }
     ]
 }
diff --git a/libraries/Cabal/bootstrap/linux-9.0.2.json b/libraries/Cabal/bootstrap/linux-9.0.2.json
index e0015b546..1c28ff534 100644
--- a/libraries/Cabal/bootstrap/linux-9.0.2.json
+++ b/libraries/Cabal/bootstrap/linux-9.0.2.json
@@ -102,7 +102,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
             "cabal_sha256": "49d8a7f372d35363011591b253cae4c8db8b9ec594590448e20b7bed7acaee98",
@@ -120,24 +120,24 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
-            "cabal_sha256": "e3d78b13db9512aeb106e44a334ab42b7aa48d26c097299084084cb8be5c5568",
+            "cabal_sha256": "29b28d2e19ae9f5ff92cea4ab8d2e185408ee5de73b4127f7b485a904c9a8b15",
             "flags": [
                 "-devel"
             ],
             "package": "network",
             "revision": 0,
             "source": "hackage",
-            "src_sha256": "7f7620fef1a1af3d3d6747f510e73223a5c600e7d7fd9ace073d1222bdc63d85",
-            "version": "3.1.2.7"
+            "src_sha256": "fde2d4b065f1984c76755004c64a29ae9ec52c8bf74f2485d805ef577e7c7822",
+            "version": "3.1.2.8"
         },
         {
-            "cabal_sha256": "6ca77c4e80b4e4109e30549c269631a9cc295c8fc2431ce4123972a5f80f7bfc",
+            "cabal_sha256": "e5ae7c083ef3a22248558f8451669bb1c55ea8090f5908b86b9033743c161730",
             "flags": [],
             "package": "th-compat",
-            "revision": 0,
+            "revision": 2,
             "source": "hackage",
             "src_sha256": "d8f97ac14ab47b6b8a7b0fdb4ff95426322ec56badd01652ac15da4a44d4bab8",
             "version": "0.1.4"
@@ -166,13 +166,13 @@
             "version": "4000.4.1"
         },
         {
-            "cabal_sha256": "58d5514b688ec037f53b9d60097b9d87f6b3847da68f65124987d67222c3a334",
+            "cabal_sha256": "0bdd3486d3a1bcbed0513b46af4a13ca74b395313fa5b6e0068d6b7413b76a04",
             "flags": [],
             "package": "base-orphans",
             "revision": 0,
             "source": "hackage",
-            "src_sha256": "888fd67f0dbe932778f5b170922ce80d0dcab1680ee98f1d6fcc362f20d9e447",
-            "version": "0.8.7"
+            "src_sha256": "613ed4d8241ed5a648a59ae6569a6962990bb545711d020d49fb83fa12d16e62",
+            "version": "0.9.0"
         },
         {
             "cabal_sha256": "2ef1bd3511e82ba56f7f23cd793dd2da84338a1e7c2cbea5b151417afe3baada",
@@ -184,24 +184,24 @@
             "version": "0.1.0.1"
         },
         {
-            "cabal_sha256": "02acedd7ac829b52756fe481a1d53294d8f5d42aaa56df560c62c6cec3587a14",
+            "cabal_sha256": "585792335d5541dba78fa8dfcb291a89cd5812a281825ff7a44afa296ab5d58a",
             "flags": [
                 "+integer-gmp",
                 "-random-initial-seed"
             ],
             "package": "hashable",
-            "revision": 0,
+            "revision": 1,
             "source": "hackage",
             "src_sha256": "1b4000ea82b81f69d46d0af4152c10c6303873510738e24cfc4767760d30e3f8",
             "version": "1.4.2.0"
         },
         {
-            "cabal_sha256": "2b9409023536823233ce3134558565d01b3382e651fa54ac8cb8a99967e023c9",
+            "cabal_sha256": "46367dc0c8326dcbeb7b93f200b567491c2f6029bccf822b8bb26ee660397e08",
             "flags": [
                 "-bench"
             ],
             "package": "async",
-            "revision": 2,
+            "revision": 3,
             "source": "hackage",
             "src_sha256": "484df85be0e76c4fed9376451e48e1d0c6e97952ce79735b72d54297e7e0a725",
             "version": "2.2.4"
@@ -264,7 +264,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
             "cabal_sha256": "facd0c04925ef925ec05243471fd16055229fdf51f64db1a1049de0cc6c6dfc3",
@@ -403,7 +403,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         }
     ]
 }
diff --git a/libraries/Cabal/bootstrap/linux-9.2.6.json b/libraries/Cabal/bootstrap/linux-9.2.7.json
similarity index 94%
rename from bootstrap/linux-9.2.6.json
rename to bootstrap/linux-9.2.7.json
index c1eab1720..ad75816da 100644
--- a/libraries/Cabal/bootstrap/linux-9.2.6.json
+++ b/libraries/Cabal/bootstrap/linux-9.2.7.json
@@ -26,7 +26,7 @@
         },
         {
             "package": "ghc-boot-th",
-            "version": "9.2.6"
+            "version": "9.2.7"
         },
         {
             "package": "pretty",
@@ -102,7 +102,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
             "cabal_sha256": "49d8a7f372d35363011591b253cae4c8db8b9ec594590448e20b7bed7acaee98",
@@ -120,24 +120,24 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
-            "cabal_sha256": "e3d78b13db9512aeb106e44a334ab42b7aa48d26c097299084084cb8be5c5568",
+            "cabal_sha256": "29b28d2e19ae9f5ff92cea4ab8d2e185408ee5de73b4127f7b485a904c9a8b15",
             "flags": [
                 "-devel"
             ],
             "package": "network",
             "revision": 0,
             "source": "hackage",
-            "src_sha256": "7f7620fef1a1af3d3d6747f510e73223a5c600e7d7fd9ace073d1222bdc63d85",
-            "version": "3.1.2.7"
+            "src_sha256": "fde2d4b065f1984c76755004c64a29ae9ec52c8bf74f2485d805ef577e7c7822",
+            "version": "3.1.2.8"
         },
         {
-            "cabal_sha256": "6ca77c4e80b4e4109e30549c269631a9cc295c8fc2431ce4123972a5f80f7bfc",
+            "cabal_sha256": "e5ae7c083ef3a22248558f8451669bb1c55ea8090f5908b86b9033743c161730",
             "flags": [],
             "package": "th-compat",
-            "revision": 0,
+            "revision": 2,
             "source": "hackage",
             "src_sha256": "d8f97ac14ab47b6b8a7b0fdb4ff95426322ec56badd01652ac15da4a44d4bab8",
             "version": "0.1.4"
@@ -175,24 +175,24 @@
             "version": "0.1.0.1"
         },
         {
-            "cabal_sha256": "02acedd7ac829b52756fe481a1d53294d8f5d42aaa56df560c62c6cec3587a14",
+            "cabal_sha256": "585792335d5541dba78fa8dfcb291a89cd5812a281825ff7a44afa296ab5d58a",
             "flags": [
                 "+integer-gmp",
                 "-random-initial-seed"
             ],
             "package": "hashable",
-            "revision": 0,
+            "revision": 1,
             "source": "hackage",
             "src_sha256": "1b4000ea82b81f69d46d0af4152c10c6303873510738e24cfc4767760d30e3f8",
             "version": "1.4.2.0"
         },
         {
-            "cabal_sha256": "2b9409023536823233ce3134558565d01b3382e651fa54ac8cb8a99967e023c9",
+            "cabal_sha256": "46367dc0c8326dcbeb7b93f200b567491c2f6029bccf822b8bb26ee660397e08",
             "flags": [
                 "-bench"
             ],
             "package": "async",
-            "revision": 2,
+            "revision": 3,
             "source": "hackage",
             "src_sha256": "484df85be0e76c4fed9376451e48e1d0c6e97952ce79735b72d54297e7e0a725",
             "version": "2.2.4"
@@ -255,7 +255,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
             "cabal_sha256": "facd0c04925ef925ec05243471fd16055229fdf51f64db1a1049de0cc6c6dfc3",
@@ -394,7 +394,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         }
     ]
 }
diff --git a/libraries/Cabal/bootstrap/linux-9.4.4.json b/libraries/Cabal/bootstrap/linux-9.4.4.json
index 33c80f8b8..98382c20a 100644
--- a/libraries/Cabal/bootstrap/linux-9.4.4.json
+++ b/libraries/Cabal/bootstrap/linux-9.4.4.json
@@ -101,7 +101,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
             "cabal_sha256": null,
@@ -110,24 +110,24 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
-            "cabal_sha256": "e3d78b13db9512aeb106e44a334ab42b7aa48d26c097299084084cb8be5c5568",
+            "cabal_sha256": "29b28d2e19ae9f5ff92cea4ab8d2e185408ee5de73b4127f7b485a904c9a8b15",
             "flags": [
                 "-devel"
             ],
             "package": "network",
             "revision": 0,
             "source": "hackage",
-            "src_sha256": "7f7620fef1a1af3d3d6747f510e73223a5c600e7d7fd9ace073d1222bdc63d85",
-            "version": "3.1.2.7"
+            "src_sha256": "fde2d4b065f1984c76755004c64a29ae9ec52c8bf74f2485d805ef577e7c7822",
+            "version": "3.1.2.8"
         },
         {
-            "cabal_sha256": "6ca77c4e80b4e4109e30549c269631a9cc295c8fc2431ce4123972a5f80f7bfc",
+            "cabal_sha256": "e5ae7c083ef3a22248558f8451669bb1c55ea8090f5908b86b9033743c161730",
             "flags": [],
             "package": "th-compat",
-            "revision": 0,
+            "revision": 2,
             "source": "hackage",
             "src_sha256": "d8f97ac14ab47b6b8a7b0fdb4ff95426322ec56badd01652ac15da4a44d4bab8",
             "version": "0.1.4"
@@ -156,24 +156,24 @@
             "version": "4000.4.1"
         },
         {
-            "cabal_sha256": "02acedd7ac829b52756fe481a1d53294d8f5d42aaa56df560c62c6cec3587a14",
+            "cabal_sha256": "585792335d5541dba78fa8dfcb291a89cd5812a281825ff7a44afa296ab5d58a",
             "flags": [
                 "+integer-gmp",
                 "-random-initial-seed"
             ],
             "package": "hashable",
-            "revision": 0,
+            "revision": 1,
             "source": "hackage",
             "src_sha256": "1b4000ea82b81f69d46d0af4152c10c6303873510738e24cfc4767760d30e3f8",
             "version": "1.4.2.0"
         },
         {
-            "cabal_sha256": "2b9409023536823233ce3134558565d01b3382e651fa54ac8cb8a99967e023c9",
+            "cabal_sha256": "46367dc0c8326dcbeb7b93f200b567491c2f6029bccf822b8bb26ee660397e08",
             "flags": [
                 "-bench"
             ],
             "package": "async",
-            "revision": 2,
+            "revision": 3,
             "source": "hackage",
             "src_sha256": "484df85be0e76c4fed9376451e48e1d0c6e97952ce79735b72d54297e7e0a725",
             "version": "2.2.4"
@@ -236,7 +236,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         },
         {
             "cabal_sha256": "facd0c04925ef925ec05243471fd16055229fdf51f64db1a1049de0cc6c6dfc3",
@@ -375,7 +375,7 @@
             "revision": null,
             "source": "local",
             "src_sha256": null,
-            "version": "3.10.1.0"
+            "version": "3.11.0.0"
         }
     ]
 }
diff --git a/libraries/Cabal/cabal-install-solver/cabal-install-solver.cabal b/libraries/Cabal/cabal-install-solver/cabal-install-solver.cabal
index 16a0650cb..7849e53b5 100644
--- a/libraries/Cabal/cabal-install-solver/cabal-install-solver.cabal
+++ b/libraries/Cabal/cabal-install-solver/cabal-install-solver.cabal
@@ -1,6 +1,6 @@
 cabal-version: 2.2
 name:          cabal-install-solver
-version:       3.10.1.0
+version:       3.11.0.0
 synopsis:      The command-line interface for Cabal and Hackage.
 description:
   The solver component used in cabal-install command-line program
@@ -105,10 +105,10 @@ library
 
   build-depends:
     , array         >=0.4      && <0.6
-    , base          >=4.10     && <4.18
+    , base          >=4.10     && <4.19
     , bytestring    >=0.10.6.0 && <0.12
-    , Cabal         ^>=3.10
-    , Cabal-syntax  ^>=3.10
+    , Cabal         ^>=3.11
+    , Cabal-syntax  ^>=3.11
     , containers    >=0.5.6.2  && <0.7
     , edit-distance ^>= 0.2.2
     , filepath      ^>=1.4.0.0
@@ -138,7 +138,7 @@ Test-Suite unit-tests
      UnitTests.Distribution.Solver.Modular.MessageUtils
 
    build-depends:
-     , base        >= 4.10  && <4.18
+     , base        >= 4.10  && <4.19
      , Cabal
      , Cabal-syntax
      , cabal-install-solver
diff --git a/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Modular.hs b/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Modular.hs
index c0c4f7a2d..2aac24031 100644
--- a/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Modular.hs
+++ b/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Modular.hs
@@ -60,7 +60,7 @@ import Distribution.Verbosity
 -- solver. Performs the necessary translations before and after.
 modularResolver :: SolverConfig -> DependencyResolver loc
 modularResolver sc (Platform arch os) cinfo iidx sidx pkgConfigDB pprefs pcs pns =
-  fmap (uncurry postprocess) $ -- convert install plan
+  uncurry postprocess <$> -- convert install plan
   solve' sc cinfo idx pkgConfigDB pprefs gcs pns
     where
       -- Indices have to be converted into solver-specific uniform index.
@@ -275,7 +275,7 @@ tryToMinimizeConflictSet runSolver sc cs cm =
                              ++ "conflict set: " ++ showCS cs') $
                   ExhaustiveSearch smallestKnownCS smallestKnownCM
             BackjumpLimitReached ->
-                failWith ("Reached backjump limit while minimizing conflict set.")
+                failWith "Reached backjump limit while minimizing conflict set."
                          BackjumpLimitReached
       where
         varStr = "\"" ++ showVar v ++ "\""
diff --git a/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Modular/Solver.hs b/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Modular/Solver.hs
index 467a743c1..87ce41405 100644
--- a/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Modular/Solver.hs
+++ b/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Modular/Solver.hs
@@ -67,6 +67,7 @@ data SolverConfig = SolverConfig {
   shadowPkgs             :: ShadowPkgs,
   strongFlags            :: StrongFlags,
   allowBootLibInstalls   :: AllowBootLibInstalls,
+  nonInstallablePackages :: [PackageName],
   onlyConstrained        :: OnlyConstrained,
   maxBackjumps           :: Maybe Int,
   enableBackjumping      :: EnableBackjumping,
@@ -142,7 +143,7 @@ solve sc cinfo idx pkgConfigDB userPrefs userConstraints userGoals =
     prunePhase       = (if asBool (avoidReinstalls sc) then P.avoidReinstalls (const True) else id) .
                        (if asBool (allowBootLibInstalls sc)
                         then id
-                        else P.requireInstalled (`elem` nonInstallable)) .
+                        else P.requireInstalled (`elem` nonInstallablePackages sc)) .
                        (case onlyConstrained sc of
                           OnlyConstrainedAll ->
                             P.onlyConstrained pkgIsExplicit
@@ -155,23 +156,6 @@ solve sc cinfo idx pkgConfigDB userPrefs userConstraints userGoals =
     pkgIsExplicit :: PN -> Bool
     pkgIsExplicit pn = S.member pn allExplicit
 
-    -- packages that can never be installed or upgraded
-    -- If you change this enumeration, make sure to update the list in
-    -- "Distribution.Client.Dependency" as well
-    nonInstallable :: [PackageName]
-    nonInstallable =
-        L.map mkPackageName
-             [ "base"
-             , "ghc-bignum"
-             , "ghc-prim"
-             , "ghc-boot"
-             , "ghc"
-             , "ghci"
-             , "integer-gmp"
-             , "integer-simple"
-             , "template-haskell"
-             ]
-
     -- When --reorder-goals is set, we use preferReallyEasyGoalChoices, which
     -- prefers (keeps) goals only if the have 0 or 1 enabled choice.
     --
diff --git a/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Types/ComponentDeps.hs b/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Types/ComponentDeps.hs
index 7726c3eba..892652167 100644
--- a/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Types/ComponentDeps.hs
+++ b/libraries/Cabal/cabal-install-solver/src/Distribution/Solver/Types/ComponentDeps.hs
@@ -24,6 +24,7 @@ module Distribution.Solver.Types.ComponentDeps (
   , insert
   , zip
   , filterDeps
+  , mapDeps
   , fromLibraryDeps
   , fromSetupDeps
   , fromInstalled
@@ -149,6 +150,10 @@ zip (ComponentDeps d1) (ComponentDeps d2) =
 filterDeps :: (Component -> a -> Bool) -> ComponentDeps a -> ComponentDeps a
 filterDeps p = ComponentDeps . Map.filterWithKey p . unComponentDeps
 
+-- | Keep only selected components (and their associated deps info).
+mapDeps :: (Component -> a -> b) -> ComponentDeps a -> ComponentDeps b
+mapDeps p = ComponentDeps . Map.mapWithKey p . unComponentDeps
+
 -- | ComponentDeps containing library dependencies only
 fromLibraryDeps :: a -> ComponentDeps a
 fromLibraryDeps = singleton ComponentLib
diff --git a/libraries/Cabal/cabal-install/cabal-install.cabal b/libraries/Cabal/cabal-install/cabal-install.cabal
index fed9aad89..63dc6a6e8 100644
--- a/libraries/Cabal/cabal-install/cabal-install.cabal
+++ b/libraries/Cabal/cabal-install/cabal-install.cabal
@@ -1,7 +1,7 @@
 Cabal-Version:      2.2
 
 Name:               cabal-install
-Version:            3.10.1.0
+Version:            3.11.0.0
 Synopsis:           The command-line interface for Cabal and Hackage.
 Description:
     The \'cabal\' command-line program simplifies the process of managing
@@ -46,16 +46,16 @@ common warnings
       ghc-options: -Wunused-packages
 
 common base-dep
-    build-depends: base >=4.10 && <4.18
+    build-depends: base >=4.10 && <4.19
 
 common cabal-dep
-    build-depends: Cabal ^>=3.10
+    build-depends: Cabal ^>=3.11
 
 common cabal-syntax-dep
-    build-depends: Cabal-syntax ^>=3.10
+    build-depends: Cabal-syntax ^>=3.11
 
 common cabal-install-solver-dep
-    build-depends: cabal-install-solver ^>=3.10
+    build-depends: cabal-install-solver ^>=3.11
 
 library
     import: warnings, base-dep, cabal-dep, cabal-syntax-dep, cabal-install-solver-dep
@@ -140,6 +140,7 @@ library
         Distribution.Client.InstallSymlink
         Distribution.Client.JobControl
         Distribution.Client.List
+        Distribution.Client.Main
         Distribution.Client.Manpage
         Distribution.Client.ManpageFlags
         Distribution.Client.Nix
@@ -158,6 +159,7 @@ library
         Distribution.Client.ProjectPlanning.Types
         Distribution.Client.RebuildMonad
         Distribution.Client.Reconfigure
+        Distribution.Client.ReplFlags
         Distribution.Client.Run
         Distribution.Client.Sandbox
         Distribution.Client.Sandbox.PackageEnvironment
@@ -252,7 +254,7 @@ library
 
 
 executable cabal
-    import: warnings, base-dep, cabal-dep, cabal-syntax-dep
+    import: warnings, base-dep
     main-is: Main.hs
     hs-source-dirs: main
     default-language: Haskell2010
@@ -264,9 +266,7 @@ executable cabal
         extra-libraries: bsd
 
     build-depends:
-        cabal-install,
-        directory,
-        filepath
+        cabal-install
 
 -- Small, fast running tests.
 --
diff --git a/libraries/Cabal/cabal-install/main/Main.hs b/libraries/Cabal/cabal-install/main/Main.hs
index 324fd88d8..56898bd8b 100644
--- a/libraries/Cabal/cabal-install/main/Main.hs
+++ b/libraries/Cabal/cabal-install/main/Main.hs
@@ -1,1010 +1,11 @@
-{-# LANGUAGE CPP #-}
-{-# LANGUAGE LambdaCase #-}
-{-# LANGUAGE ScopedTypeVariables #-}
-
------------------------------------------------------------------------------
--- |
--- Module      :  Main
--- Copyright   :  (c) David Himmelstrup 2005
--- License     :  BSD-like
---
--- Maintainer  :  lemmih@gmail.com
--- Stability   :  provisional
--- Portability :  portable
---
--- Entry point to the default cabal-install front-end.
------------------------------------------------------------------------------
-
 module Main (main) where
 
-import Distribution.Client.Setup
-         ( GlobalFlags(..), globalCommand, withRepoContext
-         , ConfigFlags(..)
-         , ConfigExFlags(..), defaultConfigExFlags, configureExCommand
-         , reconfigureCommand
-         , configCompilerAux', configPackageDB'
-         , BuildFlags(..)
-         , buildCommand, replCommand, testCommand, benchmarkCommand
-         , InstallFlags(..), defaultInstallFlags
-         , installCommand
-         , FetchFlags(..), fetchCommand
-         , FreezeFlags(..), freezeCommand
-         , genBoundsCommand
-         , GetFlags(..), getCommand, unpackCommand
-         , checkCommand
-         , formatCommand
-         , ListFlags(..), listCommand, listNeedsCompiler
-         , InfoFlags(..), infoCommand
-         , UploadFlags(..), uploadCommand
-         , ReportFlags(..), reportCommand
-         , runCommand
-         , InitFlags(initVerbosity, initHcPath), initCommand
-         , ActAsSetupFlags(..), actAsSetupCommand
-         , UserConfigFlags(..), userConfigCommand
-         , reportCommand
-         , manpageCommand
-         , haddockCommand
-         , cleanCommand
-         , copyCommand
-         , registerCommand
-         )
-import Distribution.Simple.Setup
-         ( HaddockTarget(..)
-         , HaddockFlags(..), defaultHaddockFlags
-         , HscolourFlags(..), hscolourCommand
-         , ReplFlags(..)
-         , CopyFlags(..)
-         , RegisterFlags(..)
-         , CleanFlags(..)
-         , TestFlags(..), BenchmarkFlags(..)
-         , Flag(..), fromFlag, fromFlagOrDefault, flagToMaybe, toFlag
-         , configAbsolutePaths
-         )
-
 import Prelude ()
-import Distribution.Client.Compat.Prelude hiding (get)
-
-import Distribution.Client.SetupWrapper
-         ( setupWrapper, SetupScriptOptions(..), defaultSetupScriptOptions )
-import Distribution.Client.Config
-         ( SavedConfig(..), loadConfig, defaultConfigFile, userConfigDiff
-         , userConfigUpdate, createDefaultConfigFile, getConfigFilePath )
-import Distribution.Client.Targets
-         ( readUserTargets )
-import qualified Distribution.Client.List as List
-         ( list, info )
-
-import qualified Distribution.Client.CmdConfigure as CmdConfigure
-import qualified Distribution.Client.CmdUpdate    as CmdUpdate
-import qualified Distribution.Client.CmdBuild     as CmdBuild
-import qualified Distribution.Client.CmdRepl      as CmdRepl
-import qualified Distribution.Client.CmdFreeze    as CmdFreeze
-import qualified Distribution.Client.CmdHaddock   as CmdHaddock
-import qualified Distribution.Client.CmdHaddockProject as CmdHaddockProject
-import qualified Distribution.Client.CmdInstall   as CmdInstall
-import qualified Distribution.Client.CmdRun       as CmdRun
-import qualified Distribution.Client.CmdTest      as CmdTest
-import qualified Distribution.Client.CmdBench     as CmdBench
-import qualified Distribution.Client.CmdExec      as CmdExec
-import qualified Distribution.Client.CmdClean     as CmdClean
-import qualified Distribution.Client.CmdSdist     as CmdSdist
-import qualified Distribution.Client.CmdListBin   as CmdListBin
-import qualified Distribution.Client.CmdOutdated  as CmdOutdated
-import           Distribution.Client.CmdLegacy
-
-import Distribution.Client.Install            (install)
-import Distribution.Client.Configure          (configure, writeConfigFlags)
-import Distribution.Client.Fetch              (fetch)
-import Distribution.Client.Freeze             (freeze)
-import Distribution.Client.GenBounds          (genBounds)
-import Distribution.Client.Check as Check     (check)
---import Distribution.Client.Clean            (clean)
-import qualified Distribution.Client.Upload as Upload
-import Distribution.Client.Run                (run, splitRunArgs)
-import Distribution.Client.Get                (get)
-import Distribution.Client.Reconfigure        (Check(..), reconfigure)
-import Distribution.Client.Nix                (nixInstantiate
-                                              ,nixShell
-                                              )
-import Distribution.Client.Sandbox            (loadConfigOrSandboxConfig
-                                              ,findSavedDistPref
-                                              ,updateInstallDirs)
-import Distribution.Client.Tar                (createTarGzFile)
-import Distribution.Client.Types.Credentials  (Password (..))
-import Distribution.Client.Init               (initCmd)
-import Distribution.Client.Manpage            (manpageCmd)
-import Distribution.Client.ManpageFlags       (ManpageFlags (..))
-import Distribution.Client.Utils
-         ( determineNumJobs, relaxEncodingErrors )
-import Distribution.Client.Signal
-         ( installTerminationHandler )
-import Distribution.Client.Version
-         ( cabalInstallVersion )
+import Distribution.Client.Compat.Prelude
 
-import Distribution.Package (packageId)
-import Distribution.PackageDescription
-         ( BuildType(..), Executable(..), buildable )
+import System.Environment (getArgs)
 
-import Distribution.PackageDescription.PrettyPrint
-         ( writeGenericPackageDescription )
-import qualified Distribution.Simple as Simple
-import qualified Distribution.Make as Make
-import qualified Distribution.Types.UnqualComponentName as Make
-import Distribution.Simple.Build
-         ( startInterpreter )
-import Distribution.Simple.Command
-         ( CommandParse(..), CommandUI(..), Command, CommandSpec(..)
-         , CommandType(..), commandsRun, commandAddAction, hiddenCommand
-         , commandFromSpec, commandShowOptions )
-import Distribution.Simple.Compiler (PackageDBStack)
-import Distribution.Simple.Configure
-         ( configCompilerAuxEx, ConfigStateFileError(..)
-         , getPersistBuildConfig, interpretPackageDbFlags
-         , tryGetPersistBuildConfig )
-import qualified Distribution.Simple.LocalBuildInfo as LBI
-import Distribution.Simple.PackageDescription ( readGenericPackageDescription )
-import Distribution.Simple.Program (defaultProgramDb
-                                   ,configureAllKnownPrograms
-                                   ,simpleProgramInvocation
-                                   ,getProgramInvocationOutput)
-import Distribution.Simple.Program.Db (reconfigurePrograms)
-import qualified Distribution.Simple.Setup as Cabal
-import Distribution.Simple.Utils
-         ( cabalVersion, die', dieNoVerbosity, info, notice, topHandler
-         , findPackageDesc, tryFindPackageDesc, createDirectoryIfMissingVerbose )
-import Distribution.Text
-         ( display )
-import Distribution.Verbosity as Verbosity
-         ( normal )
-import Distribution.Version
-         ( Version, mkVersion, orLaterVersion )
+import qualified Distribution.Client.Main as Client
 
-import Distribution.Compat.ResponseFile
-import System.Environment       (getArgs, getProgName)
-import System.FilePath          ( dropExtension, splitExtension
-                                , takeExtension, (</>), (<.>) )
-import System.IO                ( BufferMode(LineBuffering), hSetBuffering
-                                , hPutStrLn, stderr, stdout )
-import System.Directory         ( doesFileExist, getCurrentDirectory
-                                , withCurrentDirectory)
-import Data.Monoid              (Any(..))
-import Control.Exception        (AssertionFailed, assert, try)
-
-
--- | Entry point
---
 main :: IO ()
-main = do
-  installTerminationHandler
-  -- Enable line buffering so that we can get fast feedback even when piped.
-  -- This is especially important for CI and build systems.
-  hSetBuffering stdout LineBuffering
-
-  -- If the locale encoding for CLI doesn't support all Unicode characters,
-  -- printing to it may fail unless we relax the handling of encoding errors
-  -- when writing to stderr and stdout.
-  relaxEncodingErrors stdout
-  relaxEncodingErrors stderr
-  (args0, args1) <- break (== "--") <$> getArgs
-  mainWorker =<< (++ args1) <$> expandResponse args0
-
--- | Check whether assertions are enabled and print a warning in that case.
-warnIfAssertionsAreEnabled :: IO ()
-warnIfAssertionsAreEnabled =
-  assert False (return ()) `catch`
-  (\(_e :: AssertionFailed) -> hPutStrLn stderr assertionsEnabledMsg)
-    -- Andreas, 2022-12-30, issue #8654:
-    -- The verbosity machinery is not in place at this point (option -v not parsed),
-    -- so instead of using function @warn@, we print straight to stderr.
-  where
-    assertionsEnabledMsg =
-      "Warning: this is a debug build of cabal-install with assertions enabled."
-
-mainWorker :: [String] -> IO ()
-mainWorker args = do
-  topHandler $
-    case commandsRun (globalCommand commands) commands args of
-      CommandHelp   help                 -> printGlobalHelp help
-      CommandList   opts                 -> printOptionsList opts
-      CommandErrors errs                 -> printErrors errs
-      CommandReadyToGo (globalFlags, commandParse)  ->
-        case commandParse of
-          _ | fromFlagOrDefault False (globalVersion globalFlags)
-              -> printVersion
-            | fromFlagOrDefault False (globalNumericVersion globalFlags)
-              -> printNumericVersion
-          CommandHelp     help           -> printCommandHelp help
-          CommandList     opts           -> printOptionsList opts
-
-          CommandErrors   errs           -> do
-            -- Check whether cabal is called from a script, like #!/path/to/cabal.
-            case args of
-              []      -> printErrors errs
-              script : scriptArgs -> CmdRun.validScript script >>= \case
-                False -> printErrors errs
-                True  -> do
-                  -- In main operation (not help, version etc.) print warning if assertions are on.
-                  warnIfAssertionsAreEnabled
-                  CmdRun.handleShebang script scriptArgs
-
-          CommandReadyToGo action        -> do
-            -- In main operation (not help, version etc.) print warning if assertions are on.
-            warnIfAssertionsAreEnabled
-            action globalFlags
-
-  where
-    printCommandHelp help = do
-      pname <- getProgName
-      putStr (help pname)
-    printGlobalHelp help = do
-      pname <- getProgName
-      configFile <- defaultConfigFile
-      putStr (help pname)
-      putStr $ "\nYou can edit the cabal configuration file to set defaults:\n"
-            ++ "  " ++ configFile ++ "\n"
-      exists <- doesFileExist configFile
-      unless exists $
-          putStrLn $ "This file will be generated with sensible "
-                  ++ "defaults if you run 'cabal update'."
-    printOptionsList = putStr . unlines
-    printErrors errs = dieNoVerbosity $ intercalate "\n" errs
-    printNumericVersion = putStrLn $ display cabalInstallVersion
-    printVersion        = putStrLn $ "cabal-install version "
-                                  ++ display cabalInstallVersion
-                                  ++ "\ncompiled using version "
-                                  ++ display cabalVersion
-                                  ++ " of the Cabal library "
-
-    commands = map commandFromSpec commandSpecs
-    commandSpecs =
-      [ regularCmd listCommand listAction
-      , regularCmd infoCommand infoAction
-      , regularCmd fetchCommand fetchAction
-      , regularCmd getCommand getAction
-      , regularCmd unpackCommand unpackAction
-      , regularCmd checkCommand checkAction
-      , regularCmd uploadCommand uploadAction
-      , regularCmd reportCommand reportAction
-      , regularCmd initCommand initAction
-      , regularCmd userConfigCommand userConfigAction
-      , regularCmd genBoundsCommand genBoundsAction
-      , regularCmd CmdOutdated.outdatedCommand CmdOutdated.outdatedAction
-      , wrapperCmd hscolourCommand hscolourVerbosity hscolourDistPref
-      , hiddenCmd  formatCommand formatAction
-      , hiddenCmd  actAsSetupCommand actAsSetupAction
-      , hiddenCmd  manpageCommand (manpageAction commandSpecs)
-      , regularCmd CmdListBin.listbinCommand     CmdListBin.listbinAction
-
-      ] ++ concat
-      [ newCmd  CmdConfigure.configureCommand CmdConfigure.configureAction
-      , newCmd  CmdUpdate.updateCommand       CmdUpdate.updateAction
-      , newCmd  CmdBuild.buildCommand         CmdBuild.buildAction
-      , newCmd  CmdRepl.replCommand           CmdRepl.replAction
-      , newCmd  CmdFreeze.freezeCommand       CmdFreeze.freezeAction
-      , newCmd  CmdHaddock.haddockCommand     CmdHaddock.haddockAction
-      , newCmd  CmdHaddockProject.haddockProjectCommand
-                                              CmdHaddockProject.haddockProjectAction
-      , newCmd  CmdInstall.installCommand     CmdInstall.installAction
-      , newCmd  CmdRun.runCommand             CmdRun.runAction
-      , newCmd  CmdTest.testCommand           CmdTest.testAction
-      , newCmd  CmdBench.benchCommand         CmdBench.benchAction
-      , newCmd  CmdExec.execCommand           CmdExec.execAction
-      , newCmd  CmdClean.cleanCommand         CmdClean.cleanAction
-      , newCmd  CmdSdist.sdistCommand         CmdSdist.sdistAction
-
-      , legacyCmd configureExCommand configureAction
-      , legacyCmd buildCommand buildAction
-      , legacyCmd replCommand replAction
-      , legacyCmd freezeCommand freezeAction
-      , legacyCmd haddockCommand haddockAction
-      , legacyCmd installCommand installAction
-      , legacyCmd runCommand runAction
-      , legacyCmd testCommand testAction
-      , legacyCmd benchmarkCommand benchmarkAction
-      , legacyCmd cleanCommand cleanAction
-      , legacyWrapperCmd copyCommand copyVerbosity copyDistPref
-      , legacyWrapperCmd registerCommand regVerbosity regDistPref
-      , legacyCmd reconfigureCommand reconfigureAction
-      ]
-
-type Action = GlobalFlags -> IO ()
-
--- Duplicated in Distribution.Client.CmdLegacy. Any changes must be
--- reflected there, as well.
-regularCmd :: CommandUI flags -> (flags -> [String] -> action)
-           -> CommandSpec action
-regularCmd ui action =
-  CommandSpec ui ((flip commandAddAction) action) NormalCommand
-
-hiddenCmd :: CommandUI flags -> (flags -> [String] -> action)
-          -> CommandSpec action
-hiddenCmd ui action =
-  CommandSpec ui (\ui' -> hiddenCommand (commandAddAction ui' action))
-  HiddenCommand
-
-wrapperCmd :: Monoid flags => CommandUI flags -> (flags -> Flag Verbosity)
-           -> (flags -> Flag String) -> CommandSpec Action
-wrapperCmd ui verbosity distPref =
-  CommandSpec ui (\ui' -> wrapperAction ui' verbosity distPref) NormalCommand
-
-wrapperAction :: Monoid flags
-              => CommandUI flags
-              -> (flags -> Flag Verbosity)
-              -> (flags -> Flag String)
-              -> Command Action
-wrapperAction command verbosityFlag distPrefFlag =
-  commandAddAction command
-    { commandDefaultFlags = mempty } $ \flags extraArgs globalFlags -> do
-    let verbosity = fromFlagOrDefault normal (verbosityFlag flags)
-    load <- try (loadConfigOrSandboxConfig verbosity globalFlags)
-    let config = either (\(SomeException _) -> mempty) id load
-    distPref <- findSavedDistPref config (distPrefFlag flags)
-    let setupScriptOptions = defaultSetupScriptOptions { useDistPref = distPref }
-    setupWrapper verbosity setupScriptOptions Nothing
-                 command (const flags) (const extraArgs)
-
-configureAction :: (ConfigFlags, ConfigExFlags)
-                -> [String] -> Action
-configureAction (configFlags, configExFlags) extraArgs globalFlags = do
-  let verbosity = fromFlagOrDefault normal (configVerbosity configFlags)
-  config <- updateInstallDirs (configUserInstall configFlags)
-                          <$> loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config (configDistPref configFlags)
-  nixInstantiate verbosity distPref True globalFlags config
-  nixShell verbosity distPref globalFlags config $ do
-    let configFlags'   = savedConfigureFlags   config `mappend` configFlags
-        configExFlags' = savedConfigureExFlags config `mappend` configExFlags
-        globalFlags'   = savedGlobalFlags      config `mappend` globalFlags
-    (comp, platform, progdb) <- configCompilerAuxEx configFlags'
-
-    writeConfigFlags verbosity distPref (configFlags', configExFlags')
-
-    -- What package database(s) to use
-    let packageDBs :: PackageDBStack
-        packageDBs
-          = interpretPackageDbFlags
-            (fromFlag (configUserInstall configFlags'))
-            (configPackageDBs configFlags')
-
-    withRepoContext verbosity globalFlags' $ \repoContext ->
-        configure verbosity packageDBs repoContext
-                  comp platform progdb configFlags' configExFlags' extraArgs
-
-reconfigureAction :: (ConfigFlags, ConfigExFlags)
-                  -> [String] -> Action
-reconfigureAction flags@(configFlags, _) _ globalFlags = do
-  let verbosity = fromFlagOrDefault normal (configVerbosity configFlags)
-  config <- updateInstallDirs (configUserInstall configFlags)
-                          <$> loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config (configDistPref configFlags)
-  let checkFlags = Check $ \_ saved -> do
-        let flags' = saved <> flags
-        unless (saved == flags') $ info verbosity message
-        pure (Any True, flags')
-        where
-          -- This message is correct, but not very specific: it will list all
-          -- of the new flags, even if some have not actually changed. The
-          -- *minimal* set of changes is more difficult to determine.
-          message =
-            "flags changed: "
-            ++ unwords (commandShowOptions configureExCommand flags)
-  nixInstantiate verbosity distPref True globalFlags config
-  _ <-
-    reconfigure configureAction
-    verbosity distPref NoFlag
-    checkFlags [] globalFlags config
-  pure ()
-
-buildAction :: BuildFlags -> [String] -> Action
-buildAction buildFlags extraArgs globalFlags = do
-  let verbosity = fromFlagOrDefault normal (buildVerbosity buildFlags)
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config (buildDistPref buildFlags)
-  -- Calls 'configureAction' to do the real work, so nothing special has to be
-  -- done to support sandboxes.
-  config' <-
-    reconfigure configureAction
-    verbosity distPref (buildNumJobs buildFlags)
-    mempty [] globalFlags config
-  nixShell verbosity distPref globalFlags config $ do
-    build verbosity config' distPref buildFlags extraArgs
-
-
--- | Actually do the work of building the package. This is separate from
--- 'buildAction' so that 'testAction' and 'benchmarkAction' do not invoke
--- 'reconfigure' twice.
-build :: Verbosity -> SavedConfig -> FilePath -> BuildFlags -> [String] -> IO ()
-build verbosity config distPref buildFlags extraArgs =
-  setupWrapper verbosity setupOptions Nothing
-               (Cabal.buildCommand progDb) mkBuildFlags (const extraArgs)
-  where
-    progDb       = defaultProgramDb
-    setupOptions = defaultSetupScriptOptions { useDistPref = distPref }
-
-    mkBuildFlags version = filterBuildFlags version config buildFlags'
-    buildFlags' = buildFlags
-      { buildVerbosity = toFlag verbosity
-      , buildDistPref  = toFlag distPref
-      }
-
--- | Make sure that we don't pass new flags to setup scripts compiled against
--- old versions of Cabal.
-filterBuildFlags :: Version -> SavedConfig -> BuildFlags -> BuildFlags
-filterBuildFlags version config buildFlags
-  | version >= mkVersion [1,19,1] = buildFlags_latest
-  -- Cabal < 1.19.1 doesn't support 'build -j'.
-  | otherwise                      = buildFlags_pre_1_19_1
-  where
-    buildFlags_pre_1_19_1 = buildFlags {
-      buildNumJobs = NoFlag
-      }
-    buildFlags_latest     = buildFlags {
-      -- Take the 'jobs' setting config file into account.
-      buildNumJobs = Flag . Just . determineNumJobs $
-                     (numJobsConfigFlag `mappend` numJobsCmdLineFlag)
-      }
-    numJobsConfigFlag  = installNumJobs . savedInstallFlags $ config
-    numJobsCmdLineFlag = buildNumJobs buildFlags
-
-
-replAction :: ReplFlags -> [String] -> Action
-replAction replFlags extraArgs globalFlags = do
-  let verbosity = fromFlagOrDefault normal (replVerbosity replFlags)
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config (replDistPref replFlags)
-  cwd     <- getCurrentDirectory
-  pkgDesc <- findPackageDesc cwd
-  let
-    -- There is a .cabal file in the current directory: start a REPL and load
-    -- the project's modules.
-    onPkgDesc = do
-      -- Calls 'configureAction' to do the real work, so nothing special has to
-      -- be done to support sandboxes.
-      _ <-
-        reconfigure configureAction
-        verbosity distPref NoFlag
-        mempty [] globalFlags config
-      let progDb = defaultProgramDb
-          setupOptions = defaultSetupScriptOptions
-            { useCabalVersion = orLaterVersion $ mkVersion [1,18,0]
-            , useDistPref     = distPref
-            }
-          replFlags'   = replFlags
-            { replVerbosity = toFlag verbosity
-            , replDistPref  = toFlag distPref
-            }
-
-      nixShell verbosity distPref globalFlags config $
-        setupWrapper verbosity setupOptions Nothing (Cabal.replCommand progDb) (const replFlags') (const extraArgs)
-
-    -- No .cabal file in the current directory: just start the REPL (possibly
-    -- using the sandbox package DB).
-    onNoPkgDesc = do
-      let configFlags = savedConfigureFlags config
-      (comp, platform, programDb) <- configCompilerAux' configFlags
-      programDb' <- reconfigurePrograms verbosity
-                                        (replProgramPaths replFlags)
-                                        (replProgramArgs replFlags)
-                                        programDb
-      nixShell verbosity distPref globalFlags config $ do
-        startInterpreter verbosity programDb' comp platform
-                        (configPackageDB' configFlags)
-
-  either (const onNoPkgDesc) (const onPkgDesc) pkgDesc
-
-installAction :: ( ConfigFlags, ConfigExFlags, InstallFlags
-                 , HaddockFlags, TestFlags, BenchmarkFlags )
-              -> [String] -> Action
-installAction (configFlags, _, installFlags, _, _, _) _ globalFlags
-  | fromFlagOrDefault False (installOnly installFlags) = do
-      let verb = fromFlagOrDefault normal (configVerbosity configFlags)
-      config <- loadConfigOrSandboxConfig verb globalFlags
-      dist <- findSavedDistPref config (configDistPref configFlags)
-      let setupOpts = defaultSetupScriptOptions { useDistPref = dist }
-      setupWrapper
-        verb setupOpts Nothing
-        installCommand (const (mempty, mempty, mempty, mempty, mempty, mempty))
-                       (const [])
-
-installAction
-  ( configFlags, configExFlags, installFlags
-  , haddockFlags, testFlags, benchmarkFlags )
-  extraArgs globalFlags = do
-  let verb = fromFlagOrDefault normal (configVerbosity configFlags)
-  config <- updateInstallDirs (configUserInstall configFlags)
-                          <$> loadConfigOrSandboxConfig verb globalFlags
-
-  dist <- findSavedDistPref config (configDistPref configFlags)
-
-  do
-    targets <- readUserTargets verb extraArgs
-
-    let configFlags'    = maybeForceTests installFlags' $
-                          savedConfigureFlags   config `mappend`
-                          configFlags { configDistPref = toFlag dist }
-        configExFlags'  = defaultConfigExFlags         `mappend`
-                          savedConfigureExFlags config `mappend` configExFlags
-        installFlags'   = defaultInstallFlags          `mappend`
-                          savedInstallFlags     config `mappend` installFlags
-        haddockFlags'   = defaultHaddockFlags          `mappend`
-                          savedHaddockFlags     config `mappend`
-                          haddockFlags { haddockDistPref = toFlag dist }
-        testFlags'      = Cabal.defaultTestFlags       `mappend`
-                          savedTestFlags        config `mappend`
-                          testFlags { testDistPref = toFlag dist }
-        benchmarkFlags' = Cabal.defaultBenchmarkFlags  `mappend`
-                          savedBenchmarkFlags   config `mappend`
-                          benchmarkFlags { benchmarkDistPref = toFlag dist }
-        globalFlags'    = savedGlobalFlags      config `mappend` globalFlags
-    (comp, platform, progdb) <- configCompilerAux' configFlags'
-
-    -- TODO: Redesign ProgramDB API to prevent such problems as #2241 in the
-    -- future.
-    progdb' <- configureAllKnownPrograms verb progdb
-
-    configFlags'' <- configAbsolutePaths configFlags'
-
-    withRepoContext verb globalFlags' $ \repoContext ->
-        install verb
-                (configPackageDB' configFlags'')
-                repoContext
-                comp platform progdb'
-                globalFlags' configFlags'' configExFlags'
-                installFlags' haddockFlags' testFlags' benchmarkFlags'
-                targets
-
-      where
-        -- '--run-tests' implies '--enable-tests'.
-        maybeForceTests installFlags' configFlags' =
-          if fromFlagOrDefault False (installRunTests installFlags')
-          then configFlags' { configTests = toFlag True }
-          else configFlags'
-
-testAction :: (BuildFlags, TestFlags) -> [String] -> GlobalFlags
-           -> IO ()
-testAction (buildFlags, testFlags) extraArgs globalFlags = do
-  let verbosity      = fromFlagOrDefault normal (buildVerbosity buildFlags)
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config (testDistPref testFlags)
-  let buildFlags'    = buildFlags
-                      { buildVerbosity = testVerbosity testFlags }
-      checkFlags = Check $ \_ flags@(configFlags, configExFlags) ->
-        if fromFlagOrDefault False (configTests configFlags)
-          then pure (mempty, flags)
-          else do
-            info verbosity "reconfiguring to enable tests"
-            let flags' = ( configFlags { configTests = toFlag True }
-                        , configExFlags
-                        )
-            pure (Any True, flags')
-
-  _ <-
-    reconfigure configureAction
-    verbosity distPref (buildNumJobs buildFlags')
-    checkFlags [] globalFlags config
-  nixShell verbosity distPref globalFlags config $ do
-    let setupOptions   = defaultSetupScriptOptions { useDistPref = distPref }
-        testFlags'     = testFlags { testDistPref = toFlag distPref }
-
-    -- The package was just configured, so the LBI must be available.
-    names <- componentNamesFromLBI verbosity distPref "test suites"
-              (\c -> case c of { LBI.CTest{} -> True; _ -> False })
-    let extraArgs'
-          | null extraArgs = case names of
-            ComponentNamesUnknown -> []
-            ComponentNames names' -> [ Make.unUnqualComponentName name
-                                    | LBI.CTestName name <- names' ]
-          | otherwise      = extraArgs
-
-    build verbosity config distPref buildFlags' extraArgs'
-    setupWrapper verbosity setupOptions Nothing Cabal.testCommand (const testFlags') (const extraArgs')
-
-data ComponentNames = ComponentNamesUnknown
-                    | ComponentNames [LBI.ComponentName]
-
--- | Return the names of all buildable components matching a given predicate.
-componentNamesFromLBI :: Verbosity -> FilePath -> String
-                         -> (LBI.Component -> Bool)
-                         -> IO ComponentNames
-componentNamesFromLBI verbosity distPref targetsDescr compPred = do
-  eLBI <- tryGetPersistBuildConfig distPref
-  case eLBI of
-    Left err -> case err of
-      -- Note: the build config could have been generated by a custom setup
-      -- script built against a different Cabal version, so it's crucial that
-      -- we ignore the bad version error here.
-      ConfigStateFileBadVersion _ _ _ -> return ComponentNamesUnknown
-      _                               -> die' verbosity (show err)
-    Right lbi -> do
-      let pkgDescr = LBI.localPkgDescr lbi
-          names    = map LBI.componentName
-                     . filter (buildable . LBI.componentBuildInfo)
-                     . filter compPred $
-                     LBI.pkgComponents pkgDescr
-      if null names
-        then do notice verbosity $ "Package has no buildable "
-                  ++ targetsDescr ++ "."
-                exitSuccess -- See #3215.
-
-        else return $! (ComponentNames names)
-
-benchmarkAction :: (BuildFlags, BenchmarkFlags)
-                   -> [String] -> GlobalFlags
-                   -> IO ()
-benchmarkAction
-  (buildFlags, benchmarkFlags)
-  extraArgs globalFlags = do
-  let verbosity      = fromFlagOrDefault normal
-                       (buildVerbosity buildFlags)
-
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config (benchmarkDistPref benchmarkFlags)
-  let buildFlags'    = buildFlags
-                      { buildVerbosity = benchmarkVerbosity benchmarkFlags }
-
-  let checkFlags = Check $ \_ flags@(configFlags, configExFlags) ->
-        if fromFlagOrDefault False (configBenchmarks configFlags)
-          then pure (mempty, flags)
-          else do
-            info verbosity "reconfiguring to enable benchmarks"
-            let flags' = ( configFlags { configBenchmarks = toFlag True }
-                        , configExFlags
-                        )
-            pure (Any True, flags')
-
-  config' <-
-    reconfigure configureAction
-    verbosity distPref (buildNumJobs buildFlags')
-    checkFlags [] globalFlags config
-  nixShell verbosity distPref globalFlags config $ do
-    let setupOptions   = defaultSetupScriptOptions { useDistPref = distPref }
-        benchmarkFlags'= benchmarkFlags { benchmarkDistPref = toFlag distPref }
-
-    -- The package was just configured, so the LBI must be available.
-    names <- componentNamesFromLBI verbosity distPref "benchmarks"
-            (\c -> case c of { LBI.CBench{} -> True; _ -> False; })
-    let extraArgs'
-          | null extraArgs = case names of
-            ComponentNamesUnknown -> []
-            ComponentNames names' -> [ Make.unUnqualComponentName name
-                                    | LBI.CBenchName name <- names']
-          | otherwise      = extraArgs
-
-    build verbosity config' distPref buildFlags' extraArgs'
-    setupWrapper verbosity setupOptions Nothing Cabal.benchmarkCommand (const benchmarkFlags') (const extraArgs')
-
-haddockAction :: HaddockFlags -> [String] -> Action
-haddockAction haddockFlags extraArgs globalFlags = do
-  let verbosity = fromFlag (haddockVerbosity haddockFlags)
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config (haddockDistPref haddockFlags)
-  config' <-
-    reconfigure configureAction
-    verbosity distPref NoFlag
-    mempty [] globalFlags config
-  nixShell verbosity distPref globalFlags config $ do
-    let haddockFlags' = defaultHaddockFlags      `mappend`
-                        savedHaddockFlags config' `mappend`
-                        haddockFlags { haddockDistPref = toFlag distPref }
-        setupScriptOptions = defaultSetupScriptOptions
-                             { useDistPref = distPref }
-    setupWrapper verbosity setupScriptOptions Nothing
-      haddockCommand (const haddockFlags') (const extraArgs)
-    when (haddockForHackage haddockFlags == Flag ForHackage) $ do
-      pkg <- fmap LBI.localPkgDescr (getPersistBuildConfig distPref)
-      let dest = distPref </> name <.> "tar.gz"
-          name = display (packageId pkg) ++ "-docs"
-          docDir = distPref </> "doc" </> "html"
-      createTarGzFile dest docDir name
-      notice verbosity $ "Documentation tarball created: " ++ dest
-
-cleanAction :: CleanFlags -> [String] -> Action
-cleanAction cleanFlags extraArgs globalFlags = do
-  load <- try (loadConfigOrSandboxConfig verbosity globalFlags)
-  let config = either (\(SomeException _) -> mempty) id load
-  distPref <- findSavedDistPref config (cleanDistPref cleanFlags)
-  let setupScriptOptions = defaultSetupScriptOptions
-                           { useDistPref = distPref
-                           , useWin32CleanHack = True
-                           }
-      cleanFlags' = cleanFlags { cleanDistPref = toFlag distPref }
-  setupWrapper verbosity setupScriptOptions Nothing
-               cleanCommand (const cleanFlags') (const extraArgs)
-  where
-    verbosity = fromFlagOrDefault normal (cleanVerbosity cleanFlags)
-
-listAction :: ListFlags -> [String] -> Action
-listAction listFlags extraArgs globalFlags = do
-  let verbosity = fromFlag (listVerbosity listFlags)
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  let configFlags' = savedConfigureFlags config
-      configFlags  = configFlags'
-        { configPackageDBs = configPackageDBs configFlags'
-                           `mappend` listPackageDBs listFlags
-        , configHcPath     = listHcPath listFlags
-        }
-      globalFlags' = savedGlobalFlags    config `mappend` globalFlags
-  compProgdb <- if listNeedsCompiler listFlags
-      then do
-          (comp, _, progdb) <- configCompilerAux' configFlags
-          return (Just (comp, progdb))
-      else return Nothing
-  withRepoContext verbosity globalFlags' $ \repoContext ->
-    List.list verbosity
-       (configPackageDB' configFlags)
-       repoContext
-       compProgdb
-       listFlags
-       extraArgs
-
-infoAction :: InfoFlags -> [String] -> Action
-infoAction infoFlags extraArgs globalFlags = do
-  let verbosity = fromFlag (infoVerbosity infoFlags)
-  targets <- readUserTargets verbosity extraArgs
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  let configFlags' = savedConfigureFlags config
-      configFlags  = configFlags' {
-        configPackageDBs = configPackageDBs configFlags'
-                           `mappend` infoPackageDBs infoFlags
-        }
-      globalFlags' = savedGlobalFlags    config `mappend` globalFlags
-  (comp, _, progdb) <- configCompilerAuxEx configFlags
-  withRepoContext verbosity globalFlags' $ \repoContext ->
-    List.info verbosity
-       (configPackageDB' configFlags)
-       repoContext
-       comp
-       progdb
-       globalFlags'
-       infoFlags
-       targets
-
-fetchAction :: FetchFlags -> [String] -> Action
-fetchAction fetchFlags extraArgs globalFlags = do
-  let verbosity = fromFlag (fetchVerbosity fetchFlags)
-  targets <- readUserTargets verbosity extraArgs
-  config <- loadConfig verbosity (globalConfigFile globalFlags)
-  let configFlags  = savedConfigureFlags config
-      globalFlags' = savedGlobalFlags config `mappend` globalFlags
-  (comp, platform, progdb) <- configCompilerAux' configFlags
-  withRepoContext verbosity globalFlags' $ \repoContext ->
-    fetch verbosity
-        (configPackageDB' configFlags)
-        repoContext
-        comp platform progdb globalFlags' fetchFlags
-        targets
-
-freezeAction :: FreezeFlags -> [String] -> Action
-freezeAction freezeFlags _extraArgs globalFlags = do
-  let verbosity = fromFlag (freezeVerbosity freezeFlags)
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config NoFlag
-  nixShell verbosity distPref globalFlags config $ do
-    let configFlags  = savedConfigureFlags config
-        globalFlags' = savedGlobalFlags config `mappend` globalFlags
-    (comp, platform, progdb) <- configCompilerAux' configFlags
-
-    withRepoContext verbosity globalFlags' $ \repoContext ->
-        freeze verbosity
-            (configPackageDB' configFlags)
-            repoContext
-            comp platform progdb
-            globalFlags' freezeFlags
-
-genBoundsAction :: FreezeFlags -> [String] -> GlobalFlags -> IO ()
-genBoundsAction freezeFlags _extraArgs globalFlags = do
-  let verbosity = fromFlag (freezeVerbosity freezeFlags)
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config NoFlag
-  nixShell verbosity distPref globalFlags config $ do
-    let configFlags  = savedConfigureFlags config
-        globalFlags' = savedGlobalFlags config `mappend` globalFlags
-    (comp, platform, progdb) <- configCompilerAux' configFlags
-
-    withRepoContext verbosity globalFlags' $ \repoContext ->
-        genBounds verbosity
-                (configPackageDB' configFlags)
-                repoContext
-                comp platform progdb
-                globalFlags' freezeFlags
-
-uploadAction :: UploadFlags -> [String] -> Action
-uploadAction uploadFlags extraArgs globalFlags = do
-  config <- loadConfig verbosity (globalConfigFile globalFlags)
-  let uploadFlags' = savedUploadFlags config `mappend` uploadFlags
-      globalFlags' = savedGlobalFlags config `mappend` globalFlags
-      tarfiles     = extraArgs
-  when (null tarfiles && not (fromFlag (uploadDoc uploadFlags'))) $
-    die' verbosity "the 'upload' command expects at least one .tar.gz archive."
-  checkTarFiles extraArgs
-  maybe_password <-
-    case uploadPasswordCmd uploadFlags'
-    of Flag (xs:xss) -> Just . Password <$>
-                        getProgramInvocationOutput verbosity
-                        (simpleProgramInvocation xs xss)
-       _             -> pure $ flagToMaybe $ uploadPassword uploadFlags'
-  withRepoContext verbosity globalFlags' $ \repoContext -> do
-    if fromFlag (uploadDoc uploadFlags')
-    then do
-      when (length tarfiles > 1) $
-       die' verbosity $ "the 'upload' command can only upload documentation "
-             ++ "for one package at a time."
-      tarfile <- maybe (generateDocTarball config) return $ listToMaybe tarfiles
-      Upload.uploadDoc verbosity
-                       repoContext
-                       (flagToMaybe $ uploadUsername uploadFlags')
-                       maybe_password
-                       (fromFlag (uploadCandidate uploadFlags'))
-                       tarfile
-    else do
-      Upload.upload verbosity
-                    repoContext
-                    (flagToMaybe $ uploadUsername uploadFlags')
-                    maybe_password
-                    (fromFlag (uploadCandidate uploadFlags'))
-                    tarfiles
-    where
-    verbosity = fromFlag (uploadVerbosity uploadFlags)
-    checkTarFiles tarfiles
-      | not (null otherFiles)
-      = die' verbosity $ "the 'upload' command expects only .tar.gz archives: "
-           ++ intercalate ", " otherFiles
-      | otherwise = sequence_
-                      [ do exists <- doesFileExist tarfile
-                           unless exists $ die' verbosity $ "file not found: " ++ tarfile
-                      | tarfile <- tarfiles ]
-
-      where otherFiles = filter (not . isTarGzFile) tarfiles
-            isTarGzFile file = case splitExtension file of
-              (file', ".gz") -> takeExtension file' == ".tar"
-              _              -> False
-    generateDocTarball config = do
-      notice verbosity $
-        "No documentation tarball specified. "
-        ++ "Building a documentation tarball with default settings...\n"
-        ++ "If you need to customise Haddock options, "
-        ++ "run 'haddock --for-hackage' first "
-        ++ "to generate a documentation tarball."
-      haddockAction (defaultHaddockFlags { haddockForHackage = Flag ForHackage })
-                    [] globalFlags
-      distPref <- findSavedDistPref config NoFlag
-      pkg <- fmap LBI.localPkgDescr (getPersistBuildConfig distPref)
-      return $ distPref </> display (packageId pkg) ++ "-docs" <.> "tar.gz"
-
-checkAction :: Flag Verbosity -> [String] -> Action
-checkAction verbosityFlag extraArgs _globalFlags = do
-  let verbosity = fromFlag verbosityFlag
-  unless (null extraArgs) $
-    die' verbosity $ "'check' doesn't take any extra arguments: " ++ unwords extraArgs
-  allOk <- Check.check (fromFlag verbosityFlag)
-  unless allOk exitFailure
-
-formatAction :: Flag Verbosity -> [String] -> Action
-formatAction verbosityFlag extraArgs _globalFlags = do
-  let verbosity = fromFlag verbosityFlag
-  path <- case extraArgs of
-    [] -> do cwd <- getCurrentDirectory
-             tryFindPackageDesc verbosity cwd
-    (p:_) -> return p
-  pkgDesc <- readGenericPackageDescription verbosity path
-  -- Uses 'writeFileAtomic' under the hood.
-  writeGenericPackageDescription path pkgDesc
-
-reportAction :: ReportFlags -> [String] -> Action
-reportAction reportFlags extraArgs globalFlags = do
-  let verbosity = fromFlag (reportVerbosity reportFlags)
-  unless (null extraArgs) $
-    die' verbosity $ "'report' doesn't take any extra arguments: " ++ unwords extraArgs
-  config <- loadConfig verbosity (globalConfigFile globalFlags)
-  let globalFlags' = savedGlobalFlags config `mappend` globalFlags
-      reportFlags' = savedReportFlags config `mappend` reportFlags
-
-  withRepoContext verbosity globalFlags' $ \repoContext ->
-   Upload.report verbosity repoContext
-    (flagToMaybe $ reportUsername reportFlags')
-    (flagToMaybe $ reportPassword reportFlags')
-
-runAction :: BuildFlags -> [String] -> Action
-runAction buildFlags extraArgs globalFlags = do
-  let verbosity   = fromFlagOrDefault normal (buildVerbosity buildFlags)
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  distPref <- findSavedDistPref config (buildDistPref buildFlags)
-  config' <-
-    reconfigure configureAction
-    verbosity distPref (buildNumJobs buildFlags)
-    mempty [] globalFlags config
-  nixShell verbosity distPref globalFlags config $ do
-    lbi <- getPersistBuildConfig distPref
-    (exe, exeArgs) <- splitRunArgs verbosity lbi extraArgs
-
-    build verbosity config' distPref buildFlags ["exe:" ++ display (exeName exe)]
-    run verbosity lbi exe exeArgs
-
-getAction :: GetFlags -> [String] -> Action
-getAction getFlags extraArgs globalFlags = do
-  let verbosity = fromFlag (getVerbosity getFlags)
-  targets <- readUserTargets verbosity extraArgs
-  config <- loadConfigOrSandboxConfig verbosity globalFlags
-  let globalFlags' = savedGlobalFlags config `mappend` globalFlags
-  withRepoContext verbosity (savedGlobalFlags config) $ \repoContext ->
-   get verbosity
-    repoContext
-    globalFlags'
-    getFlags
-    targets
-
-unpackAction :: GetFlags -> [String] -> Action
-unpackAction getFlags extraArgs globalFlags = do
-  getAction getFlags extraArgs globalFlags
-
-initAction :: InitFlags -> [String] -> Action
-initAction initFlags extraArgs globalFlags = do
-  -- it takes the first value within extraArgs (if there's one)
-  -- and uses it as the root directory for the new project
-  case extraArgs of
-    [] -> initAction'
-    [projectDir] -> do
-      createDirectoryIfMissingVerbose verbosity True projectDir
-      withCurrentDirectory projectDir initAction'
-    _ -> die' verbosity $
-      "'init' only takes a single, optional, extra " ++
-      "argument for the project root directory"
-  where
-    initAction' = do
-      confFlags <- loadConfigOrSandboxConfig verbosity globalFlags
-      -- override with `--with-compiler` from CLI if available
-      let confFlags' = savedConfigureFlags confFlags `mappend` compFlags
-          initFlags' = savedInitFlags confFlags `mappend` initFlags
-          globalFlags' = savedGlobalFlags confFlags `mappend` globalFlags
-
-      (comp, _, progdb) <- configCompilerAux' confFlags'
-
-      withRepoContext verbosity globalFlags' $ \repoContext ->
-        initCmd verbosity (configPackageDB' confFlags')
-          repoContext comp progdb initFlags'
-
-    verbosity = fromFlag (initVerbosity initFlags)
-    compFlags = mempty { configHcPath = initHcPath initFlags }
-
-userConfigAction :: UserConfigFlags -> [String] -> Action
-userConfigAction ucflags extraArgs globalFlags = do
-  let verbosity  = fromFlag (userConfigVerbosity ucflags)
-      frc        = fromFlag (userConfigForce ucflags)
-      extraLines = fromFlag (userConfigAppendLines ucflags)
-  case extraArgs of
-    ("init":_) -> do
-      path       <- configFile
-      fileExists <- doesFileExist path
-      if (not fileExists || (fileExists && frc))
-      then void $ createDefaultConfigFile verbosity extraLines path
-      else die' verbosity $ path ++ " already exists."
-    ("diff":_) -> traverse_ putStrLn =<< userConfigDiff verbosity globalFlags extraLines
-    ("update":_) -> userConfigUpdate verbosity globalFlags extraLines
-    -- Error handling.
-    [] -> die' verbosity $ "Please specify a subcommand (see 'help user-config')"
-    _  -> die' verbosity $ "Unknown 'user-config' subcommand: " ++ unwords extraArgs
-  where configFile = getConfigFilePath (globalConfigFile globalFlags)
-
--- | Used as an entry point when cabal-install needs to invoke itself
--- as a setup script. This can happen e.g. when doing parallel builds.
---
-actAsSetupAction :: ActAsSetupFlags -> [String] -> Action
-actAsSetupAction actAsSetupFlags args _globalFlags =
-  let bt = fromFlag (actAsSetupBuildType actAsSetupFlags)
-  in case bt of
-    Simple    -> Simple.defaultMainArgs args
-    Configure -> Simple.defaultMainWithHooksArgs
-                  Simple.autoconfUserHooks args
-    Make      -> Make.defaultMainArgs args
-    Custom    -> error "actAsSetupAction Custom"
-
-manpageAction :: [CommandSpec action] -> ManpageFlags -> [String] -> Action
-manpageAction commands flags extraArgs _ = do
-  let verbosity = fromFlag (manpageVerbosity flags)
-  unless (null extraArgs) $
-    die' verbosity $ "'man' doesn't take any extra arguments: " ++ unwords extraArgs
-  pname <- getProgName
-  let cabalCmd = if takeExtension pname == ".exe"
-                 then dropExtension pname
-                 else pname
-  manpageCmd cabalCmd commands flags
+main = getArgs >>= Client.main
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/BuildReports/Anonymous.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/BuildReports/Anonymous.hs
index 9975ee337..6e483e2f8 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/BuildReports/Anonymous.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/BuildReports/Anonymous.hs
@@ -73,6 +73,7 @@ newBuildReport os' arch' comp pkgid flags deps result =
   where
     convertInstallOutcome = case result of
       Left  BR.PlanningFailed      -> PlanningFailed
+      Left  (BR.GracefulFailure _) -> PlanningFailed
       Left  (BR.DependentFailed p) -> DependencyFailed p
       Left  (BR.DownloadFailed  _) -> DownloadFailed
       Left  (BR.UnpackFailed    _) -> UnpackFailed
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Check.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Check.hs
index b08fa164e..f032b1485 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Check.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Check.hs
@@ -48,7 +48,9 @@ readGenericPackageDescriptionCheck verbosity fpath = do
             die' verbosity "parse error"
         Right x  -> return (warnings, x)
 
--- | Note: must be called with the CWD set to the directory containing
+-- | Checks a packge for common errors. Returns @True@ if the package
+-- is fit to upload to Hackage, @False@ otherwise.
+-- Note: must be called with the CWD set to the directory containing
 -- the '.cabal' file.
 check :: Verbosity -> IO Bool
 check verbosity = do
@@ -94,12 +96,7 @@ check verbosity = do
         warn verbosity "The following errors will cause portability problems on other environments:"
         printCheckMessages distInexusable
 
-    let isDistError (PackageDistSuspicious     {}) = False
-        isDistError (PackageDistSuspiciousWarn {}) = False
-        isDistError _                              = True
-        isCheckError (PackageDistSuspiciousWarn {}) = False
-        isCheckError _                              = True
-        errors = filter isDistError packageChecks
+    let errors = filter isHackageDistError packageChecks
 
     unless (null errors) $
         warn verbosity "Hackage would reject this package."
@@ -107,7 +104,7 @@ check verbosity = do
     when (null packageChecks) $
         notice verbosity "No errors or warnings could be found in the package."
 
-    return (not . any isCheckError $ packageChecks)
+    return (null errors)
 
   where
     printCheckMessages :: [PackageCheck] -> IO ()
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdBench.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdBench.hs
index a1a691d45..ee90cf094 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdBench.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdBench.hs
@@ -29,6 +29,8 @@ import Distribution.Client.NixStyleOptions
          ( NixStyleFlags (..), nixStyleOptions, defaultNixStyleFlags )
 import Distribution.Client.Setup
          ( GlobalFlags, ConfigFlags(..) )
+import Distribution.Client.Utils
+         ( giveRTSWarning )
 import Distribution.Simple.Flag
          ( fromFlagOrDefault )
 import Distribution.Simple.Command
@@ -36,7 +38,10 @@ import Distribution.Simple.Command
 import Distribution.Verbosity
          ( normal )
 import Distribution.Simple.Utils
-         ( wrapText, die' )
+         ( wrapText, die', warn )
+
+import GHC.Environment
+         ( getFullArgs )
 
 benchCommand :: CommandUI (NixStyleFlags ())
 benchCommand = CommandUI {
@@ -96,6 +101,10 @@ benchAction flags@NixStyleFlags {..} targetStrings globalFlags = do
                ++ "You may wish to use 'build --only-dependencies' and then "
                ++ "use 'bench'."
 
+            fullArgs <- getFullArgs
+            when ("+RTS" `elem` fullArgs) $
+              warn verbosity $ giveRTSWarning "bench"
+
             -- Interpret the targets on the command line as bench targets
             -- (as opposed to say build or haddock targets).
             targets <- either (reportTargetProblems verbosity) return
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdClean.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdClean.hs
index d0d1a573e..f09e7ccb6 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdClean.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdClean.hs
@@ -39,6 +39,7 @@ data CleanFlags = CleanFlags
     { cleanSaveConfig  :: Flag Bool
     , cleanVerbosity   :: Flag Verbosity
     , cleanDistDir     :: Flag FilePath
+    , cleanProjectDir  :: Flag FilePath
     , cleanProjectFile :: Flag FilePath
     } deriving (Eq)
 
@@ -47,6 +48,7 @@ defaultCleanFlags = CleanFlags
     { cleanSaveConfig  = toFlag False
     , cleanVerbosity   = toFlag normal
     , cleanDistDir     = NoFlag
+    , cleanProjectDir  = mempty
     , cleanProjectFile = mempty
     }
 
@@ -68,9 +70,12 @@ cleanCommand = CommandUI
         , optionDistPref
             cleanDistDir (\dd flags -> flags { cleanDistDir = dd })
             showOrParseArgs
+        , option [] ["project-dir"]
+            "Set the path of the project directory"
+            cleanProjectDir (\path flags -> flags {cleanProjectDir = path})
+            (reqArg "DIR" (succeedReadE Flag) flagToList)
         , option [] ["project-file"]
-            ("Set the name of the cabal.project file"
-             ++ " to search for in parent directories")
+            "Set the path of the cabal.project file (relative to the project directory when relative)"
             cleanProjectFile (\pf flags -> flags {cleanProjectFile = pf})
             (reqArg "FILE" (succeedReadE Flag) flagToList)
         , option ['s'] ["save-config"]
@@ -85,6 +90,7 @@ cleanAction CleanFlags{..} extraArgs _ = do
     let verbosity      = fromFlagOrDefault normal cleanVerbosity
         saveConfig     = fromFlagOrDefault False  cleanSaveConfig
         mdistDirectory = flagToMaybe cleanDistDir
+        mprojectDir    = flagToMaybe cleanProjectDir
         mprojectFile   = flagToMaybe cleanProjectFile
 
     -- TODO interpret extraArgs as targets and clean those targets only (issue #7506)
@@ -95,9 +101,9 @@ cleanAction CleanFlags{..} extraArgs _ = do
         die' verbosity $ "'clean' extra arguments should be script files: "
                          ++ unwords notScripts
 
-    projectRoot <- either throwIO return =<< findProjectRoot Nothing mprojectFile
+    projectRoot <- either throwIO return =<< findProjectRoot verbosity mprojectDir mprojectFile
 
-    let distLayout = defaultDistDirLayout projectRoot mdistDirectory
+    let distLayout = defaultDistDirLayout projectRoot mdistDirectory Nothing
 
     -- Do not clean a project if just running a script in it's directory
     when (null extraArgs || isJust mdistDirectory) $ do
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdHaddock.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdHaddock.hs
index bfd2e8baf..f3c7baa17 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdHaddock.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdHaddock.hs
@@ -16,7 +16,10 @@ module Distribution.Client.CmdHaddock (
 
 import Distribution.Client.Compat.Prelude
 import Prelude ()
+import System.Directory (makeAbsolute)
 
+import Distribution.Client.ProjectConfig.Types
+         (PackageConfig (..), ProjectConfig (..))
 import Distribution.Client.ProjectOrchestration
 import Distribution.Client.ProjectPlanning
          ( ElaboratedSharedConfig(..) )
@@ -83,20 +86,44 @@ haddockOptions _ =
     openInBrowser (\v f -> f { openInBrowser = v}) trueArg
   ]
 
+mkConfigAbsolute :: ProjectConfig -> IO ProjectConfig
+mkConfigAbsolute relConfig = do
+  let relPackageConfig = projectConfigLocalPackages relConfig
+  absHaddockOutputDir <- traverse makeAbsolute (packageConfigHaddockOutputDir relPackageConfig)
+  return (relConfig { projectConfigLocalPackages = relPackageConfig {
+     packageConfigHaddockOutputDir = absHaddockOutputDir} })
+
+mkFlagsAbsolute :: NixStyleFlags ClientHaddockFlags -> IO (NixStyleFlags ClientHaddockFlags)
+mkFlagsAbsolute relFlags = do
+  let relHaddockFlags = haddockFlags relFlags
+  absHaddockOutputDir <- traverse makeAbsolute (haddockOutputDir relHaddockFlags)
+  return (relFlags { haddockFlags = relHaddockFlags { haddockOutputDir = absHaddockOutputDir } })
+
 -- | The @haddock@ command is TODO.
 --
 -- For more details on how this works, see the module
 -- "Distribution.Client.ProjectOrchestration"
 --
 haddockAction :: NixStyleFlags ClientHaddockFlags -> [String] -> GlobalFlags -> IO ()
-haddockAction flags@NixStyleFlags {..} targetStrings globalFlags = do
+haddockAction relFlags targetStrings globalFlags = do
+    -- It's important to make --haddock-output-dir absolute since we change the working directory later.
+    flags@NixStyleFlags {..} <- mkFlagsAbsolute relFlags
+
+    let
+      verbosity = fromFlagOrDefault normal (configVerbosity configFlags)
+      installDoc = fromFlagOrDefault True (installDocumentation installFlags)
+      flags' = flags { installFlags = installFlags { installDocumentation = Flag installDoc } }
+      cliConfig = commandLineFlagsToProjectConfig globalFlags flags' mempty -- ClientInstallFlags, not needed here
+
     projCtx <- establishProjectBaseContext verbosity cliConfig HaddockCommand
 
-    let baseCtx
+    let relBaseCtx@ProjectBaseContext { projectConfig = relProjectConfig }
           | fromFlagOrDefault False (openInBrowser extraFlags)
             = projCtx { buildSettings = (buildSettings projCtx) { buildSettingHaddockOpen = True } }
           | otherwise
             = projCtx
+    absProjectConfig <- mkConfigAbsolute relProjectConfig
+    let baseCtx = relBaseCtx { projectConfig = absProjectConfig }
 
     targetSelectors <- either (reportTargetSelectorProblems verbosity) return
                    =<< readTargetSelectors (localPackages baseCtx) Nothing targetStrings
@@ -141,11 +168,6 @@ haddockAction flags@NixStyleFlags {..} targetStrings globalFlags = do
 
     buildOutcomes <- runProjectBuildPhase verbosity baseCtx buildCtx'
     runProjectPostBuildPhase verbosity baseCtx buildCtx' buildOutcomes
-  where
-    verbosity = fromFlagOrDefault normal (configVerbosity configFlags)
-    installDoc = fromFlagOrDefault True (installDocumentation installFlags)
-    flags' = flags { installFlags = installFlags { installDocumentation = Flag installDoc } }
-    cliConfig = commandLineFlagsToProjectConfig globalFlags flags' mempty -- ClientInstallFlags, not needed here
 
 -- | This defines what a 'TargetSelector' means for the @haddock@ command.
 -- It selects the 'AvailableTarget's that the 'TargetSelector' refers to,
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdHaddockProject.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
index c9e160ca5..aaa65f837 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdHaddockProject.hs
@@ -129,6 +129,7 @@ haddockProjectAction flags _extraArgs globalFlags = do
           , haddockKeepTempFiles= haddockProjectKeepTempFiles flags
           , haddockVerbosity    = haddockProjectVerbosity     flags
           , haddockLib          = haddockProjectLib           flags
+          , haddockOutputDir    = haddockProjectOutputDir     flags
           }
         nixFlags = (commandDefaultFlags CmdHaddock.haddockCommand)
                    { NixStyleOptions.haddockFlags = haddockFlags
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdListBin.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdListBin.hs
index 276743008..dbf18a3bb 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdListBin.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdListBin.hs
@@ -185,12 +185,12 @@ listbinAction flags@NixStyleFlags{..} args globalFlags = do
         -- here and in PlanOutput,
         -- use binDirectoryFor?
         bin_file' s =
-            if elabBuildStyle elab == BuildInplaceOnly
+            if isInplaceBuildStyle (elabBuildStyle elab)
             then dist_dir </> "build" </> prettyShow s </> prettyShow s <.> exeExtension plat
             else InstallDirs.bindir (elabInstallDirs elab) </> prettyShow s <.> exeExtension plat
 
         flib_file' s =
-            if elabBuildStyle elab == BuildInplaceOnly
+            if isInplaceBuildStyle (elabBuildStyle elab)
             then dist_dir </> "build" </> prettyShow s </> ("lib" ++ prettyShow s) <.> dllExtension plat
             else InstallDirs.bindir (elabInstallDirs elab) </> ("lib" ++ prettyShow s) <.> dllExtension plat
 
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdOutdated.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdOutdated.hs
index b2bf42347..1c98abd93 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdOutdated.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdOutdated.hs
@@ -216,14 +216,14 @@ outdatedOptions _showOrParseArgs =
 
 -- | Entry point for the 'outdated' command.
 outdatedAction :: (ProjectFlags, OutdatedFlags) -> [String] -> GlobalFlags -> IO ()
-outdatedAction (ProjectFlags{flagProjectFileName}, OutdatedFlags{..}) _targetStrings globalFlags = do
+outdatedAction (ProjectFlags{flagProjectDir, flagProjectFile}, OutdatedFlags{..}) _targetStrings globalFlags = do
   config <- loadConfigOrSandboxConfig verbosity globalFlags
   let globalFlags' = savedGlobalFlags config `mappend` globalFlags
       configFlags  = savedConfigureFlags config
   withRepoContext verbosity globalFlags' $ \repoContext -> do
-    when (not newFreezeFile && isJust mprojectFile) $
+    when (not newFreezeFile && (isJust mprojectDir || isJust mprojectFile)) $
       die' verbosity $
-        "--project-file must only be used with --v2-freeze-file."
+        "--project-dir and --project-file must only be used with --v2-freeze-file."
 
     sourcePkgDb <- IndexUtils.getSourcePackages verbosity repoContext
     (comp, platform, _progdb) <- configCompilerAux' configFlags
@@ -234,7 +234,7 @@ outdatedAction (ProjectFlags{flagProjectFileName}, OutdatedFlags{..}) _targetStr
                        httpTransport <- configureTransport verbosity
                          (fromNubList . globalProgPathExtra $ globalFlags)
                          (flagToMaybe . globalHttpTransport $ globalFlags)
-                       depsFromNewFreezeFile verbosity httpTransport comp platform mprojectFile
+                       depsFromNewFreezeFile verbosity httpTransport comp platform mprojectDir mprojectFile
                 else do
                   depsFromPkgDesc verbosity comp platform
     debug verbosity $ "Dependencies loaded: "
@@ -252,7 +252,8 @@ outdatedAction (ProjectFlags{flagProjectFileName}, OutdatedFlags{..}) _targetStr
                       else fromFlagOrDefault normal outdatedVerbosity
     freezeFile    = fromFlagOrDefault False outdatedFreezeFile
     newFreezeFile = fromFlagOrDefault False outdatedNewFreezeFile
-    mprojectFile  = flagToMaybe flagProjectFileName
+    mprojectDir   = flagToMaybe flagProjectDir
+    mprojectFile  = flagToMaybe flagProjectFile
     simpleOutput  = fromFlagOrDefault False outdatedSimpleOutput
     quiet         = fromFlagOrDefault False outdatedQuiet
     exitCode      = fromFlagOrDefault quiet outdatedExitCode
@@ -298,12 +299,12 @@ depsFromFreezeFile verbosity = do
   return deps
 
 -- | Read the list of dependencies from the new-style freeze file.
-depsFromNewFreezeFile :: Verbosity -> HttpTransport -> Compiler -> Platform -> Maybe FilePath -> IO [PackageVersionConstraint]
-depsFromNewFreezeFile verbosity httpTransport compiler (Platform arch os) mprojectFile = do
+depsFromNewFreezeFile :: Verbosity -> HttpTransport -> Compiler -> Platform -> Maybe FilePath -> Maybe FilePath -> IO [PackageVersionConstraint]
+depsFromNewFreezeFile verbosity httpTransport compiler (Platform arch os) mprojectDir mprojectFile = do
   projectRoot <- either throwIO return =<<
-                 findProjectRoot Nothing mprojectFile
+                 findProjectRoot verbosity mprojectDir mprojectFile
   let distDirLayout = defaultDistDirLayout projectRoot
-                      {- TODO: Support dist dir override -} Nothing
+                      {- TODO: Support dist dir override -} Nothing Nothing
   projectConfig <- runRebuild (distProjectRootDirectory distDirLayout) $ do
                       pcs <- readProjectLocalFreezeConfig verbosity httpTransport distDirLayout
                       pure $ instantiateProjectConfigSkeletonWithCompiler os arch (compilerInfo compiler) mempty pcs
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdRepl.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdRepl.hs
index dcf659f03..b0351b3cc 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdRepl.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdRepl.hs
@@ -3,6 +3,7 @@
 {-# LANGUAGE OverloadedStrings #-}
 {-# LANGUAGE RecordWildCards #-}
 {-# LANGUAGE TupleSections #-}
+{-# LANGUAGE TypeApplications #-}
 
 -- | cabal-install CLI command: repl
 --
@@ -10,11 +11,13 @@ module Distribution.Client.CmdRepl (
     -- * The @repl@ CLI and action
     replCommand,
     replAction,
+    ReplFlags(..),
 
     -- * Internals exposed for testing
     matchesMultipleProblem,
     selectPackageTargets,
-    selectComponentTarget
+    selectComponentTarget,
+    MultiReplDecision (..),
   ) where
 
 import Prelude ()
@@ -42,7 +45,7 @@ import Distribution.Client.ProjectOrchestration
 import Distribution.Client.ProjectPlanning
        ( ElaboratedSharedConfig(..), ElaboratedInstallPlan )
 import Distribution.Client.ProjectPlanning.Types
-       ( elabOrderExeDependencies )
+       ( elabOrderExeDependencies, showElaboratedInstallPlan )
 import Distribution.Client.ScriptUtils
          ( AcceptNoTargets(..), withContextAndSelectors, TargetContext(..)
          , updateContextAndWriteProjectFile, updateContextAndWriteProjectFile'
@@ -53,21 +56,16 @@ import qualified Distribution.Client.Setup as Client
 import Distribution.Client.Types
          ( PackageSpecifier(..), UnresolvedSourcePackage )
 import Distribution.Simple.Setup
-         ( fromFlagOrDefault, ReplOptions(..), replOptions
-         , Flag(..), toFlag, falseArg )
+         ( ReplOptions(..) )
 import Distribution.Simple.Command
-         ( CommandUI(..), liftOptionL, usageAlternatives, option
-         , ShowOrParseArgs, OptionField, reqArg )
+         ( CommandUI(..), usageAlternatives
+          )
 import Distribution.Compiler
          ( CompilerFlavor(GHC) )
 import Distribution.Simple.Compiler
          ( Compiler, compilerCompatVersion )
 import Distribution.Package
          ( Package(..), packageName, UnitId, installedUnitId )
-import Distribution.Parsec
-         ( parsecCommaList )
-import Distribution.ReadE
-         ( ReadE, parsecToReadE )
 import Distribution.Solver.Types.SourcePackage
          ( SourcePackage(..) )
 import Distribution.Types.BuildInfo
@@ -89,7 +87,7 @@ import Distribution.Utils.Generic
 import Distribution.Verbosity
          ( normal, lessVerbose )
 import Distribution.Simple.Utils
-         ( wrapText, die', debugNoWrap )
+         ( wrapText, die', debugNoWrap, withTempDirectoryEx, TempFileOptions (..) )
 import Language.Haskell.Extension
          ( Language(..) )
 
@@ -98,40 +96,30 @@ import Data.List
 import qualified Data.Map as Map
 import qualified Data.Set as Set
 import System.Directory
-         ( doesFileExist, getCurrentDirectory )
+         ( doesFileExist, getCurrentDirectory, listDirectory, makeAbsolute )
 import System.FilePath
-         ( (</>) )
-
-data EnvFlags = EnvFlags
-  { envPackages :: [Dependency]
-  , envIncludeTransitive :: Flag Bool
-  }
-
-defaultEnvFlags :: EnvFlags
-defaultEnvFlags = EnvFlags
-  { envPackages = []
-  , envIncludeTransitive = toFlag True
-  }
-
-envOptions :: ShowOrParseArgs -> [OptionField EnvFlags]
-envOptions _ =
-  [ option ['b'] ["build-depends"]
-    "Include additional packages in the environment presented to GHCi."
-    envPackages (\p flags -> flags { envPackages = p ++ envPackages flags })
-    (reqArg "DEPENDENCIES" dependenciesReadE (fmap prettyShow :: [Dependency] -> [String]))
-  , option [] ["no-transitive-deps"]
-    "Don't automatically include transitive dependencies of requested packages."
-    envIncludeTransitive (\p flags -> flags { envIncludeTransitive = p })
-    falseArg
-  ]
-  where
-    dependenciesReadE :: ReadE [Dependency]
-    dependenciesReadE =
-      parsecToReadE
-        ("couldn't parse dependencies: " ++)
-        (parsecCommaList parsec)
-
-replCommand :: CommandUI (NixStyleFlags (ReplOptions, EnvFlags))
+         ( (</>), splitSearchPath, searchPathSeparator )
+import Distribution.Simple.Program.Run
+    ( programInvocation, runProgramInvocation )
+import Distribution.Simple.Program.Builtin ( ghcProgram )
+import Distribution.Simple.Program.Db ( requireProgram )
+import Control.Monad ( mapM )
+import Distribution.Compat.Binary ( decode )
+import qualified Data.ByteString.Lazy as BS
+import Distribution.Simple.Program.Types
+    ( ConfiguredProgram(programOverrideEnv) )
+import Distribution.Client.ReplFlags
+    ( ReplFlags(..),
+      EnvFlags(envIncludeTransitive, envPackages),
+      defaultReplFlags,
+      topReplOptions )
+import Distribution.Simple.Flag ( Flag(Flag), fromFlagOrDefault )
+import Distribution.Client.ProjectConfig
+    ( ProjectConfigShared(projectConfigMultiRepl),
+      ProjectConfig(projectConfigShared) )
+
+
+replCommand :: CommandUI (NixStyleFlags ReplFlags)
 replCommand = Client.installCommand {
   commandName         = "v2-repl",
   commandSynopsis     = "Open an interactive session for the given component.",
@@ -168,12 +156,29 @@ replCommand = Client.installCommand {
      ++ "    add a version (constrained between 4.15 and 4.18) of the library 'lens' "
         ++ "to the default component (or no component if there is no project present)\n",
 
-  commandDefaultFlags = defaultNixStyleFlags (mempty, defaultEnvFlags),
-  commandOptions = nixStyleOptions $ \showOrParseArgs ->
-    map (liftOptionL _1) (replOptions showOrParseArgs) ++
-    map (liftOptionL _2) (envOptions showOrParseArgs)
+  commandDefaultFlags = defaultNixStyleFlags defaultReplFlags,
+  commandOptions = nixStyleOptions topReplOptions
+
   }
 
+data MultiReplDecision = MultiReplDecision
+    { compilerVersion:: Maybe Version
+    , enabledByFlag :: Bool
+    } deriving (Eq, Show)
+
+useMultiRepl :: MultiReplDecision -> Bool
+useMultiRepl MultiReplDecision{compilerVersion, enabledByFlag}
+  = compilerVersion >= Just minMultipleHomeUnitsVersion && enabledByFlag
+
+multiReplDecision :: ProjectConfigShared -> Compiler -> ReplFlags -> MultiReplDecision
+multiReplDecision ctx compiler flags =
+  MultiReplDecision
+    -- Check if the compiler is new enough, need at least 9.4 to start a multi session
+    (compilerCompatVersion GHC compiler)
+    -- Then check the user actually asked for it, either via the project file, the global config or
+    -- a repl specific option.
+    (fromFlagOrDefault False (projectConfigMultiRepl ctx <> replUseMulti flags))
+
 -- | The @repl@ command is very much like @build@. It brings the install plan
 -- up to date, selects that part of the plan needed by the given or implicit
 -- repl target and then executes the plan.
@@ -185,8 +190,8 @@ replCommand = Client.installCommand {
 -- For more details on how this works, see the module
 -- "Distribution.Client.ProjectOrchestration"
 --
-replAction :: NixStyleFlags (ReplOptions, EnvFlags) -> [String] -> GlobalFlags -> IO ()
-replAction flags@NixStyleFlags { extraFlags = (replOpts, envFlags), ..} targetStrings globalFlags
+replAction :: NixStyleFlags ReplFlags -> [String] -> GlobalFlags -> IO ()
+replAction flags@NixStyleFlags { extraFlags = r@ReplFlags{..} , ..} targetStrings globalFlags
   = withContextAndSelectors AcceptNoTargets (Just LibKind) flags targetStrings globalFlags ReplCommand $ \targetCtx ctx targetSelectors -> do
     when (buildSettingOnlyDeps (buildSettings ctx)) $
       die' verbosity $ "The repl command does not support '--only-dependencies'. "
@@ -194,6 +199,7 @@ replAction flags@NixStyleFlags { extraFlags = (replOpts, envFlags), ..} targetSt
           ++ "use 'repl'."
 
     let projectRoot = distProjectRootDirectory $ distDirLayout ctx
+        distDir = distDirectory $ distDirLayout ctx
 
     baseCtx <- case targetCtx of
       ProjectContext -> return ctx
@@ -222,22 +228,22 @@ replAction flags@NixStyleFlags { extraFlags = (replOpts, envFlags), ..} targetSt
 
         updateContextAndWriteProjectFile ctx scriptPath scriptExecutable
 
-    (originalComponent, baseCtx') <- if null (envPackages envFlags)
+    (originalComponent, baseCtx') <- if null (envPackages replEnvFlags)
       then return (Nothing, baseCtx)
       else
         -- Unfortunately, the best way to do this is to let the normal solver
         -- help us resolve the targets, but that isn't ideal for performance,
         -- especially in the no-project case.
-        withInstallPlan (lessVerbose verbosity) baseCtx $ \elaboratedPlan _ -> do
+        withInstallPlan (lessVerbose verbosity) baseCtx $ \elaboratedPlan sharedConfig -> do
           -- targets should be non-empty map, but there's no NonEmptyMap yet.
-          targets <- validatedTargets elaboratedPlan targetSelectors
+          targets <- validatedTargets (projectConfigShared (projectConfig ctx)) (pkgConfigCompiler sharedConfig) elaboratedPlan targetSelectors
 
           let
             (unitId, _) = fromMaybe (error "panic: targets should be non-empty") $ safeHead $ Map.toList targets
             originalDeps = installedUnitId <$> InstallPlan.directDeps elaboratedPlan unitId
             oci = OriginalComponentInfo unitId originalDeps
             pkgId = fromMaybe (error $ "cannot find " ++ prettyShow unitId) $ packageId <$> InstallPlan.lookup elaboratedPlan unitId
-            baseCtx' = addDepsToProjectTarget (envPackages envFlags) pkgId baseCtx
+            baseCtx' = addDepsToProjectTarget (envPackages replEnvFlags) pkgId baseCtx
 
           return (Just oci, baseCtx')
 
@@ -249,26 +255,26 @@ replAction flags@NixStyleFlags { extraFlags = (replOpts, envFlags), ..} targetSt
     -- In addition, to avoid a *third* trip through the solver, we are
     -- replicating the second half of 'runProjectPreBuildPhase' by hand
     -- here.
-    (buildCtx, compiler, replOpts') <- withInstallPlan verbosity baseCtx' $
+    (buildCtx, compiler, replOpts', targets) <- withInstallPlan verbosity baseCtx' $
       \elaboratedPlan elaboratedShared' -> do
         let ProjectBaseContext{..} = baseCtx'
 
         -- Recalculate with updated project.
-        targets <- validatedTargets elaboratedPlan targetSelectors
+        targets <- validatedTargets (projectConfigShared projectConfig) (pkgConfigCompiler elaboratedShared') elaboratedPlan targetSelectors
 
         let
           elaboratedPlan' = pruneInstallPlanToTargets
                               TargetActionRepl
                               targets
                               elaboratedPlan
-          includeTransitive = fromFlagOrDefault True (envIncludeTransitive envFlags)
+          includeTransitive = fromFlagOrDefault True (envIncludeTransitive replEnvFlags)
 
         pkgsBuildStatus <- rebuildTargetsDryRun distDirLayout elaboratedShared'
                                           elaboratedPlan'
 
         let elaboratedPlan'' = improveInstallPlanWithUpToDatePackages
                                 pkgsBuildStatus elaboratedPlan'
-        debugNoWrap verbosity (InstallPlan.showInstallPlan elaboratedPlan'')
+        debugNoWrap verbosity (showElaboratedInstallPlan elaboratedPlan'')
 
         let
           buildCtx = ProjectBuildContext
@@ -281,30 +287,96 @@ replAction flags@NixStyleFlags { extraFlags = (replOpts, envFlags), ..} targetSt
 
           ElaboratedSharedConfig { pkgConfigCompiler = compiler } = elaboratedShared'
 
-          replFlags = case originalComponent of
+          repl_flags = case originalComponent of
             Just oci -> generateReplFlags includeTransitive elaboratedPlan' oci
             Nothing  -> []
 
-        return (buildCtx, compiler, replOpts & lReplOptionsFlags %~ (++ replFlags))
+        return (buildCtx, compiler, configureReplOptions & lReplOptionsFlags %~ (++ repl_flags), targets)
+
+    -- Multi Repl implemention see: https://well-typed.com/blog/2023/03/cabal-multi-unit/ for
+    -- a high-level overview about how everything fits together.
+    if Set.size (distinctTargetComponents targets) > 1
+    then withTempDirectoryEx verbosity (TempFileOptions keepTempFiles) distDir "multi-out-" $ \dir' -> do
+      -- multi target repl
+      dir <- makeAbsolute dir'
+      -- Modify the replOptions so that the ./Setup repl command will write options
+      -- into the multi-out directory.
+      replOpts'' <- case targetCtx of
+        ProjectContext -> return $ replOpts' { replOptionsFlagOutput = Flag dir}
+        _              -> usingGhciScript compiler projectRoot replOpts'
+
+      let buildCtx' = buildCtx & lElaboratedShared . lPkgConfigReplOptions .~ replOpts''
+      printPlan verbosity baseCtx' buildCtx'
+
+      -- The project build phase will call `./Setup repl` but write the options
+      -- out into a file without starting a repl.
+      buildOutcomes <- runProjectBuildPhase verbosity baseCtx' buildCtx'
+      runProjectPostBuildPhase verbosity baseCtx' buildCtx' buildOutcomes
+
+      -- calculate PATH, we construct a PATH which is the union of all paths from
+      -- the units which have been loaded. This is not quite right but usually works fine.
+      path_files <- listDirectory (dir </> "paths")
+
+      -- Note: decode is partial. Should we use Structured here?
+      -- This might blow up with @build-type: Custom@ stuff.
+      ghcProgs <- mapM (\f -> decode @ConfiguredProgram <$> BS.readFile (dir </> "paths" </> f)) path_files
+
+      let all_paths = concatMap programOverrideEnv ghcProgs
+      let sp = intercalate [searchPathSeparator] (map fst (sortBy (comparing @Int snd) $ Map.toList (combine_search_paths all_paths)))
+      -- HACK: Just combine together all env overrides, placing the most common things last
+
+      -- ghc program with overriden PATH
+      (ghcProg, _) <- requireProgram verbosity ghcProgram (pkgConfigCompilerProgs (elaboratedShared buildCtx'))
+      let ghcProg' = ghcProg { programOverrideEnv = [("PATH", Just sp)]}
+
+
+      -- Find what the unit files are, and start a repl based on all the response
+      -- files which have been created in the directory.
+      -- unit files for components
+      unit_files <- listDirectory dir
+
+      -- run ghc --interactive with
+      runProgramInvocation verbosity $ programInvocation ghcProg' $ concat $
+        ["--interactive"
+        , "-package-env", "-" -- to ignore ghc.environment.* files
+        , "-j", show (buildSettingNumJobs (buildSettings ctx))
+        ] :
+        [ ["-unit", "@" ++ dir </> unit]
+        | unit <- unit_files, unit /= "paths"
+        ]
+
+      pure ()
+
+    else do
+      -- single target repl
+      replOpts'' <- case targetCtx of
+        ProjectContext -> return replOpts'
+        _              -> usingGhciScript compiler projectRoot replOpts'
+
+      let buildCtx' = buildCtx & lElaboratedShared . lPkgConfigReplOptions .~ replOpts''
+      printPlan verbosity baseCtx' buildCtx'
+
+      buildOutcomes <- runProjectBuildPhase verbosity baseCtx' buildCtx'
+      runProjectPostBuildPhase verbosity baseCtx' buildCtx' buildOutcomes
+  where
 
-    replOpts'' <- case targetCtx of
-      ProjectContext -> return replOpts'
-      _              -> usingGhciScript compiler projectRoot replOpts'
+    combine_search_paths paths =
+      foldl' go Map.empty paths
+      where
+        go m ("PATH", Just s) = foldl' (\m' f-> Map.insertWith (+) f 1 m') m (splitSearchPath s)
+        go m _ = m
 
-    let buildCtx' = buildCtx & lElaboratedShared . lPkgConfigReplOptions .~ replOpts''
-    printPlan verbosity baseCtx' buildCtx'
 
-    buildOutcomes <- runProjectBuildPhase verbosity baseCtx' buildCtx'
-    runProjectPostBuildPhase verbosity baseCtx' buildCtx' buildOutcomes
-  where
     verbosity = fromFlagOrDefault normal (configVerbosity configFlags)
+    keepTempFiles = fromFlagOrDefault False replKeepTempFiles
 
-    validatedTargets elaboratedPlan targetSelectors = do
+    validatedTargets ctx compiler elaboratedPlan targetSelectors = do
+      let multi_repl_enabled = multiReplDecision ctx compiler r
       -- Interpret the targets on the command line as repl targets
       -- (as opposed to say build or haddock targets).
       targets <- either (reportTargetProblems verbosity) return
           $ resolveTargets
-              selectPackageTargets
+              (selectPackageTargets multi_repl_enabled)
               selectComponentTarget
               elaboratedPlan
               Nothing
@@ -313,12 +385,16 @@ replAction flags@NixStyleFlags { extraFlags = (replOpts, envFlags), ..} targetSt
       -- Reject multiple targets, or at least targets in different
       -- components. It is ok to have two module/file targets in the
       -- same component, but not two that live in different components.
-      when (Set.size (distinctTargetComponents targets) > 1) $
+      when (Set.size (distinctTargetComponents targets) > 1 && not (useMultiRepl multi_repl_enabled)) $
         reportTargetProblems verbosity
-          [multipleTargetsProblem targets]
+          [multipleTargetsProblem multi_repl_enabled targets]
 
       return targets
 
+-- | First version of GHC which supports multiple home packages
+minMultipleHomeUnitsVersion :: Version
+minMultipleHomeUnitsVersion = mkVersion [9, 4]
+
 data OriginalComponentInfo = OriginalComponentInfo
   { ociUnitId :: UnitId
   , ociOriginalDeps :: [UnitId]
@@ -383,6 +459,7 @@ usingGhciScript compiler projectRoot replOpts
       return $ replOpts & lReplOptionsFlags %~ (("-ghci-script" ++ ghciScriptPath) :)
   | otherwise = return replOpts
 
+
 -- | First version of GHC where GHCi supported the flag we need.
 -- https://downloads.haskell.org/~ghc/7.6.1/docs/html/users_guide/release-7-6-1.html
 minGhciScriptVersion :: Version
@@ -403,9 +480,42 @@ minGhciScriptVersion = mkVersion [7, 6]
 -- Fail if there are no buildable lib\/exe components, or if there are
 -- multiple libs or exes.
 --
-selectPackageTargets  :: TargetSelector
+selectPackageTargets  :: MultiReplDecision
+                      -> TargetSelector
                       -> [AvailableTarget k] -> Either ReplTargetProblem [k]
-selectPackageTargets targetSelector targets
+selectPackageTargets multiple_targets_allowed
+  -- If explicitly enabled, then select the targets like we would for multi-repl but
+  -- might still fail later because of compiler version.
+  = if enabledByFlag multiple_targets_allowed
+      then selectPackageTargetsMulti
+      else selectPackageTargetsSingle multiple_targets_allowed
+
+selectPackageTargetsMulti :: TargetSelector
+                      -> [AvailableTarget k] -> Either ReplTargetProblem [k]
+selectPackageTargetsMulti targetSelector targets
+  | not (null targetsBuildable)
+  = Right targetsBuildable
+    -- If there are no targets at all then we report that
+  | otherwise
+  = Left (TargetProblemNoTargets targetSelector)
+  where
+    (targetsBuildable,
+     _)     = selectBuildableTargetsWith'
+                                (isRequested targetSelector) targets
+
+    -- When there's a target filter like "pkg:tests" then we do select tests,
+    -- but if it's just a target like "pkg" then we don't build tests unless
+    -- they are requested by default (i.e. by using --enable-tests)
+    isRequested (TargetAllPackages  Nothing) TargetNotRequestedByDefault = False
+    isRequested (TargetPackage _ _  Nothing) TargetNotRequestedByDefault = False
+    isRequested _ _ = True
+
+-- | Target selection behaviour which only select a single target.
+-- This is used when the compiler version doesn't support multi-repl or the user
+-- didn't request it.
+selectPackageTargetsSingle :: MultiReplDecision -> TargetSelector
+                      -> [AvailableTarget k] -> Either ReplTargetProblem [k]
+selectPackageTargetsSingle decision targetSelector targets
 
     -- If there is exactly one buildable library then we select that
   | [target] <- targetsLibsBuildable
@@ -413,7 +523,7 @@ selectPackageTargets targetSelector targets
 
     -- but fail if there are multiple buildable libraries.
   | not (null targetsLibsBuildable)
-  = Left (matchesMultipleProblem targetSelector targetsLibsBuildable')
+  = Left (matchesMultipleProblem decision targetSelector targetsLibsBuildable')
 
     -- If there is exactly one buildable executable then we select that
   | [target] <- targetsExesBuildable
@@ -421,7 +531,7 @@ selectPackageTargets targetSelector targets
 
     -- but fail if there are multiple buildable executables.
   | not (null targetsExesBuildable)
-  = Left (matchesMultipleProblem targetSelector targetsExesBuildable')
+  = Left (matchesMultipleProblem decision targetSelector targetsExesBuildable')
 
     -- If there is exactly one other target then we select that
   | [target] <- targetsBuildable
@@ -429,7 +539,7 @@ selectPackageTargets targetSelector targets
 
     -- but fail if there are multiple such targets
   | not (null targetsBuildable)
-  = Left (matchesMultipleProblem targetSelector targetsBuildable')
+  = Left (matchesMultipleProblem decision targetSelector targetsBuildable')
 
     -- If there are targets but none are buildable then we report those
   | not (null targets)
@@ -471,10 +581,10 @@ selectComponentTarget = selectComponentTargetBasic
 
 
 data ReplProblem
-  = TargetProblemMatchesMultiple TargetSelector [AvailableTarget ()]
+  = TargetProblemMatchesMultiple MultiReplDecision TargetSelector [AvailableTarget ()]
 
     -- | Multiple 'TargetSelector's match multiple targets
-  | TargetProblemMultipleTargets TargetsMap
+  | TargetProblemMultipleTargets MultiReplDecision TargetsMap
   deriving (Eq, Show)
 
 -- | The various error conditions that can occur when matching a
@@ -483,16 +593,18 @@ data ReplProblem
 type ReplTargetProblem = TargetProblem ReplProblem
 
 matchesMultipleProblem
-  :: TargetSelector
+  :: MultiReplDecision
+  -> TargetSelector
   -> [AvailableTarget ()]
   -> ReplTargetProblem
-matchesMultipleProblem targetSelector targetsExesBuildable =
-  CustomTargetProblem $ TargetProblemMatchesMultiple targetSelector targetsExesBuildable
+matchesMultipleProblem decision targetSelector targetsExesBuildable =
+  CustomTargetProblem $ TargetProblemMatchesMultiple decision targetSelector targetsExesBuildable
 
 multipleTargetsProblem
-  :: TargetsMap
+  :: MultiReplDecision
+  -> TargetsMap
   -> ReplTargetProblem
-multipleTargetsProblem = CustomTargetProblem . TargetProblemMultipleTargets
+multipleTargetsProblem decision = CustomTargetProblem . TargetProblemMultipleTargets decision
 
 reportTargetProblems :: Verbosity -> [TargetProblem ReplProblem] -> IO a
 reportTargetProblems verbosity =
@@ -502,7 +614,7 @@ renderReplTargetProblem :: TargetProblem ReplProblem -> String
 renderReplTargetProblem = renderTargetProblem "open a repl for" renderReplProblem
 
 renderReplProblem :: ReplProblem -> String
-renderReplProblem (TargetProblemMatchesMultiple targetSelector targets) =
+renderReplProblem (TargetProblemMatchesMultiple decision targetSelector targets) =
     "Cannot open a repl for multiple components at once. The target '"
  ++ showTargetSelector targetSelector ++ "' refers to "
  ++ renderTargetSelector targetSelector ++ " which "
@@ -517,24 +629,49 @@ renderReplProblem (TargetProblemMatchesMultiple targetSelector targets) =
           ]
       | (ckind, ts) <- sortGroupOn availableTargetComponentKind targets
       ]
- ++ ".\n\n" ++ explanationSingleComponentLimitation
+ ++ ".\n\n" ++ explainMultiReplDecision decision
   where
     availableTargetComponentKind = componentKind
                                  . availableTargetComponentName
 
-renderReplProblem (TargetProblemMultipleTargets selectorMap) =
+renderReplProblem (TargetProblemMultipleTargets multi_decision selectorMap) =
     "Cannot open a repl for multiple components at once. The targets "
  ++ renderListCommaAnd
       [ "'" ++ showTargetSelector ts ++ "'"
       | ts <- uniqueTargetSelectors selectorMap ]
  ++ " refer to different components."
- ++ ".\n\n" ++ explanationSingleComponentLimitation
-
-explanationSingleComponentLimitation :: String
-explanationSingleComponentLimitation =
-    "The reason for this limitation is that current versions of ghci do not "
+ ++ ".\n\n" ++ explainMultiReplDecision multi_decision
+
+explainMultiReplDecision :: MultiReplDecision -> [Char]
+explainMultiReplDecision MultiReplDecision{compilerVersion, enabledByFlag} =
+  case (compilerVersion >= Just minMultipleHomeUnitsVersion, enabledByFlag) of
+    -- Compiler not new enough, and not requested anyway.
+    (False, False) -> explanationSingleComponentLimitation compilerVersion
+    -- Compiler too old, but was requested
+    (False, True)  -> "Multiple component session requested but compiler version is too old.\n" ++ explanationSingleComponentLimitation compilerVersion
+    -- Compiler new enough, but not requested
+    (True, False)  -> explanationNeedToEnableFlag
+    _ -> error "explainMultiReplDecision"
+
+explanationNeedToEnableFlag :: String
+explanationNeedToEnableFlag =
+  "Your compiler supports a multiple component repl but support is not enabled.\n" ++
+  "The experimental multi repl can be enabled by\n" ++
+  "  * Globally: Setting multi-repl: True in your .cabal/config\n" ++
+  "  * Project Wide: Setting multi-repl: True in your cabal.project file\n" ++
+  "  * Per Invocation: By passing --enable-multi-repl when starting the repl"
+
+
+explanationSingleComponentLimitation :: Maybe Version -> String
+explanationSingleComponentLimitation version =
+    "The reason for this limitation is that your version " ++ versionString ++ "of ghci does not "
  ++ "support loading multiple components as source. Load just one component "
- ++ "and when you make changes to a dependent component then quit and reload."
+ ++ "and when you make changes to a dependent component then quit and reload.\n"
+ ++ prettyShow minMultipleHomeUnitsVersion ++ " is needed to support multiple component sessions."
+ where
+  versionString = case version of
+                      Nothing -> ""
+                      Just ver -> "(" ++ prettyShow ver ++ ") "
 
 -- Lenses
 lElaboratedShared :: Lens' ProjectBuildContext ElaboratedSharedConfig
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdRun.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdRun.hs
index 64241fd8b..664ffb30f 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdRun.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdRun.hs
@@ -47,7 +47,7 @@ import Distribution.Types.ComponentName
 import Distribution.Verbosity
          ( normal, silent )
 import Distribution.Simple.Utils
-         ( wrapText, die', info, notice, safeHead )
+         ( wrapText, die', info, notice, safeHead, warn )
 import Distribution.Client.ProjectPlanning
          ( ElaboratedConfiguredPackage(..)
          , ElaboratedInstallPlan, binDirectoryFor )
@@ -64,9 +64,15 @@ import Distribution.Types.UnitId
          ( UnitId )
 import Distribution.Client.ScriptUtils
          ( AcceptNoTargets(..), withContextAndSelectors, updateContextAndWriteProjectFile, TargetContext(..) )
+import Distribution.Client.Utils
+         ( occursOnlyOrBefore, giveRTSWarning )
 
-import Data.List (group)
+import Data.List ( group )
 import qualified Data.Set as Set
+
+import GHC.Environment
+         ( getFullArgs )
+
 import System.Directory
          ( doesFileExist )
 import System.FilePath
@@ -139,6 +145,10 @@ runAction flags@NixStyleFlags {..} targetAndArgs globalFlags
                ++ "You may wish to use 'build --only-dependencies' and then "
                ++ "use 'run'."
 
+            fullArgs <- getFullArgs
+            when (occursOnlyOrBefore fullArgs "+RTS" "--") $
+              warn verbosity $ giveRTSWarning "run"
+
             -- Interpret the targets on the command line as build targets
             -- (as opposed to say repl or haddock targets).
             targets <- either (reportTargetProblems verbosity) return
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdTest.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdTest.hs
index 451e40eb9..dd5f0915e 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/CmdTest.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/CmdTest.hs
@@ -29,6 +29,8 @@ import Distribution.Client.NixStyleOptions
          ( NixStyleFlags (..), nixStyleOptions, defaultNixStyleFlags )
 import Distribution.Client.Setup
          ( GlobalFlags(..), ConfigFlags(..) )
+import Distribution.Client.Utils
+         ( giveRTSWarning )
 import Distribution.Simple.Setup
          ( TestFlags(..), fromFlagOrDefault )
 import Distribution.Simple.Command
@@ -38,10 +40,12 @@ import Distribution.Simple.Flag
 import Distribution.Verbosity
          ( normal )
 import Distribution.Simple.Utils
-         ( notice, wrapText, die' )
+         ( notice, wrapText, die', warn )
 
 import qualified System.Exit (exitSuccess)
 
+import GHC.Environment
+         ( getFullArgs )
 
 testCommand :: CommandUI (NixStyleFlags ())
 testCommand = CommandUI
@@ -108,6 +112,10 @@ testAction flags@NixStyleFlags {..} targetStrings globalFlags = do
                ++ "You may wish to use 'build --only-dependencies' and then "
                ++ "use 'test'."
 
+            fullArgs <- getFullArgs
+            when ("+RTS" `elem` fullArgs) $
+              warn verbosity $ giveRTSWarning "test"
+
             -- Interpret the targets on the command line as test targets
             -- (as opposed to say build or haddock targets).
             targets <- either (reportTargetProblems verbosity failWhenNoTestSuites) return
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Config.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Config.hs
index 023d6a6fd..6125e9af6 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Config.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Config.hs
@@ -144,6 +144,7 @@ import Distribution.Compat.Environment
          ( getEnvironment )
 import qualified Data.Map as M
 import qualified Data.ByteString as BS
+import Distribution.Client.ReplFlags
 
 --
 -- * Configuration saved in the config file
@@ -164,6 +165,7 @@ data SavedConfig = SavedConfig
     , savedTestFlags          :: TestFlags
     , savedBenchmarkFlags     :: BenchmarkFlags
     , savedProjectFlags       :: ProjectFlags
+    , savedReplMulti          :: Flag Bool
     } deriving Generic
 
 instance Monoid SavedConfig where
@@ -185,7 +187,8 @@ instance Semigroup SavedConfig where
     savedHaddockFlags      = combinedSavedHaddockFlags,
     savedTestFlags         = combinedSavedTestFlags,
     savedBenchmarkFlags    = combinedSavedBenchmarkFlags,
-    savedProjectFlags      = combinedSavedProjectFlags
+    savedProjectFlags      = combinedSavedProjectFlags,
+    savedReplMulti         = combinedSavedReplMulti
   }
     where
       -- This is ugly, but necessary. If we're mappending two config files, we
@@ -401,6 +404,7 @@ instance Semigroup SavedConfig where
         configConstraints         = lastNonEmpty configConstraints,
         -- TODO: NubListify
         configDependencies        = lastNonEmpty configDependencies,
+        configPromisedDependencies = lastNonEmpty configPromisedDependencies,
         -- TODO: NubListify
         configConfigurationsFlags = lastNonMempty configConfigurationsFlags,
         configTests               = combine configTests,
@@ -494,6 +498,7 @@ instance Semigroup SavedConfig where
         haddockIndex         = combine haddockIndex,
         haddockBaseUrl       = combine haddockBaseUrl,
         haddockLib           = combine haddockLib,
+        haddockOutputDir     = combine haddockOutputDir,
         haddockArgs          = lastNonEmpty haddockArgs
         }
         where
@@ -524,8 +529,11 @@ instance Semigroup SavedConfig where
           combine      = combine'        savedBenchmarkFlags
           lastNonEmpty = lastNonEmpty'   savedBenchmarkFlags
 
+      combinedSavedReplMulti = combine' savedReplMulti id
+
       combinedSavedProjectFlags = ProjectFlags
-        { flagProjectFileName = combine flagProjectFileName
+        { flagProjectDir      = combine flagProjectDir
+        , flagProjectFile     = combine flagProjectFile
         , flagIgnoreProject   = combine flagIgnoreProject
         }
         where
@@ -737,10 +745,23 @@ addInfoForKnownRepos other = other
 --
 defaultHackageRemoteRepoKeys :: [String]
 defaultHackageRemoteRepoKeys =
-    [ "fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0",
+    -- Key owners and public keys are provided as a convenience to readers.
+    -- The canonical source for this mapping data is the hackage-root-keys
+    -- repository and Hackage's root.json file.
+    --
+    -- Links:
+    --  * https://github.com/haskell-infra/hackage-root-keys
+    --  * https://hackage.haskell.org/root.json
+    -- Please consult root.json on Hackage to map key IDs to public keys,
+    -- and the hackage-root-keys repository to map public keys to their
+    -- owners.
+    [ -- Adam Gundry (uRPdSiL3/MNsk50z6NB55ABo0OrrNDXigtCul4vtzmw=)
+      "fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0",
+      -- Gershom Bazerman (bYoUXXQ9TtX10UriaMiQtTccuXPGnmldP68djzZ7cLo=)
       "1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42",
-      "2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3",
+      -- John Wiegley (zazm5w480r+zPO6Z0+8fjGuxZtb9pAuoVmQ+VkuCvgU=)
       "0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d",
+      -- Norman Ramsey (ZI8di3a9Un0s2RBrt5GwVRvfOXVuywADfXGPZfkiDb0=)
       "51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921"
     ]
 
@@ -908,7 +929,11 @@ commentSavedConfig = do
             IT.language        = toFlag Haskell2010,
             IT.license         = NoFlag,
             IT.sourceDirs      = Flag [IT.defaultSourceDir],
-            IT.applicationDirs = Flag [IT.defaultApplicationDir]
+            IT.applicationDirs = Flag [IT.defaultApplicationDir],
+            IT.quiet           = Flag False,
+            IT.noComments      = Flag False,
+            IT.minimal         = Flag False,
+            IT.simpleProject   = Flag False
             },
         savedInstallFlags      = defaultInstallFlags,
         savedClientInstallFlags= defaultClientInstallFlags,
@@ -952,7 +977,7 @@ configFieldDescriptions src =
 
   ++ toSavedConfig liftConfigFlag
        (configureOptions ParseArgs)
-       (["builddir", "constraint", "dependency", "ipid"]
+       (["builddir", "constraint", "dependency", "promised-dependency", "ipid"]
         ++ map fieldName installDirsFields)
 
         -- This is only here because viewAsFieldDescr gives us a parser
@@ -1056,6 +1081,10 @@ configFieldDescriptions src =
        -- share the options or make then distinct. In any case
        -- they should probably be per-server.
 
+  ++ toSavedConfig liftReplFlag
+      [multiReplOption]
+      [] []
+
   ++ [ viewAsFieldDescr
        $ optionDistPref
        (configDistPref . savedConfigureFlags)
@@ -1070,6 +1099,7 @@ configFieldDescriptions src =
        ParseArgs
      ]
 
+
   where
     toSavedConfig lift options exclusions replacements =
       [ lift (fromMaybe field replacement)
@@ -1167,6 +1197,10 @@ liftReportFlag :: FieldDescr ReportFlags -> FieldDescr SavedConfig
 liftReportFlag = liftField
   savedReportFlags (\flags conf -> conf { savedReportFlags = flags })
 
+liftReplFlag :: FieldDescr (Flag Bool) -> FieldDescr SavedConfig
+liftReplFlag = liftField
+  savedReplMulti (\flags conf -> conf { savedReplMulti = flags })
+
 parseConfig :: ConstraintSource
             -> SavedConfig
             -> BS.ByteString
@@ -1448,10 +1482,10 @@ initFlagsFields = [ field
                   , name `notElem` exclusions ]
   where
     exclusions =
-      [ "author", "email", "quiet", "no-comments", "minimal", "overwrite"
+      [ "author", "email", "overwrite"
       , "package-dir", "packagedir", "package-name", "version", "homepage"
       , "synopsis", "category", "extra-source-file", "lib", "exe", "libandexe"
-      , "simple", "main-is", "expose-module", "exposed-modules", "extension"
+      , "main-is", "expose-module", "exposed-modules", "extension"
       , "dependency", "build-tool", "with-compiler"
       , "verbose"
       ]
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Dependency.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Dependency.hs
index c5cbba8d4..3c3e86142 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Dependency.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Dependency.hs
@@ -395,24 +395,31 @@ dontUpgradeNonUpgradeablePackages params =
         (PackageConstraint (ScopeAnyQualifier pkgname) PackagePropertyInstalled)
         ConstraintSourceNonUpgradeablePackage
       | Set.notMember (mkPackageName "base") (depResolverTargets params)
-      -- If you change this enumeration, make sure to update the list in
-      -- "Distribution.Solver.Modular.Solver" as well
-      , pkgname <- [ mkPackageName "base"
-                   , mkPackageName "ghc-bignum"
-                   , mkPackageName "ghc-prim"
-                   , mkPackageName "ghc-boot"
-                   , mkPackageName "ghc"
-                   , mkPackageName "ghci"
-                   , mkPackageName "integer-gmp"
-                   , mkPackageName "integer-simple"
-                   , mkPackageName "template-haskell"
-                   ]
+      , pkgname <- nonUpgradeablePackages
       , isInstalled pkgname ]
 
     isInstalled = not . null
                 . InstalledPackageIndex.lookupPackageName
                                  (depResolverInstalledPkgIndex params)
 
+-- NOTE: the lists of non-upgradable and non-installable packages used to be
+-- respectively in this module and in `Distribution.Solver.Modular.Solver`.
+-- Since they were kept synced, they are now combined in the following list.
+--
+-- See: https://github.com/haskell/cabal/issues/8581
+nonUpgradeablePackages :: [PackageName]
+nonUpgradeablePackages =
+  [ mkPackageName "base"
+  , mkPackageName "ghc-bignum"
+  , mkPackageName "ghc-prim"
+  , mkPackageName "ghc-boot"
+  , mkPackageName "ghc"
+  , mkPackageName "ghci"
+  , mkPackageName "integer-gmp"
+  , mkPackageName "integer-simple"
+  , mkPackageName "template-haskell"
+  ]
+
 addSourcePackages :: [UnresolvedSourcePackage]
                   -> DepResolverParams -> DepResolverParams
 addSourcePackages pkgs params =
@@ -469,7 +476,7 @@ removeBounds  relKind relDeps            params =
     }
   where
     sourcePkgIndex' :: PackageIndex.PackageIndex UnresolvedSourcePackage
-    sourcePkgIndex' = fmap relaxDeps $ depResolverSourcePkgIndex params
+    sourcePkgIndex' = relaxDeps <$> depResolverSourcePkgIndex params
 
     relaxDeps :: UnresolvedSourcePackage -> UnresolvedSourcePackage
     relaxDeps srcPkg = srcPkg
@@ -710,7 +717,11 @@ resolveDependencies platform comp pkgConfigDB solver params =
   $ fmap (validateSolverResult platform comp indGoals)
   $ runSolver solver (SolverConfig reordGoals cntConflicts fineGrained minimize
                       indGoals noReinstalls
-                      shadowing strFlags allowBootLibs onlyConstrained_ maxBkjumps enableBj
+                      shadowing strFlags allowBootLibs
+                      -- See comment of nonUpgradeablePackages about
+                      -- non-installable and non-upgradable packages.
+                      nonUpgradeablePackages
+                      onlyConstrained_ maxBkjumps enableBj
                       solveExes order verbosity (PruneAfterFirstSuccess False))
                      platform comp installedPkgIndex sourcePkgIndex
                      pkgConfigDB preferences constraints targets
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/DistDirLayout.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/DistDirLayout.hs
index 2b88ddc43..af59bdaa0 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/DistDirLayout.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/DistDirLayout.hs
@@ -10,7 +10,10 @@ module Distribution.Client.DistDirLayout (
     DistDirLayout(..),
     DistDirParams(..),
     defaultDistDirLayout,
+
+    -- * 'ProjectRoot'
     ProjectRoot(..),
+    defaultProjectFile,
 
     -- * 'StoreDirLayout'
     StoreDirLayout(..),
@@ -64,7 +67,7 @@ data DistDirParams = DistDirParams {
 data DistDirLayout = DistDirLayout {
 
        -- | The root directory of the project. Many other files are relative to
-       -- this location. In particular, the @cabal.project@ lives here.
+       -- this location (e.g. the @cabal.project@ file).
        --
        distProjectRootDirectory     :: FilePath,
 
@@ -120,7 +123,10 @@ data DistDirLayout = DistDirLayout {
        distTempDirectory            :: FilePath,
        distBinDirectory             :: FilePath,
 
-       distPackageDB                :: CompilerId -> PackageDB
+       distPackageDB                :: CompilerId -> PackageDB,
+
+       -- | Is needed when `--haddock-output-dir` flag is used.
+       distHaddockOutputDir         :: Maybe FilePath
      }
 
 
@@ -156,32 +162,42 @@ data CabalDirLayout = CabalDirLayout {
 -- | Information about the root directory of the project.
 --
 -- It can either be an implicit project root in the current dir if no
--- @cabal.project@ file is found, or an explicit root if the file is found.
+-- @cabal.project@ file is found, or an explicit root if either
+-- the file is found or the project root directory was specicied.
 --
 data ProjectRoot =
-       -- | -- ^ An implicit project root. It contains the absolute project
+       -- | An implicit project root. It contains the absolute project
        -- root dir.
        ProjectRootImplicit FilePath
 
-       -- | -- ^ An explicit project root. It contains the absolute project
+       -- | An explicit project root. It contains the absolute project
        -- root dir and the relative @cabal.project@ file (or explicit override)
      | ProjectRootExplicit FilePath FilePath
+
+       -- | An explicit, absolute project root dir and an explicit, absolute
+       -- @cabal.project@ file.
+     | ProjectRootExplicitAbsolute FilePath FilePath
   deriving (Eq, Show)
 
+defaultProjectFile :: FilePath
+defaultProjectFile = "cabal.project"
+
 -- | Make the default 'DistDirLayout' based on the project root dir and
--- optional overrides for the location of the @dist@ directory and the
--- @cabal.project@ file.
+-- optional overrides for the location of the @dist@ directory, the
+-- @cabal.project@ file and the documentation directory.
 --
 defaultDistDirLayout :: ProjectRoot    -- ^ the project root
                      -> Maybe FilePath -- ^ the @dist@ directory or default
                                        -- (absolute or relative to the root)
+                     -> Maybe FilePath -- ^ the documentation directory
                      -> DistDirLayout
-defaultDistDirLayout projectRoot mdistDirectory =
+defaultDistDirLayout projectRoot mdistDirectory haddockOutputDir =
     DistDirLayout {..}
   where
     (projectRootDir, projectFile) = case projectRoot of
-      ProjectRootImplicit dir      -> (dir, dir </> "cabal.project")
-      ProjectRootExplicit dir file -> (dir, dir </> file)
+      ProjectRootImplicit dir              -> (dir, dir </> defaultProjectFile)
+      ProjectRootExplicit dir file         -> (dir, dir </> file)
+      ProjectRootExplicitAbsolute dir file -> (dir, file)
 
     distProjectRootDirectory :: FilePath
     distProjectRootDirectory = projectRootDir
@@ -260,6 +276,8 @@ defaultDistDirLayout projectRoot mdistDirectory =
     distPackageDB :: CompilerId -> PackageDB
     distPackageDB = SpecificPackageDB . distPackageDBPath
 
+    distHaddockOutputDir :: Maybe FilePath
+    distHaddockOutputDir = haddockOutputDir
 
 defaultStoreDirLayout :: FilePath -> StoreDirLayout
 defaultStoreDirLayout storeRoot =
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Init/Format.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Init/Format.hs
index e0f524f77..48eab2ce1 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Init/Format.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Init/Format.hs
@@ -278,7 +278,7 @@ mkTestStanza opts (TestTarget testMain dirs lang otherMods exts deps tools) =
 
 mkPkgDescription :: WriteOpts -> PkgDescription -> [PrettyField FieldAnnotation]
 mkPkgDescription opts pkgDesc =
-    [ field "cabal-version" text (showCabalSpecVersion cabalSpec)
+    [ field "cabal-version" text ((if cabalSpec < CabalSpecV1_12 then ">=" else "") ++ showCabalSpecVersion cabalSpec)
       [ "The cabal-version field refers to the version of the .cabal specification,"
       , "and can be different from the cabal-install (the tool) version and the"
       , "Cabal (the library) version you are using. As such, the Cabal (the library)"
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
index ca63d80ad..bf27eb301 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Init/Interactive/Command.hs
@@ -286,8 +286,7 @@ cabalVersionPrompt flags = getCabalVersion flags $ do
 
     displayCabalVersion :: CabalSpecVersion -> String
     displayCabalVersion v = case v of
-      CabalSpecV1_24 -> "1.24  (legacy)"
-      CabalSpecV2_0  -> "2.0   (+ support for Backpack, internal sub-libs, '^>=' operator)"
+      CabalSpecV2_0  -> "2.0   (support for Backpack, internal sub-libs, '^>=' operator)"
       CabalSpecV2_2  -> "2.2   (+ support for 'common', 'elif', redundant commas, SPDX)"
       CabalSpecV2_4  -> "2.4   (+ support for '**' globbing)"
       CabalSpecV3_0  -> "3.0   (+ set notation for ==, common stanzas in ifs, more redundant commas, better pkgconfig-depends)"
@@ -337,7 +336,7 @@ licensePrompt flags = getLicense flags $ do
     let csv = fromFlagOrDefault defaultCabalVersion (cabalVersion flags)
     l <- promptList "Please choose a license"
       (licenses csv)
-      MandatoryPrompt
+      (DefaultPrompt "BSD-3-Clause")
       Nothing
       True
 
@@ -356,14 +355,10 @@ licensePrompt flags = getLicense flags $ do
       else fmap prettyShow knownLicenses
 
 authorPrompt :: Interactive m => InitFlags -> m String
-authorPrompt flags = getAuthor flags $ do
-    name <- guessAuthorName
-    promptStr "Author name" (DefaultPrompt name)
+authorPrompt flags = getAuthor flags $ guessAuthorName >>= promptOrDefault "Author name"
 
 emailPrompt :: Interactive m => InitFlags -> m String
-emailPrompt flags = getEmail flags $ do
-    email' <- guessAuthorEmail
-    promptStr "Maintainer email" (DefaultPrompt email')
+emailPrompt flags = getEmail flags $ guessAuthorEmail >>= promptOrDefault "Maintainer email"
 
 homepagePrompt :: Interactive m => InitFlags -> m String
 homepagePrompt flags = getHomepage flags $
@@ -468,3 +463,6 @@ srcDirsPrompt flags = getSrcDirs flags $ do
       True
 
     return [dir]
+
+promptOrDefault :: Interactive m => String -> Maybe String -> m String
+promptOrDefault s = maybe (promptStr s MandatoryPrompt)  (promptStr s . DefaultPrompt)
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Init/NonInteractive/Command.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Init/NonInteractive/Command.hs
index 6f382f580..bc317247d 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Init/NonInteractive/Command.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Init/NonInteractive/Command.hs
@@ -274,14 +274,16 @@ licenseHeuristics :: Interactive m => InitFlags -> m SpecLicense
 licenseHeuristics flags = getLicense flags $ guessLicense flags
 
 -- | The author's name. Prompt, or try to guess from an existing
---   darcs repo.
+--   git repo.
 authorHeuristics :: Interactive m => InitFlags -> m String
-authorHeuristics flags = getAuthor flags guessAuthorEmail
+authorHeuristics flags = guessAuthorName >>=
+  maybe (getAuthor flags $ return "Unknown") (getAuthor flags . return)
 
 -- | The author's email. Prompt, or try to guess from an existing
---   darcs repo.
+--   git repo.
 emailHeuristics :: Interactive m => InitFlags -> m String
-emailHeuristics flags = getEmail flags guessAuthorName
+emailHeuristics flags = guessAuthorEmail >>=
+  maybe (getEmail flags $ return "Unknown") (getEmail flags . return)
 
 -- | Prompt for a homepage URL for the package.
 homepageHeuristics :: Interactive m => InitFlags -> m String
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Init/NonInteractive/Heuristics.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Init/NonInteractive/Heuristics.hs
index ad947ec7e..04c492798 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Init/NonInteractive/Heuristics.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Init/NonInteractive/Heuristics.hs
@@ -151,18 +151,23 @@ guessSourceDirectories flags = do
     True  -> ["src"]
 
 -- | Guess author and email using git configuration options.
-guessAuthorName :: Interactive m => m String
+guessAuthorName :: Interactive m => m (Maybe String)
 guessAuthorName = guessGitInfo "user.name"
 
-guessAuthorEmail :: Interactive m => m String
+guessAuthorEmail :: Interactive m => m (Maybe String)
 guessAuthorEmail = guessGitInfo "user.email"
 
-guessGitInfo :: Interactive m => String -> m String
+guessGitInfo :: Interactive m => String -> m (Maybe String)
 guessGitInfo target = do
-  info <- readProcessWithExitCode "git" ["config", "--local", target] ""
-  if null $ snd' info
-    then trim . snd' <$> readProcessWithExitCode "git" ["config", "--global", target] ""
-    else return . trim $ snd' info
+  localInfo <- readProcessWithExitCode "git" ["config", "--local", target] ""
+  if null $ snd' localInfo
+    then do
+      globalInfo <- readProcessWithExitCode "git" ["config", "--global", target] ""
+      case fst' globalInfo of
+        ExitSuccess -> return $  Just (trim $ snd' globalInfo)
+        _           -> return Nothing
+    else return $  Just (trim $ snd' localInfo)
 
   where
+    fst' (x, _, _) = x
     snd' (_, x, _) = x
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Install.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Install.hs
index 2baa8af9e..b0cf35873 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Install.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Install.hs
@@ -968,6 +968,7 @@ printBuildFailures verbosity buildOutcomes =
               | (pkgid, reason) <- failed ]
   where
     printFailureReason reason = case reason of
+      GracefulFailure msg -> msg
       DependentFailed pkgid -> " depends on " ++ prettyShow pkgid
                             ++ " which failed to install."
       DownloadFailed  e -> " failed while downloading the package."
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/InstallPlan.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/InstallPlan.hs
index 9b8fa6cba..f943e41d2 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/InstallPlan.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/InstallPlan.hs
@@ -59,7 +59,10 @@ module Distribution.Client.InstallPlan (
 
   -- * Display
   showPlanGraph,
+  ShowPlanNode(..),
   showInstallPlan,
+  showInstallPlan_gen,
+  showPlanPackageTag,
 
   -- * Graph-like operations
   dependencyClosure,
@@ -278,21 +281,31 @@ instance (IsNode ipkg, Key ipkg ~ UnitId, IsNode srcpkg, Key srcpkg ~ UnitId,
       indepGoals <- get
       return $! mkInstallPlan "(instance Binary)" graph indepGoals
 
-showPlanGraph :: (Package ipkg, Package srcpkg,
-                  IsUnit ipkg, IsUnit srcpkg)
-              => Graph (GenericPlanPackage ipkg srcpkg) -> String
+
+data ShowPlanNode = ShowPlanNode { showPlanHerald :: Doc
+                                 , showPlanNeighbours :: [Doc]
+                                 }
+
+showPlanGraph :: [ShowPlanNode] -> String
 showPlanGraph graph = renderStyle defaultStyle $
-    vcat (map dispPlanPackage (Foldable.toList graph))
-  where dispPlanPackage p =
-            hang (hsep [ text (showPlanPackageTag p)
-                       , pretty (packageId p)
-                       , parens (pretty (nodeKey p))]) 2
-                 (vcat (map pretty (nodeNeighbors p)))
-
-showInstallPlan :: (Package ipkg, Package srcpkg,
-                    IsUnit ipkg, IsUnit srcpkg)
+    vcat (map dispPlanPackage graph)
+  where dispPlanPackage (ShowPlanNode herald neighbours) =
+            hang herald 2 (vcat neighbours)
+
+-- | Generic way to show a 'GenericInstallPlan' which elicits quite a lot of information
+showInstallPlan_gen :: forall ipkg srcpkg .
+                (GenericPlanPackage ipkg srcpkg -> ShowPlanNode) -> GenericInstallPlan ipkg srcpkg -> String
+showInstallPlan_gen toShow = showPlanGraph . fmap toShow . Foldable.toList . planGraph
+
+showInstallPlan :: forall ipkg srcpkg . (Package ipkg, Package srcpkg, IsUnit ipkg, IsUnit srcpkg)
                 => GenericInstallPlan ipkg srcpkg -> String
-showInstallPlan = showPlanGraph . planGraph
+showInstallPlan = showInstallPlan_gen toShow
+  where
+    toShow :: GenericPlanPackage ipkg srcpkg -> ShowPlanNode
+    toShow p = ShowPlanNode (hsep [ text (showPlanPackageTag p)
+                                 , pretty (packageId p)
+                                 , parens (pretty (nodeKey p))])
+                            (map pretty (nodeNeighbors p))
 
 showPlanPackageTag :: GenericPlanPackage ipkg srcpkg -> String
 showPlanPackageTag (PreExisting _)   = "PreExisting"
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Main.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Main.hs
new file mode 100644
index 000000000..889fa6343
--- /dev/null
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Main.hs
@@ -0,0 +1,1013 @@
+{-# LANGUAGE CPP #-}
+{-# LANGUAGE LambdaCase #-}
+{-# LANGUAGE ScopedTypeVariables #-}
+
+-----------------------------------------------------------------------------
+-- |
+-- Module      :  Main
+-- Copyright   :  (c) David Himmelstrup 2005
+-- License     :  BSD-like
+--
+-- Maintainer  :  lemmih@gmail.com
+-- Stability   :  provisional
+-- Portability :  portable
+--
+-- Entry point to the default cabal-install front-end.
+--
+-- @since 3.10.0.0
+-----------------------------------------------------------------------------
+
+module Distribution.Client.Main (main) where
+
+import Distribution.Client.Setup
+         ( GlobalFlags(..), globalCommand, withRepoContext
+         , ConfigFlags(..)
+         , ConfigExFlags(..), defaultConfigExFlags, configureExCommand
+         , reconfigureCommand
+         , configCompilerAux', configPackageDB'
+         , BuildFlags(..)
+         , buildCommand, replCommand, testCommand, benchmarkCommand
+         , InstallFlags(..), defaultInstallFlags
+         , installCommand
+         , FetchFlags(..), fetchCommand
+         , FreezeFlags(..), freezeCommand
+         , genBoundsCommand
+         , GetFlags(..), getCommand, unpackCommand
+         , checkCommand
+         , formatCommand
+         , ListFlags(..), listCommand, listNeedsCompiler
+         , InfoFlags(..), infoCommand
+         , UploadFlags(..), uploadCommand
+         , ReportFlags(..), reportCommand
+         , runCommand
+         , InitFlags(initVerbosity, initHcPath), initCommand
+         , ActAsSetupFlags(..), actAsSetupCommand
+         , UserConfigFlags(..), userConfigCommand
+         , reportCommand
+         , manpageCommand
+         , haddockCommand
+         , cleanCommand
+         , copyCommand
+         , registerCommand
+         )
+import Distribution.Simple.Setup
+         ( HaddockTarget(..)
+         , HaddockFlags(..), defaultHaddockFlags
+         , HscolourFlags(..), hscolourCommand
+         , ReplFlags(..)
+         , CopyFlags(..)
+         , RegisterFlags(..)
+         , CleanFlags(..)
+         , TestFlags(..), BenchmarkFlags(..)
+         , Flag(..), fromFlag, fromFlagOrDefault, flagToMaybe, toFlag
+         , configAbsolutePaths
+         )
+
+import Prelude ()
+import Distribution.Client.Compat.Prelude hiding (get)
+
+import Distribution.Client.SetupWrapper
+         ( setupWrapper, SetupScriptOptions(..), defaultSetupScriptOptions )
+import Distribution.Client.Config
+         ( SavedConfig(..), loadConfig, defaultConfigFile, userConfigDiff
+         , userConfigUpdate, createDefaultConfigFile, getConfigFilePath )
+import Distribution.Client.Targets
+         ( readUserTargets )
+import qualified Distribution.Client.List as List
+         ( list, info )
+
+import qualified Distribution.Client.CmdConfigure as CmdConfigure
+import qualified Distribution.Client.CmdUpdate    as CmdUpdate
+import qualified Distribution.Client.CmdBuild     as CmdBuild
+import qualified Distribution.Client.CmdRepl      as CmdRepl
+import qualified Distribution.Client.CmdFreeze    as CmdFreeze
+import qualified Distribution.Client.CmdHaddock   as CmdHaddock
+import qualified Distribution.Client.CmdHaddockProject as CmdHaddockProject
+import qualified Distribution.Client.CmdInstall   as CmdInstall
+import qualified Distribution.Client.CmdRun       as CmdRun
+import qualified Distribution.Client.CmdTest      as CmdTest
+import qualified Distribution.Client.CmdBench     as CmdBench
+import qualified Distribution.Client.CmdExec      as CmdExec
+import qualified Distribution.Client.CmdClean     as CmdClean
+import qualified Distribution.Client.CmdSdist     as CmdSdist
+import qualified Distribution.Client.CmdListBin   as CmdListBin
+import qualified Distribution.Client.CmdOutdated  as CmdOutdated
+import           Distribution.Client.CmdLegacy
+
+import Distribution.Client.Install            (install)
+import Distribution.Client.Configure          (configure, writeConfigFlags)
+import Distribution.Client.Fetch              (fetch)
+import Distribution.Client.Freeze             (freeze)
+import Distribution.Client.GenBounds          (genBounds)
+import Distribution.Client.Check as Check     (check)
+--import Distribution.Client.Clean            (clean)
+import qualified Distribution.Client.Upload as Upload
+import Distribution.Client.Run                (run, splitRunArgs)
+import Distribution.Client.Get                (get)
+import Distribution.Client.Reconfigure        (Check(..), reconfigure)
+import Distribution.Client.Nix                (nixInstantiate
+                                              ,nixShell
+                                              )
+import Distribution.Client.Sandbox            (loadConfigOrSandboxConfig
+                                              ,findSavedDistPref
+                                              ,updateInstallDirs)
+import Distribution.Client.Tar                (createTarGzFile)
+import Distribution.Client.Types.Credentials  (Password (..))
+import Distribution.Client.Init               (initCmd)
+import Distribution.Client.Manpage            (manpageCmd)
+import Distribution.Client.ManpageFlags       (ManpageFlags (..))
+import Distribution.Client.Utils
+         ( determineNumJobs, relaxEncodingErrors )
+import Distribution.Client.Signal
+         ( installTerminationHandler )
+import Distribution.Client.Version
+         ( cabalInstallVersion )
+
+import Distribution.Package (packageId)
+import Distribution.PackageDescription
+         ( BuildType(..), Executable(..), buildable )
+
+import Distribution.PackageDescription.PrettyPrint
+         ( writeGenericPackageDescription )
+import qualified Distribution.Simple as Simple
+import qualified Distribution.Make as Make
+import qualified Distribution.Types.UnqualComponentName as Make
+import Distribution.Simple.Build
+         ( startInterpreter )
+import Distribution.Simple.Command
+         ( CommandParse(..), CommandUI(..), Command, CommandSpec(..)
+         , CommandType(..), commandsRun, commandAddAction, hiddenCommand
+         , commandFromSpec, commandShowOptions )
+import Distribution.Simple.Compiler (PackageDBStack)
+import Distribution.Simple.Configure
+         ( configCompilerAuxEx, ConfigStateFileError(..)
+         , getPersistBuildConfig, interpretPackageDbFlags
+         , tryGetPersistBuildConfig )
+import qualified Distribution.Simple.LocalBuildInfo as LBI
+import Distribution.Simple.PackageDescription ( readGenericPackageDescription )
+import Distribution.Simple.Program (defaultProgramDb
+                                   ,configureAllKnownPrograms
+                                   ,simpleProgramInvocation
+                                   ,getProgramInvocationOutput)
+import Distribution.Simple.Program.Db (reconfigurePrograms)
+import qualified Distribution.Simple.Setup as Cabal
+import Distribution.Simple.Utils
+         ( cabalVersion, die', dieNoVerbosity, info, notice, topHandler
+         , findPackageDesc, tryFindPackageDesc, createDirectoryIfMissingVerbose )
+import Distribution.Text
+         ( display )
+import Distribution.Verbosity as Verbosity
+         ( normal )
+import Distribution.Version
+         ( Version, mkVersion, orLaterVersion )
+
+import Distribution.Compat.ResponseFile
+import System.Environment       (getProgName)
+import System.FilePath          ( dropExtension, splitExtension
+                                , takeExtension, (</>), (<.>) )
+import System.IO                ( BufferMode(LineBuffering), hSetBuffering
+                                , hPutStrLn, stderr, stdout )
+import System.Directory         ( doesFileExist, getCurrentDirectory
+                                , withCurrentDirectory)
+import Data.Monoid              (Any(..))
+import Control.Exception        (AssertionFailed, assert, try)
+
+
+-- | Entry point
+--
+main :: [String] -> IO ()
+main args = do
+  installTerminationHandler
+  -- Enable line buffering so that we can get fast feedback even when piped.
+  -- This is especially important for CI and build systems.
+  hSetBuffering stdout LineBuffering
+
+  -- If the locale encoding for CLI doesn't support all Unicode characters,
+  -- printing to it may fail unless we relax the handling of encoding errors
+  -- when writing to stderr and stdout.
+  relaxEncodingErrors stdout
+  relaxEncodingErrors stderr
+  let (args0, args1) = break (== "--") args
+
+  mainWorker =<< (++ args1) <$> expandResponse args0
+
+-- | Check whether assertions are enabled and print a warning in that case.
+warnIfAssertionsAreEnabled :: IO ()
+warnIfAssertionsAreEnabled =
+  assert False (return ()) `catch`
+  (\(_e :: AssertionFailed) -> hPutStrLn stderr assertionsEnabledMsg)
+    -- Andreas, 2022-12-30, issue #8654:
+    -- The verbosity machinery is not in place at this point (option -v not parsed),
+    -- so instead of using function @warn@, we print straight to stderr.
+  where
+    assertionsEnabledMsg =
+      "Warning: this is a debug build of cabal-install with assertions enabled."
+
+mainWorker :: [String] -> IO ()
+mainWorker args = do
+  topHandler $
+    case commandsRun (globalCommand commands) commands args of
+      CommandHelp   help                 -> printGlobalHelp help
+      CommandList   opts                 -> printOptionsList opts
+      CommandErrors errs                 -> printErrors errs
+      CommandReadyToGo (globalFlags, commandParse)  ->
+        case commandParse of
+          _ | fromFlagOrDefault False (globalVersion globalFlags)
+              -> printVersion
+            | fromFlagOrDefault False (globalNumericVersion globalFlags)
+              -> printNumericVersion
+          CommandHelp     help           -> printCommandHelp help
+          CommandList     opts           -> printOptionsList opts
+
+          CommandErrors   errs           -> do
+            -- Check whether cabal is called from a script, like #!/path/to/cabal.
+            case args of
+              []      -> printErrors errs
+              script : scriptArgs -> CmdRun.validScript script >>= \case
+                False -> printErrors errs
+                True  -> do
+                  -- In main operation (not help, version etc.) print warning if assertions are on.
+                  warnIfAssertionsAreEnabled
+                  CmdRun.handleShebang script scriptArgs
+
+          CommandReadyToGo action        -> do
+            -- In main operation (not help, version etc.) print warning if assertions are on.
+            warnIfAssertionsAreEnabled
+            action globalFlags
+
+  where
+    printCommandHelp help = do
+      pname <- getProgName
+      putStr (help pname)
+    printGlobalHelp help = do
+      pname <- getProgName
+      configFile <- defaultConfigFile
+      putStr (help pname)
+      putStr $ "\nYou can edit the cabal configuration file to set defaults:\n"
+            ++ "  " ++ configFile ++ "\n"
+      exists <- doesFileExist configFile
+      unless exists $
+          putStrLn $ "This file will be generated with sensible "
+                  ++ "defaults if you run 'cabal update'."
+    printOptionsList = putStr . unlines
+    printErrors errs = dieNoVerbosity $ intercalate "\n" errs
+    printNumericVersion = putStrLn $ display cabalInstallVersion
+    printVersion        = putStrLn $ "cabal-install version "
+                                  ++ display cabalInstallVersion
+                                  ++ "\ncompiled using version "
+                                  ++ display cabalVersion
+                                  ++ " of the Cabal library "
+
+    commands = map commandFromSpec commandSpecs
+    commandSpecs =
+      [ regularCmd listCommand listAction
+      , regularCmd infoCommand infoAction
+      , regularCmd fetchCommand fetchAction
+      , regularCmd getCommand getAction
+      , regularCmd unpackCommand unpackAction
+      , regularCmd checkCommand checkAction
+      , regularCmd uploadCommand uploadAction
+      , regularCmd reportCommand reportAction
+      , regularCmd initCommand initAction
+      , regularCmd userConfigCommand userConfigAction
+      , regularCmd genBoundsCommand genBoundsAction
+      , regularCmd CmdOutdated.outdatedCommand CmdOutdated.outdatedAction
+      , wrapperCmd hscolourCommand hscolourVerbosity hscolourDistPref
+      , hiddenCmd  formatCommand formatAction
+      , hiddenCmd  actAsSetupCommand actAsSetupAction
+      , hiddenCmd  manpageCommand (manpageAction commandSpecs)
+      , regularCmd CmdListBin.listbinCommand     CmdListBin.listbinAction
+
+      ] ++ concat
+      [ newCmd  CmdConfigure.configureCommand CmdConfigure.configureAction
+      , newCmd  CmdUpdate.updateCommand       CmdUpdate.updateAction
+      , newCmd  CmdBuild.buildCommand         CmdBuild.buildAction
+      , newCmd  CmdRepl.replCommand           CmdRepl.replAction
+      , newCmd  CmdFreeze.freezeCommand       CmdFreeze.freezeAction
+      , newCmd  CmdHaddock.haddockCommand     CmdHaddock.haddockAction
+      , newCmd  CmdHaddockProject.haddockProjectCommand
+                                              CmdHaddockProject.haddockProjectAction
+      , newCmd  CmdInstall.installCommand     CmdInstall.installAction
+      , newCmd  CmdRun.runCommand             CmdRun.runAction
+      , newCmd  CmdTest.testCommand           CmdTest.testAction
+      , newCmd  CmdBench.benchCommand         CmdBench.benchAction
+      , newCmd  CmdExec.execCommand           CmdExec.execAction
+      , newCmd  CmdClean.cleanCommand         CmdClean.cleanAction
+      , newCmd  CmdSdist.sdistCommand         CmdSdist.sdistAction
+
+      , legacyCmd configureExCommand configureAction
+      , legacyCmd buildCommand buildAction
+      , legacyCmd replCommand replAction
+      , legacyCmd freezeCommand freezeAction
+      , legacyCmd haddockCommand haddockAction
+      , legacyCmd installCommand installAction
+      , legacyCmd runCommand runAction
+      , legacyCmd testCommand testAction
+      , legacyCmd benchmarkCommand benchmarkAction
+      , legacyCmd cleanCommand cleanAction
+      , legacyWrapperCmd copyCommand copyVerbosity copyDistPref
+      , legacyWrapperCmd registerCommand regVerbosity regDistPref
+      , legacyCmd reconfigureCommand reconfigureAction
+      ]
+
+type Action = GlobalFlags -> IO ()
+
+-- Duplicated in Distribution.Client.CmdLegacy. Any changes must be
+-- reflected there, as well.
+regularCmd :: CommandUI flags -> (flags -> [String] -> action)
+           -> CommandSpec action
+regularCmd ui action =
+  CommandSpec ui ((flip commandAddAction) action) NormalCommand
+
+hiddenCmd :: CommandUI flags -> (flags -> [String] -> action)
+          -> CommandSpec action
+hiddenCmd ui action =
+  CommandSpec ui (\ui' -> hiddenCommand (commandAddAction ui' action))
+  HiddenCommand
+
+wrapperCmd :: Monoid flags => CommandUI flags -> (flags -> Flag Verbosity)
+           -> (flags -> Flag String) -> CommandSpec Action
+wrapperCmd ui verbosity distPref =
+  CommandSpec ui (\ui' -> wrapperAction ui' verbosity distPref) NormalCommand
+
+wrapperAction :: Monoid flags
+              => CommandUI flags
+              -> (flags -> Flag Verbosity)
+              -> (flags -> Flag String)
+              -> Command Action
+wrapperAction command verbosityFlag distPrefFlag =
+  commandAddAction command
+    { commandDefaultFlags = mempty } $ \flags extraArgs globalFlags -> do
+    let verbosity = fromFlagOrDefault normal (verbosityFlag flags)
+    load <- try (loadConfigOrSandboxConfig verbosity globalFlags)
+    let config = either (\(SomeException _) -> mempty) id load
+    distPref <- findSavedDistPref config (distPrefFlag flags)
+    let setupScriptOptions = defaultSetupScriptOptions { useDistPref = distPref }
+    setupWrapper verbosity setupScriptOptions Nothing
+                 command (const flags) (const extraArgs)
+
+configureAction :: (ConfigFlags, ConfigExFlags)
+                -> [String] -> Action
+configureAction (configFlags, configExFlags) extraArgs globalFlags = do
+  let verbosity = fromFlagOrDefault normal (configVerbosity configFlags)
+  config <- updateInstallDirs (configUserInstall configFlags)
+                          <$> loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config (configDistPref configFlags)
+  nixInstantiate verbosity distPref True globalFlags config
+  nixShell verbosity distPref globalFlags config $ do
+    let configFlags'   = savedConfigureFlags   config `mappend` configFlags
+        configExFlags' = savedConfigureExFlags config `mappend` configExFlags
+        globalFlags'   = savedGlobalFlags      config `mappend` globalFlags
+    (comp, platform, progdb) <- configCompilerAuxEx configFlags'
+
+    writeConfigFlags verbosity distPref (configFlags', configExFlags')
+
+    -- What package database(s) to use
+    let packageDBs :: PackageDBStack
+        packageDBs
+          = interpretPackageDbFlags
+            (fromFlag (configUserInstall configFlags'))
+            (configPackageDBs configFlags')
+
+    withRepoContext verbosity globalFlags' $ \repoContext ->
+        configure verbosity packageDBs repoContext
+                  comp platform progdb configFlags' configExFlags' extraArgs
+
+reconfigureAction :: (ConfigFlags, ConfigExFlags)
+                  -> [String] -> Action
+reconfigureAction flags@(configFlags, _) _ globalFlags = do
+  let verbosity = fromFlagOrDefault normal (configVerbosity configFlags)
+  config <- updateInstallDirs (configUserInstall configFlags)
+                          <$> loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config (configDistPref configFlags)
+  let checkFlags = Check $ \_ saved -> do
+        let flags' = saved <> flags
+        unless (saved == flags') $ info verbosity message
+        pure (Any True, flags')
+        where
+          -- This message is correct, but not very specific: it will list all
+          -- of the new flags, even if some have not actually changed. The
+          -- *minimal* set of changes is more difficult to determine.
+          message =
+            "flags changed: "
+            ++ unwords (commandShowOptions configureExCommand flags)
+  nixInstantiate verbosity distPref True globalFlags config
+  _ <-
+    reconfigure configureAction
+    verbosity distPref NoFlag
+    checkFlags [] globalFlags config
+  pure ()
+
+buildAction :: BuildFlags -> [String] -> Action
+buildAction buildFlags extraArgs globalFlags = do
+  let verbosity = fromFlagOrDefault normal (buildVerbosity buildFlags)
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config (buildDistPref buildFlags)
+  -- Calls 'configureAction' to do the real work, so nothing special has to be
+  -- done to support sandboxes.
+  config' <-
+    reconfigure configureAction
+    verbosity distPref (buildNumJobs buildFlags)
+    mempty [] globalFlags config
+  nixShell verbosity distPref globalFlags config $ do
+    build verbosity config' distPref buildFlags extraArgs
+
+
+-- | Actually do the work of building the package. This is separate from
+-- 'buildAction' so that 'testAction' and 'benchmarkAction' do not invoke
+-- 'reconfigure' twice.
+build :: Verbosity -> SavedConfig -> FilePath -> BuildFlags -> [String] -> IO ()
+build verbosity config distPref buildFlags extraArgs =
+  setupWrapper verbosity setupOptions Nothing
+               (Cabal.buildCommand progDb) mkBuildFlags (const extraArgs)
+  where
+    progDb       = defaultProgramDb
+    setupOptions = defaultSetupScriptOptions { useDistPref = distPref }
+
+    mkBuildFlags version = filterBuildFlags version config buildFlags'
+    buildFlags' = buildFlags
+      { buildVerbosity = toFlag verbosity
+      , buildDistPref  = toFlag distPref
+      }
+
+-- | Make sure that we don't pass new flags to setup scripts compiled against
+-- old versions of Cabal.
+filterBuildFlags :: Version -> SavedConfig -> BuildFlags -> BuildFlags
+filterBuildFlags version config buildFlags
+  | version >= mkVersion [1,19,1] = buildFlags_latest
+  -- Cabal < 1.19.1 doesn't support 'build -j'.
+  | otherwise                      = buildFlags_pre_1_19_1
+  where
+    buildFlags_pre_1_19_1 = buildFlags {
+      buildNumJobs = NoFlag
+      }
+    buildFlags_latest     = buildFlags {
+      -- Take the 'jobs' setting config file into account.
+      buildNumJobs = Flag . Just . determineNumJobs $
+                     (numJobsConfigFlag `mappend` numJobsCmdLineFlag)
+      }
+    numJobsConfigFlag  = installNumJobs . savedInstallFlags $ config
+    numJobsCmdLineFlag = buildNumJobs buildFlags
+
+
+replAction :: ReplFlags -> [String] -> Action
+replAction replFlags extraArgs globalFlags = do
+  let verbosity = fromFlagOrDefault normal (replVerbosity replFlags)
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config (replDistPref replFlags)
+  cwd     <- getCurrentDirectory
+  pkgDesc <- findPackageDesc cwd
+  let
+    -- There is a .cabal file in the current directory: start a REPL and load
+    -- the project's modules.
+    onPkgDesc = do
+      -- Calls 'configureAction' to do the real work, so nothing special has to
+      -- be done to support sandboxes.
+      _ <-
+        reconfigure configureAction
+        verbosity distPref NoFlag
+        mempty [] globalFlags config
+      let progDb = defaultProgramDb
+          setupOptions = defaultSetupScriptOptions
+            { useCabalVersion = orLaterVersion $ mkVersion [1,18,0]
+            , useDistPref     = distPref
+            }
+          replFlags'   = replFlags
+            { replVerbosity = toFlag verbosity
+            , replDistPref  = toFlag distPref
+            }
+
+      nixShell verbosity distPref globalFlags config $
+        setupWrapper verbosity setupOptions Nothing (Cabal.replCommand progDb) (const replFlags') (const extraArgs)
+
+    -- No .cabal file in the current directory: just start the REPL (possibly
+    -- using the sandbox package DB).
+    onNoPkgDesc = do
+      let configFlags = savedConfigureFlags config
+      (comp, platform, programDb) <- configCompilerAux' configFlags
+      programDb' <- reconfigurePrograms verbosity
+                                        (replProgramPaths replFlags)
+                                        (replProgramArgs replFlags)
+                                        programDb
+      nixShell verbosity distPref globalFlags config $ do
+        startInterpreter verbosity programDb' comp platform
+                        (configPackageDB' configFlags)
+
+  either (const onNoPkgDesc) (const onPkgDesc) pkgDesc
+
+installAction :: ( ConfigFlags, ConfigExFlags, InstallFlags
+                 , HaddockFlags, TestFlags, BenchmarkFlags )
+              -> [String] -> Action
+installAction (configFlags, _, installFlags, _, _, _) _ globalFlags
+  | fromFlagOrDefault False (installOnly installFlags) = do
+      let verb = fromFlagOrDefault normal (configVerbosity configFlags)
+      config <- loadConfigOrSandboxConfig verb globalFlags
+      dist <- findSavedDistPref config (configDistPref configFlags)
+      let setupOpts = defaultSetupScriptOptions { useDistPref = dist }
+      setupWrapper
+        verb setupOpts Nothing
+        installCommand (const (mempty, mempty, mempty, mempty, mempty, mempty))
+                       (const [])
+
+installAction
+  ( configFlags, configExFlags, installFlags
+  , haddockFlags, testFlags, benchmarkFlags )
+  extraArgs globalFlags = do
+  let verb = fromFlagOrDefault normal (configVerbosity configFlags)
+  config <- updateInstallDirs (configUserInstall configFlags)
+                          <$> loadConfigOrSandboxConfig verb globalFlags
+
+  dist <- findSavedDistPref config (configDistPref configFlags)
+
+  do
+    targets <- readUserTargets verb extraArgs
+
+    let configFlags'    = maybeForceTests installFlags' $
+                          savedConfigureFlags   config `mappend`
+                          configFlags { configDistPref = toFlag dist }
+        configExFlags'  = defaultConfigExFlags         `mappend`
+                          savedConfigureExFlags config `mappend` configExFlags
+        installFlags'   = defaultInstallFlags          `mappend`
+                          savedInstallFlags     config `mappend` installFlags
+        haddockFlags'   = defaultHaddockFlags          `mappend`
+                          savedHaddockFlags     config `mappend`
+                          haddockFlags { haddockDistPref = toFlag dist }
+        testFlags'      = Cabal.defaultTestFlags       `mappend`
+                          savedTestFlags        config `mappend`
+                          testFlags { testDistPref = toFlag dist }
+        benchmarkFlags' = Cabal.defaultBenchmarkFlags  `mappend`
+                          savedBenchmarkFlags   config `mappend`
+                          benchmarkFlags { benchmarkDistPref = toFlag dist }
+        globalFlags'    = savedGlobalFlags      config `mappend` globalFlags
+    (comp, platform, progdb) <- configCompilerAux' configFlags'
+
+    -- TODO: Redesign ProgramDB API to prevent such problems as #2241 in the
+    -- future.
+    progdb' <- configureAllKnownPrograms verb progdb
+
+    configFlags'' <- configAbsolutePaths configFlags'
+
+    withRepoContext verb globalFlags' $ \repoContext ->
+        install verb
+                (configPackageDB' configFlags'')
+                repoContext
+                comp platform progdb'
+                globalFlags' configFlags'' configExFlags'
+                installFlags' haddockFlags' testFlags' benchmarkFlags'
+                targets
+
+      where
+        -- '--run-tests' implies '--enable-tests'.
+        maybeForceTests installFlags' configFlags' =
+          if fromFlagOrDefault False (installRunTests installFlags')
+          then configFlags' { configTests = toFlag True }
+          else configFlags'
+
+testAction :: (BuildFlags, TestFlags) -> [String] -> GlobalFlags
+           -> IO ()
+testAction (buildFlags, testFlags) extraArgs globalFlags = do
+  let verbosity      = fromFlagOrDefault normal (buildVerbosity buildFlags)
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config (testDistPref testFlags)
+  let buildFlags'    = buildFlags
+                      { buildVerbosity = testVerbosity testFlags }
+      checkFlags = Check $ \_ flags@(configFlags, configExFlags) ->
+        if fromFlagOrDefault False (configTests configFlags)
+          then pure (mempty, flags)
+          else do
+            info verbosity "reconfiguring to enable tests"
+            let flags' = ( configFlags { configTests = toFlag True }
+                        , configExFlags
+                        )
+            pure (Any True, flags')
+
+  _ <-
+    reconfigure configureAction
+    verbosity distPref (buildNumJobs buildFlags')
+    checkFlags [] globalFlags config
+  nixShell verbosity distPref globalFlags config $ do
+    let setupOptions   = defaultSetupScriptOptions { useDistPref = distPref }
+        testFlags'     = testFlags { testDistPref = toFlag distPref }
+
+    -- The package was just configured, so the LBI must be available.
+    names <- componentNamesFromLBI verbosity distPref "test suites"
+              (\c -> case c of { LBI.CTest{} -> True; _ -> False })
+    let extraArgs'
+          | null extraArgs = case names of
+            ComponentNamesUnknown -> []
+            ComponentNames names' -> [ Make.unUnqualComponentName name
+                                    | LBI.CTestName name <- names' ]
+          | otherwise      = extraArgs
+
+    build verbosity config distPref buildFlags' extraArgs'
+    setupWrapper verbosity setupOptions Nothing Cabal.testCommand (const testFlags') (const extraArgs')
+
+data ComponentNames = ComponentNamesUnknown
+                    | ComponentNames [LBI.ComponentName]
+
+-- | Return the names of all buildable components matching a given predicate.
+componentNamesFromLBI :: Verbosity -> FilePath -> String
+                         -> (LBI.Component -> Bool)
+                         -> IO ComponentNames
+componentNamesFromLBI verbosity distPref targetsDescr compPred = do
+  eLBI <- tryGetPersistBuildConfig distPref
+  case eLBI of
+    Left err -> case err of
+      -- Note: the build config could have been generated by a custom setup
+      -- script built against a different Cabal version, so it's crucial that
+      -- we ignore the bad version error here.
+      ConfigStateFileBadVersion _ _ _ -> return ComponentNamesUnknown
+      _                               -> die' verbosity (show err)
+    Right lbi -> do
+      let pkgDescr = LBI.localPkgDescr lbi
+          names    = map LBI.componentName
+                     . filter (buildable . LBI.componentBuildInfo)
+                     . filter compPred $
+                     LBI.pkgComponents pkgDescr
+      if null names
+        then do notice verbosity $ "Package has no buildable "
+                  ++ targetsDescr ++ "."
+                exitSuccess -- See #3215.
+
+        else return $! (ComponentNames names)
+
+benchmarkAction :: (BuildFlags, BenchmarkFlags)
+                   -> [String] -> GlobalFlags
+                   -> IO ()
+benchmarkAction
+  (buildFlags, benchmarkFlags)
+  extraArgs globalFlags = do
+  let verbosity      = fromFlagOrDefault normal
+                       (buildVerbosity buildFlags)
+
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config (benchmarkDistPref benchmarkFlags)
+  let buildFlags'    = buildFlags
+                      { buildVerbosity = benchmarkVerbosity benchmarkFlags }
+
+  let checkFlags = Check $ \_ flags@(configFlags, configExFlags) ->
+        if fromFlagOrDefault False (configBenchmarks configFlags)
+          then pure (mempty, flags)
+          else do
+            info verbosity "reconfiguring to enable benchmarks"
+            let flags' = ( configFlags { configBenchmarks = toFlag True }
+                        , configExFlags
+                        )
+            pure (Any True, flags')
+
+  config' <-
+    reconfigure configureAction
+    verbosity distPref (buildNumJobs buildFlags')
+    checkFlags [] globalFlags config
+  nixShell verbosity distPref globalFlags config $ do
+    let setupOptions   = defaultSetupScriptOptions { useDistPref = distPref }
+        benchmarkFlags'= benchmarkFlags { benchmarkDistPref = toFlag distPref }
+
+    -- The package was just configured, so the LBI must be available.
+    names <- componentNamesFromLBI verbosity distPref "benchmarks"
+            (\c -> case c of { LBI.CBench{} -> True; _ -> False; })
+    let extraArgs'
+          | null extraArgs = case names of
+            ComponentNamesUnknown -> []
+            ComponentNames names' -> [ Make.unUnqualComponentName name
+                                    | LBI.CBenchName name <- names']
+          | otherwise      = extraArgs
+
+    build verbosity config' distPref buildFlags' extraArgs'
+    setupWrapper verbosity setupOptions Nothing Cabal.benchmarkCommand (const benchmarkFlags') (const extraArgs')
+
+haddockAction :: HaddockFlags -> [String] -> Action
+haddockAction haddockFlags extraArgs globalFlags = do
+  let verbosity = fromFlag (haddockVerbosity haddockFlags)
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config (haddockDistPref haddockFlags)
+  config' <-
+    reconfigure configureAction
+    verbosity distPref NoFlag
+    mempty [] globalFlags config
+  nixShell verbosity distPref globalFlags config $ do
+    let haddockFlags' = defaultHaddockFlags      `mappend`
+                        savedHaddockFlags config' `mappend`
+                        haddockFlags { haddockDistPref = toFlag distPref }
+        setupScriptOptions = defaultSetupScriptOptions
+                             { useDistPref = distPref }
+    setupWrapper verbosity setupScriptOptions Nothing
+      haddockCommand (const haddockFlags') (const extraArgs)
+    when (haddockForHackage haddockFlags == Flag ForHackage) $ do
+      pkg <- fmap LBI.localPkgDescr (getPersistBuildConfig distPref)
+      let dest = distPref </> name <.> "tar.gz"
+          name = display (packageId pkg) ++ "-docs"
+          docDir = distPref </> "doc" </> "html"
+      createTarGzFile dest docDir name
+      notice verbosity $ "Documentation tarball created: " ++ dest
+
+cleanAction :: CleanFlags -> [String] -> Action
+cleanAction cleanFlags extraArgs globalFlags = do
+  load <- try (loadConfigOrSandboxConfig verbosity globalFlags)
+  let config = either (\(SomeException _) -> mempty) id load
+  distPref <- findSavedDistPref config (cleanDistPref cleanFlags)
+  let setupScriptOptions = defaultSetupScriptOptions
+                           { useDistPref = distPref
+                           , useWin32CleanHack = True
+                           }
+      cleanFlags' = cleanFlags { cleanDistPref = toFlag distPref }
+  setupWrapper verbosity setupScriptOptions Nothing
+               cleanCommand (const cleanFlags') (const extraArgs)
+  where
+    verbosity = fromFlagOrDefault normal (cleanVerbosity cleanFlags)
+
+listAction :: ListFlags -> [String] -> Action
+listAction listFlags extraArgs globalFlags = do
+  let verbosity = fromFlag (listVerbosity listFlags)
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  let configFlags' = savedConfigureFlags config
+      configFlags  = configFlags'
+        { configPackageDBs = configPackageDBs configFlags'
+                           `mappend` listPackageDBs listFlags
+        , configHcPath     = listHcPath listFlags
+        }
+      globalFlags' = savedGlobalFlags    config `mappend` globalFlags
+  compProgdb <- if listNeedsCompiler listFlags
+      then do
+          (comp, _, progdb) <- configCompilerAux' configFlags
+          return (Just (comp, progdb))
+      else return Nothing
+  withRepoContext verbosity globalFlags' $ \repoContext ->
+    List.list verbosity
+       (configPackageDB' configFlags)
+       repoContext
+       compProgdb
+       listFlags
+       extraArgs
+
+infoAction :: InfoFlags -> [String] -> Action
+infoAction infoFlags extraArgs globalFlags = do
+  let verbosity = fromFlag (infoVerbosity infoFlags)
+  targets <- readUserTargets verbosity extraArgs
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  let configFlags' = savedConfigureFlags config
+      configFlags  = configFlags' {
+        configPackageDBs = configPackageDBs configFlags'
+                           `mappend` infoPackageDBs infoFlags
+        }
+      globalFlags' = savedGlobalFlags    config `mappend` globalFlags
+  (comp, _, progdb) <- configCompilerAuxEx configFlags
+  withRepoContext verbosity globalFlags' $ \repoContext ->
+    List.info verbosity
+       (configPackageDB' configFlags)
+       repoContext
+       comp
+       progdb
+       globalFlags'
+       infoFlags
+       targets
+
+fetchAction :: FetchFlags -> [String] -> Action
+fetchAction fetchFlags extraArgs globalFlags = do
+  let verbosity = fromFlag (fetchVerbosity fetchFlags)
+  targets <- readUserTargets verbosity extraArgs
+  config <- loadConfig verbosity (globalConfigFile globalFlags)
+  let configFlags  = savedConfigureFlags config
+      globalFlags' = savedGlobalFlags config `mappend` globalFlags
+  (comp, platform, progdb) <- configCompilerAux' configFlags
+  withRepoContext verbosity globalFlags' $ \repoContext ->
+    fetch verbosity
+        (configPackageDB' configFlags)
+        repoContext
+        comp platform progdb globalFlags' fetchFlags
+        targets
+
+freezeAction :: FreezeFlags -> [String] -> Action
+freezeAction freezeFlags _extraArgs globalFlags = do
+  let verbosity = fromFlag (freezeVerbosity freezeFlags)
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config NoFlag
+  nixShell verbosity distPref globalFlags config $ do
+    let configFlags  = savedConfigureFlags config
+        globalFlags' = savedGlobalFlags config `mappend` globalFlags
+    (comp, platform, progdb) <- configCompilerAux' configFlags
+
+    withRepoContext verbosity globalFlags' $ \repoContext ->
+        freeze verbosity
+            (configPackageDB' configFlags)
+            repoContext
+            comp platform progdb
+            globalFlags' freezeFlags
+
+genBoundsAction :: FreezeFlags -> [String] -> GlobalFlags -> IO ()
+genBoundsAction freezeFlags _extraArgs globalFlags = do
+  let verbosity = fromFlag (freezeVerbosity freezeFlags)
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config NoFlag
+  nixShell verbosity distPref globalFlags config $ do
+    let configFlags  = savedConfigureFlags config
+        globalFlags' = savedGlobalFlags config `mappend` globalFlags
+    (comp, platform, progdb) <- configCompilerAux' configFlags
+
+    withRepoContext verbosity globalFlags' $ \repoContext ->
+        genBounds verbosity
+                (configPackageDB' configFlags)
+                repoContext
+                comp platform progdb
+                globalFlags' freezeFlags
+
+uploadAction :: UploadFlags -> [String] -> Action
+uploadAction uploadFlags extraArgs globalFlags = do
+  config <- loadConfig verbosity (globalConfigFile globalFlags)
+  let uploadFlags' = savedUploadFlags config `mappend` uploadFlags
+      globalFlags' = savedGlobalFlags config `mappend` globalFlags
+      tarfiles     = extraArgs
+  when (null tarfiles && not (fromFlag (uploadDoc uploadFlags'))) $
+    die' verbosity "the 'upload' command expects at least one .tar.gz archive."
+  checkTarFiles extraArgs
+  maybe_password <-
+    case uploadPasswordCmd uploadFlags'
+    of Flag (xs:xss) -> Just . Password <$>
+                        getProgramInvocationOutput verbosity
+                        (simpleProgramInvocation xs xss)
+       _             -> pure $ flagToMaybe $ uploadPassword uploadFlags'
+  withRepoContext verbosity globalFlags' $ \repoContext -> do
+    if fromFlag (uploadDoc uploadFlags')
+    then do
+      when (length tarfiles > 1) $
+       die' verbosity $ "the 'upload' command can only upload documentation "
+             ++ "for one package at a time."
+      tarfile <- maybe (generateDocTarball config) return $ listToMaybe tarfiles
+      Upload.uploadDoc verbosity
+                       repoContext
+                       (flagToMaybe $ uploadUsername uploadFlags')
+                       maybe_password
+                       (fromFlag (uploadCandidate uploadFlags'))
+                       tarfile
+    else do
+      Upload.upload verbosity
+                    repoContext
+                    (flagToMaybe $ uploadUsername uploadFlags')
+                    maybe_password
+                    (fromFlag (uploadCandidate uploadFlags'))
+                    tarfiles
+    where
+    verbosity = fromFlag (uploadVerbosity uploadFlags)
+    checkTarFiles tarfiles
+      | not (null otherFiles)
+      = die' verbosity $ "the 'upload' command expects only .tar.gz archives: "
+           ++ intercalate ", " otherFiles
+      | otherwise = sequence_
+                      [ do exists <- doesFileExist tarfile
+                           unless exists $ die' verbosity $ "file not found: " ++ tarfile
+                      | tarfile <- tarfiles ]
+
+      where otherFiles = filter (not . isTarGzFile) tarfiles
+            isTarGzFile file = case splitExtension file of
+              (file', ".gz") -> takeExtension file' == ".tar"
+              _              -> False
+    generateDocTarball config = do
+      notice verbosity $
+        "No documentation tarball specified. "
+        ++ "Building a documentation tarball with default settings...\n"
+        ++ "If you need to customise Haddock options, "
+        ++ "run 'haddock --for-hackage' first "
+        ++ "to generate a documentation tarball."
+      haddockAction (defaultHaddockFlags { haddockForHackage = Flag ForHackage })
+                    [] globalFlags
+      distPref <- findSavedDistPref config NoFlag
+      pkg <- fmap LBI.localPkgDescr (getPersistBuildConfig distPref)
+      return $ distPref </> display (packageId pkg) ++ "-docs" <.> "tar.gz"
+
+checkAction :: Flag Verbosity -> [String] -> Action
+checkAction verbosityFlag extraArgs _globalFlags = do
+  let verbosity = fromFlag verbosityFlag
+  unless (null extraArgs) $
+    die' verbosity $ "'check' doesn't take any extra arguments: " ++ unwords extraArgs
+  allOk <- Check.check (fromFlag verbosityFlag)
+  unless allOk exitFailure
+
+formatAction :: Flag Verbosity -> [String] -> Action
+formatAction verbosityFlag extraArgs _globalFlags = do
+  let verbosity = fromFlag verbosityFlag
+  path <- case extraArgs of
+    [] -> do cwd <- getCurrentDirectory
+             tryFindPackageDesc verbosity cwd
+    (p:_) -> return p
+  pkgDesc <- readGenericPackageDescription verbosity path
+  -- Uses 'writeFileAtomic' under the hood.
+  writeGenericPackageDescription path pkgDesc
+
+reportAction :: ReportFlags -> [String] -> Action
+reportAction reportFlags extraArgs globalFlags = do
+  let verbosity = fromFlag (reportVerbosity reportFlags)
+  unless (null extraArgs) $
+    die' verbosity $ "'report' doesn't take any extra arguments: " ++ unwords extraArgs
+  config <- loadConfig verbosity (globalConfigFile globalFlags)
+  let globalFlags' = savedGlobalFlags config `mappend` globalFlags
+      reportFlags' = savedReportFlags config `mappend` reportFlags
+
+  withRepoContext verbosity globalFlags' $ \repoContext ->
+   Upload.report verbosity repoContext
+    (flagToMaybe $ reportUsername reportFlags')
+    (flagToMaybe $ reportPassword reportFlags')
+
+runAction :: BuildFlags -> [String] -> Action
+runAction buildFlags extraArgs globalFlags = do
+  let verbosity   = fromFlagOrDefault normal (buildVerbosity buildFlags)
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  distPref <- findSavedDistPref config (buildDistPref buildFlags)
+  config' <-
+    reconfigure configureAction
+    verbosity distPref (buildNumJobs buildFlags)
+    mempty [] globalFlags config
+  nixShell verbosity distPref globalFlags config $ do
+    lbi <- getPersistBuildConfig distPref
+    (exe, exeArgs) <- splitRunArgs verbosity lbi extraArgs
+
+    build verbosity config' distPref buildFlags ["exe:" ++ display (exeName exe)]
+    run verbosity lbi exe exeArgs
+
+getAction :: GetFlags -> [String] -> Action
+getAction getFlags extraArgs globalFlags = do
+  let verbosity = fromFlag (getVerbosity getFlags)
+  targets <- readUserTargets verbosity extraArgs
+  config <- loadConfigOrSandboxConfig verbosity globalFlags
+  let globalFlags' = savedGlobalFlags config `mappend` globalFlags
+  withRepoContext verbosity (savedGlobalFlags config) $ \repoContext ->
+   get verbosity
+    repoContext
+    globalFlags'
+    getFlags
+    targets
+
+unpackAction :: GetFlags -> [String] -> Action
+unpackAction getFlags extraArgs globalFlags = do
+  getAction getFlags extraArgs globalFlags
+
+initAction :: InitFlags -> [String] -> Action
+initAction initFlags extraArgs globalFlags = do
+  -- it takes the first value within extraArgs (if there's one)
+  -- and uses it as the root directory for the new project
+  case extraArgs of
+    [] -> initAction'
+    [projectDir] -> do
+      createDirectoryIfMissingVerbose verbosity True projectDir
+      withCurrentDirectory projectDir initAction'
+    _ -> die' verbosity $
+      "'init' only takes a single, optional, extra " ++
+      "argument for the project root directory"
+  where
+    initAction' = do
+      confFlags <- loadConfigOrSandboxConfig verbosity globalFlags
+      -- override with `--with-compiler` from CLI if available
+      let confFlags' = savedConfigureFlags confFlags `mappend` compFlags
+          initFlags' = savedInitFlags confFlags `mappend` initFlags
+          globalFlags' = savedGlobalFlags confFlags `mappend` globalFlags
+
+      (comp, _, progdb) <- configCompilerAux' confFlags'
+
+      withRepoContext verbosity globalFlags' $ \repoContext ->
+        initCmd verbosity (configPackageDB' confFlags')
+          repoContext comp progdb initFlags'
+
+    verbosity = fromFlag (initVerbosity initFlags)
+    compFlags = mempty { configHcPath = initHcPath initFlags }
+
+userConfigAction :: UserConfigFlags -> [String] -> Action
+userConfigAction ucflags extraArgs globalFlags = do
+  let verbosity  = fromFlag (userConfigVerbosity ucflags)
+      frc        = fromFlag (userConfigForce ucflags)
+      extraLines = fromFlag (userConfigAppendLines ucflags)
+  case extraArgs of
+    ("init":_) -> do
+      path       <- configFile
+      fileExists <- doesFileExist path
+      if (not fileExists || (fileExists && frc))
+      then void $ createDefaultConfigFile verbosity extraLines path
+      else die' verbosity $ path ++ " already exists."
+    ("diff":_) -> traverse_ putStrLn =<< userConfigDiff verbosity globalFlags extraLines
+    ("update":_) -> userConfigUpdate verbosity globalFlags extraLines
+    -- Error handling.
+    [] -> die' verbosity $ "Please specify a subcommand (see 'help user-config')"
+    _  -> die' verbosity $ "Unknown 'user-config' subcommand: " ++ unwords extraArgs
+  where configFile = getConfigFilePath (globalConfigFile globalFlags)
+
+-- | Used as an entry point when cabal-install needs to invoke itself
+-- as a setup script. This can happen e.g. when doing parallel builds.
+--
+actAsSetupAction :: ActAsSetupFlags -> [String] -> Action
+actAsSetupAction actAsSetupFlags args _globalFlags =
+  let bt = fromFlag (actAsSetupBuildType actAsSetupFlags)
+  in case bt of
+    Simple    -> Simple.defaultMainArgs args
+    Configure -> Simple.defaultMainWithHooksArgs
+                  Simple.autoconfUserHooks args
+    Make      -> Make.defaultMainArgs args
+    Custom    -> error "actAsSetupAction Custom"
+
+manpageAction :: [CommandSpec action] -> ManpageFlags -> [String] -> Action
+manpageAction commands flags extraArgs _ = do
+  let verbosity = fromFlag (manpageVerbosity flags)
+  unless (null extraArgs) $
+    die' verbosity $ "'man' doesn't take any extra arguments: " ++ unwords extraArgs
+  pname <- getProgName
+  let cabalCmd = if takeExtension pname == ".exe"
+                 then dropExtension pname
+                 else pname
+  manpageCmd cabalCmd commands flags
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/NixStyleOptions.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/NixStyleOptions.hs
index 3fbcada56..44d52feba 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/NixStyleOptions.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/NixStyleOptions.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE StandaloneDeriving #-}
+
 -- | Command line options for nix-style / v2 commands.
 --
 -- The commands take a lot of the same options, which affect how install plan
@@ -38,9 +40,9 @@ nixStyleOptions
 nixStyleOptions commandOptions showOrParseArgs =
         liftOptions configFlags     set1
         -- Note: [Hidden Flags]
-        -- hide "constraint", "dependency", and
+        -- hide "constraint", "dependency", "promised-dependency" and
         -- "exact-configuration" from the configure options.
-        (filter ((`notElem` ["constraint", "dependency"
+        (filter ((`notElem` ["constraint", "dependency", "promised-dependency"
                             , "exact-configuration"])
                  . optionName) $ configureOptions showOrParseArgs)
      ++ liftOptions configExFlags   set2 (configureExOptions showOrParseArgs
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/PackageHash.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/PackageHash.hs
index 30e495dbd..d2a3d1d90 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/PackageHash.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/PackageHash.hs
@@ -219,7 +219,8 @@ data PackageHashConfigInputs = PackageHashConfigInputs {
        pkgHashHaddockContents     :: Maybe PathTemplate,
        pkgHashHaddockIndex        :: Maybe PathTemplate,
        pkgHashHaddockBaseUrl      :: Maybe String,
-       pkgHashHaddockLib          :: Maybe String
+       pkgHashHaddockLib          :: Maybe String,
+       pkgHashHaddockOutputDir    :: Maybe FilePath
 
 --     TODO: [required eventually] pkgHashToolsVersions     ?
 --     TODO: [required eventually] pkgHashToolsExtraOptions ?
@@ -317,6 +318,7 @@ renderPackageHashInputs PackageHashInputs{
       , opt   "haddock-index-location" Nothing (maybe "" fromPathTemplate) pkgHashHaddockIndex
       , opt   "haddock-base-url" Nothing (fromMaybe "") pkgHashHaddockBaseUrl
       , opt   "haddock-lib" Nothing (fromMaybe "") pkgHashHaddockLib
+      , opt   "haddock-output-dir" Nothing (fromMaybe "") pkgHashHaddockOutputDir
 
       ] ++ Map.foldrWithKey (\prog args acc -> opt (prog ++ "-options") [] unwords args : acc) [] pkgHashProgramArgs
   where
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectBuilding.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectBuilding.hs
index fca3bef09..76e51432a 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectBuilding.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectBuilding.hs
@@ -99,12 +99,15 @@ import qualified Data.ByteString as BS
 import qualified Data.ByteString.Lazy as LBS
 import qualified Data.ByteString.Lazy.Char8 as LBS.Char8
 
+import qualified Text.PrettyPrint as Disp
+
 import Control.Exception (Handler (..), SomeAsyncException, assert, catches, handle)
 import System.Directory  (canonicalizePath, createDirectoryIfMissing, doesDirectoryExist, doesFileExist, removeFile, renameDirectory)
 import System.FilePath   (dropDrive, makeRelative, normalise, takeDirectory, (<.>), (</>))
 import System.IO         (IOMode (AppendMode), Handle, withFile)
 
 import Distribution.Compat.Directory (listDirectory)
+import Distribution.Simple.Flag (fromFlagOrDefault)
 
 
 ------------------------------------------------------------------------------
@@ -223,7 +226,7 @@ rebuildTargetsDryRun distDirLayout@DistDirLayout{..} shared =
     dryRunTarballPkg pkg depsBuildStatus tarball =
       case elabBuildStyle pkg of
         BuildAndInstall  -> return (BuildStatusUnpack tarball)
-        BuildInplaceOnly -> do
+        BuildInplaceOnly {} -> do
           -- TODO: [nice to have] use a proper file monitor rather
           -- than this dir exists test
           exists <- doesDirectoryExist srcdir
@@ -392,7 +395,7 @@ packageFileMonitorKeyValues elab =
             elabBuildTargets   = [],
             elabTestTargets    = [],
             elabBenchTargets   = [],
-            elabReplTarget     = Nothing,
+            elabReplTarget     = [],
             elabHaddockTargets = [],
             elabBuildHaddocks  = False,
 
@@ -559,6 +562,7 @@ invalidatePackageRegFileMonitor PackageFileMonitor{pkgFileMonitorReg} =
 -- It requires the 'BuildStatusMap' gathered by 'rebuildTargetsDryRun'.
 --
 rebuildTargets :: Verbosity
+               -> ProjectConfig
                -> DistDirLayout
                -> StoreDirLayout
                -> ElaboratedInstallPlan
@@ -567,6 +571,9 @@ rebuildTargets :: Verbosity
                -> BuildTimeSettings
                -> IO BuildOutcomes
 rebuildTargets verbosity
+               ProjectConfig {
+                projectConfigBuildOnly = config
+               }
                distDirLayout@DistDirLayout{..}
                storeDirLayout
                installPlan
@@ -578,8 +585,9 @@ rebuildTargets verbosity
                buildSettings@BuildTimeSettings{
                  buildSettingNumJobs,
                  buildSettingKeepGoing
-               } = do
-
+               }
+  | fromFlagOrDefault False (projectConfigOfflineMode config) && not (null packagesToDownload) = return offlineError
+  | otherwise = do
     -- Concurrency control: create the job controller and concurrency limits
     -- for downloading, building and installing.
     jobControl    <- if isParallelBuild
@@ -609,10 +617,10 @@ rebuildTargets verbosity
                           (BuildFailure Nothing . DependentFailed . packageId)
                           installPlan $ \pkg ->
         --TODO: review exception handling
-        handle (\(e :: BuildFailure) -> return (Left e)) $ fmap Right $
+        handle (\(e :: BuildFailure) -> return (Left e)) $ fmap Right $ do
 
         let uid = installedUnitId pkg
-            pkgBuildStatus = Map.findWithDefault (error "rebuildTargets") uid pkgsBuildStatus in
+            pkgBuildStatus = Map.findWithDefault (error "rebuildTargets") uid pkgsBuildStatus
 
         rebuildTarget
           verbosity
@@ -637,6 +645,32 @@ rebuildTargets verbosity
                           , elabSetupPackageDBStack elab ]
         ]
 
+    offlineError :: BuildOutcomes
+    offlineError = Map.fromList . map makeBuildOutcome $ packagesToDownload
+      where
+        makeBuildOutcome :: ElaboratedConfiguredPackage -> (UnitId, BuildOutcome)
+        makeBuildOutcome ElaboratedConfiguredPackage {
+          elabUnitId,
+          elabPkgSourceId = PackageIdentifier { pkgName, pkgVersion }
+        } = (elabUnitId, Left (BuildFailure {
+          buildFailureLogFile = Nothing,
+          buildFailureReason = GracefulFailure $ makeError pkgName pkgVersion
+        }))
+        makeError :: PackageName -> Version -> String
+        makeError n v = "--offline was specified, hence refusing to download the package: "
+          ++ unPackageName n
+          ++ " version " ++ Disp.render (pretty v)
+
+    packagesToDownload :: [ElaboratedConfiguredPackage]
+    packagesToDownload = [elab | InstallPlan.Configured elab <- InstallPlan.reverseTopologicalOrder installPlan,
+                             isRemote $ elabPkgSourceLocation elab]
+      where
+        isRemote :: PackageLocation a -> Bool
+        isRemote (RemoteTarballPackage _ _) = True
+        isRemote (RepoTarballPackage {}) = True
+        isRemote (RemoteSourceRepoPackage _ _) = True
+        isRemote _ = False
+
 
 -- | Create a package DB if it does not currently exist. Note that this action
 -- is /not/ safe to run concurrently.
@@ -720,7 +754,7 @@ rebuildTarget verbosity
 
           case elabBuildStyle pkg of
             BuildAndInstall  -> buildAndInstall
-            BuildInplaceOnly -> buildInplace buildStatus
+            BuildInplaceOnly {} -> buildInplace buildStatus
               where
                 buildStatus = BuildStatusConfigure MonitorFirstRun
 
@@ -730,7 +764,7 @@ rebuildTarget verbosity
     --
     rebuildPhase :: BuildStatusRebuild -> FilePath -> IO BuildResult
     rebuildPhase buildStatus srcdir =
-        assert (elabBuildStyle pkg == BuildInplaceOnly) $
+        assert (isInplaceBuildStyle $ elabBuildStyle pkg)
 
           buildInplace buildStatus srcdir builddir
       where
@@ -864,7 +898,7 @@ withTarballLocalDirectory verbosity distDirLayout@DistDirLayout{..}
         -- In this case we make sure the tarball has been unpacked to the
         -- appropriate location under the shared dist dir, and then build it
         -- inplace there
-        BuildInplaceOnly -> do
+        BuildInplaceOnly {} -> do
           let srcrootdir = distUnpackedSrcRootDirectory
               srcdir     = distUnpackedSrcDirectory pkgid
               builddir   = distBuildDirectory dparams
@@ -1204,7 +1238,7 @@ hasValidHaddockTargets ElaboratedConfiguredPackage{..}
   where
     components :: [ComponentTarget]
     components = elabBuildTargets ++ elabTestTargets ++ elabBenchTargets
-              ++ maybeToList elabReplTarget ++ elabHaddockTargets
+              ++ elabReplTarget ++ elabHaddockTargets
 
     componentHasHaddocks :: ComponentTarget -> Bool
     componentHasHaddocks (ComponentTarget name _) =
@@ -1232,7 +1266,8 @@ buildInplaceUnpackedPackage verbosity
                             distDirLayout@DistDirLayout {
                               distTempDirectory,
                               distPackageCacheDirectory,
-                              distDirectory
+                              distDirectory,
+                              distHaddockOutputDir
                             }
                             BuildTimeSettings{buildSettingNumJobs, buildSettingHaddockOpen}
                             registerLock cacheLock
@@ -1340,7 +1375,7 @@ buildInplaceUnpackedPackage verbosity
         --
         whenRepl $
           annotateFailureNoLog ReplFailed $
-          setupInteractive replCommand replFlags replArgs
+            setupInteractive replCommand replFlags replArgs
 
         -- Haddock phase
         whenHaddock $
@@ -1356,10 +1391,11 @@ buildInplaceUnpackedPackage verbosity
               notice verbosity $ "Documentation tarball created: " ++ dest
 
             when (buildSettingHaddockOpen && haddockTarget /= Cabal.ForHackage) $ do
-              let dest = docDir </> name </> "index.html"
+              let dest = docDir </> "index.html"
                   name = haddockDirName haddockTarget (elabPkgDescription pkg)
-                  docDir = distBuildDirectory distDirLayout dparams
-                           </> "doc" </> "html"
+                  docDir = case distHaddockOutputDir of
+                    Nothing -> distBuildDirectory distDirLayout dparams </> "doc" </> "html" </> name
+                    Just dir -> dir
               exe <- findOpenProgramLocation platform
               case exe of
                 Right open -> runProgramInvocation verbosity (simpleProgramInvocation open [dest])
@@ -1400,8 +1436,8 @@ buildInplaceUnpackedPackage verbosity
       | otherwise                   = action
 
     whenRepl action
-      | isNothing (elabReplTarget pkg) = return ()
-      | otherwise                     = action
+      | null (elabReplTarget pkg) = return ()
+      | otherwise                 = action
 
     whenHaddock action
       | hasValidHaddockTargets pkg = action
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectBuilding/Types.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectBuilding/Types.hs
index f9ac571f3..684ec0339 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectBuilding/Types.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectBuilding/Types.hs
@@ -192,6 +192,7 @@ instance Exception BuildFailure
 -- | Detail on the reason that a package failed to build.
 --
 data BuildFailureReason = DependentFailed PackageId
+                        | GracefulFailure String
                         | DownloadFailed  SomeException
                         | UnpackFailed    SomeException
                         | ConfigureFailed SomeException
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig.hs
index 83184d590..0807a3058 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig.hs
@@ -22,7 +22,7 @@ module Distribution.Client.ProjectConfig (
     -- * Project root
     findProjectRoot,
     ProjectRoot(..),
-    BadProjectRoot(..),
+    BadProjectRoot,
 
     -- * Project config files
     readProjectConfig,
@@ -73,7 +73,7 @@ import Distribution.Client.VCS
 
 import Distribution.Client.Types
 import Distribution.Client.DistDirLayout
-         ( DistDirLayout(..), CabalDirLayout(..), ProjectRoot(..) )
+         ( DistDirLayout(..), CabalDirLayout(..), ProjectRoot(..), defaultProjectFile )
 import Distribution.Client.GlobalFlags
          ( RepoContext(..), withRepoContext' )
 import Distribution.Client.BuildReports.Types
@@ -400,30 +400,61 @@ resolveBuildTimeSettings verbosity
 
 -- | Find the root of this project.
 --
--- Searches for an explicit @cabal.project@ file, in the current directory or
--- parent directories. If no project file is found then the current dir is the
--- project root (and the project will use an implicit config).
+-- The project directory will be one of the following:
+--   1. @mprojectDir@ when present
+--   2. The first directory containing @mprojectFile@/@cabal.project@, starting from the current directory
+--      and recursively checking parent directories
+--   3. The current directory
 --
-findProjectRoot :: Maybe FilePath -- ^ starting directory, or current directory
-                -> Maybe FilePath -- ^ @cabal.project@ file name override
-                -> IO (Either BadProjectRoot ProjectRoot)
-findProjectRoot _ (Just projectFile)
-  | isAbsolute projectFile = do
-    exists <- doesFileExist projectFile
-    if exists
-      then do projectFile' <- canonicalizePath projectFile
-              let projectRoot = ProjectRootExplicit (takeDirectory projectFile')
-                                                    (takeFileName projectFile')
-              return (Right projectRoot)
-      else return (Left (BadProjectRootExplicitFile projectFile))
-
-findProjectRoot mstartdir mprojectFile = do
-    startdir <- maybe getCurrentDirectory canonicalizePath mstartdir
+findProjectRoot
+  :: Verbosity
+  -> Maybe FilePath -- ^ Explicit project directory
+  -> Maybe FilePath -- ^ Explicit project file
+  -> IO (Either BadProjectRoot ProjectRoot)
+findProjectRoot verbosity mprojectDir mprojectFile = do
+  case mprojectDir of
+    Nothing
+      | Just file <- mprojectFile, isAbsolute file -> do
+          warn verbosity $
+            "Specifying an absolute path to the project file is deprecated."
+            <> " Use --project-dir to set the project's directory."
+
+          doesFileExist file >>= \case
+            False -> left (BadProjectRootExplicitFile file)
+            True  -> uncurry projectRoot =<< first dropTrailingPathSeparator . splitFileName <$> canonicalizePath file
+
+      | otherwise -> probeProjectRoot mprojectFile
+
+    Just dir -> doesDirectoryExist dir >>= \case
+      False -> left (BadProjectRootDir dir)
+      True  -> do
+        projectDir <- canonicalizePath dir
+
+        case mprojectFile of
+          Nothing -> pure $ Right (ProjectRootExplicit projectDir defaultProjectFile)
+
+          Just projectFile
+            | isAbsolute projectFile -> doesFileExist projectFile >>= \case
+                False -> left (BadProjectRootAbsoluteFile projectFile)
+                True  -> Right . ProjectRootExplicitAbsolute dir <$> canonicalizePath projectFile
+
+            | otherwise -> doesFileExist (projectDir </> projectFile) >>= \case
+                False -> left (BadProjectRootDirFile dir projectFile)
+                True  -> projectRoot projectDir projectFile
+  where
+    left = pure . Left
+
+    projectRoot projectDir projectFile =
+      pure $ Right (ProjectRootExplicit projectDir projectFile)
+
+probeProjectRoot :: Maybe FilePath -> IO (Either BadProjectRoot ProjectRoot)
+probeProjectRoot mprojectFile = do
+    startdir <- getCurrentDirectory
     homedir  <- getHomeDirectory
     probe startdir homedir
   where
     projectFileName :: String
-    projectFileName = fromMaybe "cabal.project" mprojectFile
+    projectFileName = fromMaybe defaultProjectFile mprojectFile
 
     -- Search upwards. If we get to the users home dir or the filesystem root,
     -- then use the current dir
@@ -443,7 +474,11 @@ findProjectRoot mstartdir mprojectFile = do
 
 -- | Errors returned by 'findProjectRoot'.
 --
-data BadProjectRoot = BadProjectRootExplicitFile FilePath
+data BadProjectRoot
+  = BadProjectRootExplicitFile FilePath
+  | BadProjectRootDir FilePath
+  | BadProjectRootAbsoluteFile FilePath
+  | BadProjectRootDirFile FilePath FilePath
 #if MIN_VERSION_base(4,8,0)
   deriving (Show, Typeable)
 #else
@@ -459,9 +494,19 @@ instance Exception BadProjectRoot where
 #endif
 
 renderBadProjectRoot :: BadProjectRoot -> String
-renderBadProjectRoot (BadProjectRootExplicitFile projectFile) =
+renderBadProjectRoot = \case
+  BadProjectRootExplicitFile projectFile ->
     "The given project file '" ++ projectFile ++ "' does not exist."
 
+  BadProjectRootDir dir ->
+    "The given project directory '" <> dir <> "' does not exist."
+
+  BadProjectRootAbsoluteFile file ->
+    "The given project file '" <> file <> "' does not exist."
+
+  BadProjectRootDirFile dir file ->
+    "The given project directory/file combination '" <> dir </> file <> "' does not exist."
+
 withProjectOrGlobalConfig
     :: Verbosity                  -- ^ verbosity
     -> Flag Bool                  -- ^ whether to ignore local project (--ignore-project flag)
@@ -484,8 +529,7 @@ withProjectOrGlobalConfig'
 withProjectOrGlobalConfig' verbosity globalConfigFlag with without = do
   globalConfig <- runRebuild "" $ readGlobalConfig verbosity globalConfigFlag
 
-  let
-    res' = catch with
+  catch with
       $ \case
         (BadPackageLocations prov locs)
           | prov == Set.singleton Implicit
@@ -496,11 +540,6 @@ withProjectOrGlobalConfig' verbosity globalConfigFlag with without = do
             without globalConfig
         err -> throwIO err
 
-  catch res'
-    $ \case
-      (BadProjectRootExplicitFile "") -> without globalConfig
-      err -> throwIO err
-
 -- | Read all the config relevant for a project. This includes the project
 -- file if any, plus other global config.
 --
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig/Legacy.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig/Legacy.hs
index 7ed747fa9..54d169fb7 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig/Legacy.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig/Legacy.hs
@@ -119,6 +119,7 @@ import Distribution.Fields.ConfVar (parseConditionConfVarFromClause)
 import Distribution.Client.HttpUtils
 import System.FilePath ((</>), isPathSeparator, makeValid, isAbsolute, takeDirectory)
 import System.Directory (createDirectoryIfMissing)
+import Distribution.Client.ReplFlags ( multiReplOption )
 
 
 
@@ -293,7 +294,8 @@ data LegacySharedConfig = LegacySharedConfig {
        legacyConfigureExFlags  :: ConfigExFlags,
        legacyInstallFlags      :: InstallFlags,
        legacyClientInstallFlags:: ClientInstallFlags,
-       legacyProjectFlags      :: ProjectFlags
+       legacyProjectFlags      :: ProjectFlags,
+       legacyMultiRepl         :: Flag Bool
      } deriving (Show, Generic)
 
 instance Monoid LegacySharedConfig where
@@ -327,7 +329,7 @@ commandLineFlagsToProjectConfig globalFlags NixStyleFlags {..} clientInstallFlag
                                      haddockFlags testFlags benchmarkFlags,
       projectConfigShared        = convertLegacyAllPackageFlags
                                      globalFlags configFlags
-                                     configExFlags installFlags projectFlags,
+                                     configExFlags installFlags projectFlags NoFlag,
       projectConfigLocalPackages = localConfig,
       projectConfigAllPackages   = allConfig
     }
@@ -389,7 +391,8 @@ convertLegacyGlobalConfig
       savedHaddockFlags      = haddockFlags,
       savedTestFlags         = testFlags,
       savedBenchmarkFlags    = benchmarkFlags,
-      savedProjectFlags      = projectFlags
+      savedProjectFlags      = projectFlags,
+      savedReplMulti         = replMulti
     } =
     mempty {
       projectConfigBuildOnly   = configBuildOnly,
@@ -412,7 +415,7 @@ convertLegacyGlobalConfig
                             haddockFlags' testFlags' benchmarkFlags'
     configShared        = convertLegacyAllPackageFlags
                             globalFlags configFlags
-                            configExFlags' installFlags' projectFlags'
+                            configExFlags' installFlags' projectFlags' replMulti
     configBuildOnly     = convertLegacyBuildOnlyFlags
                             globalFlags configFlags
                             installFlags' clientInstallFlags'
@@ -432,7 +435,7 @@ convertLegacyProjectConfig
     legacyPackagesNamed,
     legacySharedConfig = LegacySharedConfig globalFlags configShFlags
                                             configExFlags installSharedFlags
-                                            clientInstallFlags projectFlags,
+                                            clientInstallFlags projectFlags multiRepl,
     legacyAllConfig,
     legacyLocalConfig  = LegacyPackageConfig configFlags installPerPkgFlags
                                              haddockFlags testFlags benchmarkFlags,
@@ -460,7 +463,7 @@ convertLegacyProjectConfig
                             testFlags benchmarkFlags
     configPackagesShared= convertLegacyAllPackageFlags
                             globalFlags (configFlags <> configShFlags)
-                            configExFlags installSharedFlags projectFlags
+                            configExFlags installSharedFlags projectFlags multiRepl
     configBuildOnly     = convertLegacyBuildOnlyFlags
                             globalFlags configShFlags
                             installSharedFlags clientInstallFlags
@@ -483,8 +486,9 @@ convertLegacyAllPackageFlags
     -> ConfigExFlags
     -> InstallFlags
     -> ProjectFlags
+    -> Flag Bool
     -> ProjectConfigShared
-convertLegacyAllPackageFlags globalFlags configFlags configExFlags installFlags projectFlags =
+convertLegacyAllPackageFlags globalFlags configFlags configExFlags installFlags projectFlags projectConfigMultiRepl =
     ProjectConfigShared{..}
   where
     GlobalFlags {
@@ -540,7 +544,8 @@ convertLegacyAllPackageFlags globalFlags configFlags configExFlags installFlags
     } = installFlags
 
     ProjectFlags
-        { flagProjectFileName = projectConfigProjectFile
+        { flagProjectDir      = projectConfigProjectDir
+        , flagProjectFile     = projectConfigProjectFile
         , flagIgnoreProject   = projectConfigIgnoreProject
         } = projectFlags
 
@@ -617,7 +622,8 @@ convertLegacyPerPackageFlags configFlags installFlags
       haddockContents           = packageConfigHaddockContents,
       haddockIndex              = packageConfigHaddockIndex,
       haddockBaseUrl            = packageConfigHaddockBaseUrl,
-      haddockLib                = packageConfigHaddockLib
+      haddockLib                = packageConfigHaddockLib,
+      haddockOutputDir          = packageConfigHaddockOutputDir
     } = haddockFlags
 
     TestFlags {
@@ -724,6 +730,7 @@ convertToLegacySharedConfig
       , legacyInstallFlags       = installFlags
       , legacyClientInstallFlags = projectConfigClientInstallFlags
       , legacyProjectFlags       = projectFlags
+      , legacyMultiRepl          = projectConfigMultiRepl
       }
   where
     globalFlags = GlobalFlags {
@@ -801,7 +808,8 @@ convertToLegacySharedConfig
     }
 
     projectFlags = ProjectFlags
-        { flagProjectFileName = projectConfigProjectFile
+        { flagProjectDir      = projectConfigProjectDir
+        , flagProjectFile     = projectConfigProjectFile
         , flagIgnoreProject   = projectConfigIgnoreProject
         }
 
@@ -862,6 +870,7 @@ convertToLegacyAllPackageConfig
       configExtraFrameworkDirs  = mempty,
       configConstraints         = mempty,
       configDependencies        = mempty,
+      configPromisedDependencies = mempty,
       configExtraIncludeDirs    = mempty,
       configDeterministic       = mempty,
       configIPID                = mempty,
@@ -936,6 +945,7 @@ convertToLegacyPerPackageConfig PackageConfig {..} =
       configExtraFrameworkDirs  = packageConfigExtraFrameworkDirs,
       configConstraints         = mempty,
       configDependencies        = mempty,
+      configPromisedDependencies = mempty,
       configExtraIncludeDirs    = packageConfigExtraIncludeDirs,
       configIPID                = mempty,
       configCID                 = mempty,
@@ -983,6 +993,7 @@ convertToLegacyPerPackageConfig PackageConfig {..} =
       haddockIndex         = packageConfigHaddockIndex,
       haddockBaseUrl       = packageConfigHaddockBaseUrl,
       haddockLib           = packageConfigHaddockLib,
+      haddockOutputDir     = packageConfigHaddockOutputDir,
       haddockArgs          = mempty
     }
 
@@ -1211,6 +1222,8 @@ legacySharedConfigFieldDescrs constraintSrc = concat
   . commandOptionsToFields
   $ projectFlagsOptions ParseArgs
 
+  , [ liftField legacyMultiRepl (\flags conf -> conf { legacyMultiRepl = flags }) (commandOptionToField multiReplOption) ]
+
   ]
 
 
@@ -1303,7 +1316,7 @@ legacyPackageConfigFieldDescrs =
       , "executables", "tests", "benchmarks", "all", "internal", "css"
       , "hyperlink-source", "quickjump", "hscolour-css"
       , "contents-location", "index-location", "keep-temp-files", "base-url"
-      , "lib"
+      , "lib", "output-dir"
       ]
   . commandOptionsToFields
   ) (haddockOptions ParseArgs)
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig/Types.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig/Types.hs
index be3aae9bd..256a9ec1f 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig/Types.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectConfig/Types.hs
@@ -162,6 +162,7 @@ data ProjectConfigShared
    = ProjectConfigShared {
        projectConfigDistDir           :: Flag FilePath,
        projectConfigConfigFile        :: Flag FilePath,
+       projectConfigProjectDir        :: Flag FilePath,
        projectConfigProjectFile       :: Flag FilePath,
        projectConfigIgnoreProject     :: Flag Bool,
        projectConfigHcFlavor          :: Flag CompilerFlavor,
@@ -204,7 +205,9 @@ data ProjectConfigShared
        projectConfigIndependentGoals  :: Flag IndependentGoals,
        projectConfigPreferOldest      :: Flag PreferOldest,
 
-       projectConfigProgPathExtra     :: NubList FilePath
+       projectConfigProgPathExtra     :: NubList FilePath,
+
+       projectConfigMultiRepl         :: Flag Bool
 
        -- More things that only make sense for manual mode, not --local mode
        -- too much control!
@@ -290,6 +293,7 @@ data PackageConfig
        packageConfigHaddockIndex        :: Flag PathTemplate, --TODO: [required eventually] use this
        packageConfigHaddockBaseUrl      :: Flag String, --TODO: [required eventually] use this
        packageConfigHaddockLib          :: Flag String, --TODO: [required eventually] use this
+       packageConfigHaddockOutputDir    :: Flag FilePath, --TODO: [required eventually] use this
        packageConfigHaddockForHackage   :: Flag HaddockTarget,
        -- Test options
        packageConfigTestHumanLog        :: Flag PathTemplate,
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectFlags.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectFlags.hs
index bf1d5789e..8959f60ae 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectFlags.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectFlags.hs
@@ -17,12 +17,17 @@ import Distribution.Simple.Command
 import Distribution.Simple.Setup   (Flag (..), flagToList, flagToMaybe, toFlag, trueArg)
 
 data ProjectFlags = ProjectFlags
-    { flagProjectFileName :: Flag FilePath
-      -- ^ The cabal project file name; defaults to @cabal.project@.
-      -- The name itself denotes the cabal project file name, but it also
+    { flagProjectDir :: Flag FilePath
+      -- ^ The project directory.
+
+    , flagProjectFile :: Flag FilePath
+      -- ^ The cabal project file path; defaults to @cabal.project@.
+      -- This path, when relative, is relative to the project directory.
+      -- The filename portion of the path denotes the cabal project file name, but it also
       -- is the base of auxiliary project files, such as
       -- @cabal.project.local@ and @cabal.project.freeze@ which are also
-      -- read and written out in some cases.  If the path is not found
+      -- read and written out in some cases.
+      -- If a project directory was not specified, and the path is not found
       -- in the current working directory, we will successively probe
       -- relative to parent directories until this name is found.
 
@@ -34,23 +39,31 @@ data ProjectFlags = ProjectFlags
 
 defaultProjectFlags :: ProjectFlags
 defaultProjectFlags = ProjectFlags
-    { flagProjectFileName = mempty
+    { flagProjectDir      = mempty
+    , flagProjectFile     = mempty
     , flagIgnoreProject   = toFlag False
       -- Should we use 'Last' here?
     }
 
 projectFlagsOptions :: ShowOrParseArgs -> [OptionField ProjectFlags]
 projectFlagsOptions showOrParseArgs =
-    [ option [] ["project-file"]
-        "Set the name of the cabal.project file to search for in parent directories"
-        flagProjectFileName (\pf flags -> flags { flagProjectFileName = pf })
+    [ option [] ["project-dir"]
+        "Set the path of the project directory"
+        flagProjectDir (\path flags -> flags { flagProjectDir = path })
+        (reqArg "DIR" (succeedReadE Flag) flagToList)
+    , option [] ["project-file"]
+        "Set the path of the cabal.project file (relative to the project directory when relative)"
+        flagProjectFile (\pf flags -> flags { flagProjectFile = pf })
         (reqArg "FILE" (succeedReadE Flag) flagToList)
     , option ['z'] ["ignore-project"]
-        "Ignore local project configuration"
-        -- Flag True: --ignore-project is given and --project-file is not given
-        -- Flag False: --ignore-project and --project-file is given
-        -- NoFlag: neither --ignore-project or --project-file is given
-        flagIgnoreProject (\v flags -> flags { flagIgnoreProject = if v == NoFlag then NoFlag else toFlag ((flagProjectFileName flags) == NoFlag && v == Flag True) })
+        "Ignore local project configuration (unless --project-dir or --project-file is also set)"
+        flagIgnoreProject
+        (\v flags -> flags
+          { flagIgnoreProject = case v of
+              Flag True -> toFlag (flagProjectDir flags == NoFlag && flagProjectFile flags == NoFlag)
+              _         -> v
+          }
+        )
         (yesNoOpt showOrParseArgs)
     ]
 
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectOrchestration.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectOrchestration.hs
index da67b8a3e..79459e40b 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectOrchestration.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectOrchestration.hs
@@ -208,11 +208,12 @@ establishProjectBaseContext
     -> CurrentCommand
     -> IO ProjectBaseContext
 establishProjectBaseContext verbosity cliConfig currentCommand = do
-    projectRoot <- either throwIO return =<< findProjectRoot Nothing mprojectFile
+    projectRoot <- either throwIO return =<< findProjectRoot verbosity mprojectDir mprojectFile
     establishProjectBaseContextWithRoot verbosity cliConfig projectRoot currentCommand
   where
+    mprojectDir    = Setup.flagToMaybe projectConfigProjectDir
     mprojectFile   = Setup.flagToMaybe projectConfigProjectFile
-    ProjectConfigShared { projectConfigProjectFile} = projectConfigShared cliConfig
+    ProjectConfigShared { projectConfigProjectDir, projectConfigProjectFile } = projectConfigShared cliConfig
 
 -- | Like 'establishProjectBaseContext' but doesn't search for project root.
 establishProjectBaseContextWithRoot
@@ -222,7 +223,8 @@ establishProjectBaseContextWithRoot
     -> CurrentCommand
     -> IO ProjectBaseContext
 establishProjectBaseContextWithRoot verbosity cliConfig projectRoot currentCommand = do
-    let distDirLayout  = defaultDistDirLayout projectRoot mdistDirectory
+    let haddockOutputDir = flagToMaybe (packageConfigHaddockOutputDir (projectConfigLocalPackages cliConfig))
+    let distDirLayout = defaultDistDirLayout projectRoot mdistDirectory haddockOutputDir
 
     httpTransport <- configureTransport verbosity
                      (fromNubList . projectConfigProgPathExtra $ projectConfigShared cliConfig)
@@ -399,6 +401,7 @@ runProjectBuildPhase verbosity
                      ProjectBaseContext{..} ProjectBuildContext {..} =
     fmap (Map.union (previousBuildOutcomes pkgsBuildStatus)) $
     rebuildTargets verbosity
+                   projectConfig
                    distDirLayout
                    (cabalStoreDirLayout cabalDirLayout)
                    elaboratedPlanToExecute
@@ -904,6 +907,9 @@ printPlan verbosity
       , if verbosity >= deafening
         then prettyShow (installedUnitId elab)
         else prettyShow (packageId elab)
+      , case elabBuildStyle elab of
+          BuildInplaceOnly InMemory -> "(interactive)"
+          _ -> ""
       , case elabPkgOrComp elab of
           ElabPackage pkg -> showTargets elab ++ ifVerbose (showStanzas (pkgStanzasEnabled pkg))
           ElabComponent comp ->
@@ -1018,6 +1024,7 @@ writeBuildReports settings buildContext plan buildOutcomes = do
       fromPlanPackage (InstallPlan.Configured pkg) (Just result) =
             let installOutcome = case result of
                    Left bf -> case buildFailureReason bf of
+                      GracefulFailure _ -> BuildReports.PlanningFailed
                       DependentFailed p -> BuildReports.DependencyFailed p
                       DownloadFailed _  -> BuildReports.DownloadFailed
                       UnpackFailed _ -> BuildReports.UnpackFailed
@@ -1049,7 +1056,7 @@ writeBuildReports settings buildContext plan buildOutcomes = do
                       TestsNotTried -> BuildReports.NotTried
                       TestsOk -> BuildReports.Ok
 
-            in Just $ (BuildReports.BuildReport (packageId pkg) os arch (compilerId comp) cabalInstallID (elabFlagAssignment pkg) (map packageId $ elabLibDependencies pkg) installOutcome docsOutcome testsOutcome, getRepo . elabPkgSourceLocation $ pkg) -- TODO handle failure log files?
+            in Just $ (BuildReports.BuildReport (packageId pkg) os arch (compilerId comp) cabalInstallID (elabFlagAssignment pkg) (map (packageId . fst) $ elabLibDependencies pkg) installOutcome docsOutcome testsOutcome, getRepo . elabPkgSourceLocation $ pkg) -- TODO handle failure log files?
       fromPlanPackage _ _ = Nothing
       buildReports = mapMaybe (\x -> fromPlanPackage x (InstallPlan.lookupBuildOutcome x buildOutcomes)) $ InstallPlan.toList plan
 
@@ -1208,6 +1215,7 @@ dieOnBuildFailures verbosity currentCommand plan buildOutcomes
           TestsFailed     _ -> "Tests failed for " ++ pkgstr
           BenchFailed     _ -> "Benchmarks failed for " ++ pkgstr
           InstallFailed   _ -> "Failed to build "  ++ pkgstr
+          GracefulFailure msg -> msg
           DependentFailed depid
                             -> "Failed to build " ++ prettyShow (packageId pkg)
                             ++ " because it depends on " ++ prettyShow depid
@@ -1300,6 +1308,7 @@ dieOnBuildFailures verbosity currentCommand plan buildOutcomes
         TestsFailed     e -> Just e
         BenchFailed     e -> Just e
         InstallFailed   e -> Just e
+        GracefulFailure _ -> Nothing
         DependentFailed _ -> Nothing
 
 data BuildFailurePresentation =
@@ -1354,7 +1363,7 @@ establishDummyProjectBaseContext verbosity projectConfig distDirLayout localPack
 
 establishDummyDistDirLayout :: Verbosity -> ProjectConfig -> FilePath -> IO DistDirLayout
 establishDummyDistDirLayout verbosity cliConfig tmpDir = do
-    let distDirLayout = defaultDistDirLayout projectRoot mdistDirectory
+    let distDirLayout = defaultDistDirLayout projectRoot mdistDirectory Nothing
 
     -- Create the dist directories
     createDirectoryIfMissingVerbose verbosity True $ distDirectory distDirLayout
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanOutput.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanOutput.hs
index c9243c310..44cd5691d 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanOutput.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanOutput.hs
@@ -152,7 +152,7 @@ encodePlanAsJson distDirLayout elaboratedInstallPlan elaboratedSharedConfig =
         [ "pkg-src-sha256" J..= J.String (showHashValue hash)
         | Just hash <- [elabPkgSourceHash elab] ] ++
         (case elabBuildStyle elab of
-            BuildInplaceOnly ->
+            BuildInplaceOnly {} ->
                 ["dist-dir"   J..= J.String dist_dir] ++ [buildInfoFileLocation]
             BuildAndInstall ->
                 -- TODO: install dirs?
@@ -162,7 +162,7 @@ encodePlanAsJson distDirLayout elaboratedInstallPlan elaboratedSharedConfig =
           ElabPackage pkg ->
             let components = J.object $
                   [ comp2str c J..= (J.object $
-                    [ "depends"     J..= map (jdisplay . confInstId) ldeps
+                    [ "depends"     J..= map (jdisplay . confInstId) (map fst ldeps)
                     , "exe-depends" J..= map (jdisplay . confInstId) edeps
                     ] ++
                     bin_file c)
@@ -172,7 +172,7 @@ encodePlanAsJson distDirLayout elaboratedInstallPlan elaboratedSharedConfig =
                                            (pkgExeDependencies pkg) ]
             in ["components" J..= components]
           ElabComponent comp ->
-            ["depends"     J..= map (jdisplay . confInstId) (elabLibDependencies elab)
+            ["depends"     J..= map (jdisplay . confInstId) (map fst $ elabLibDependencies elab)
             ,"exe-depends" J..= map jdisplay (elabExeDependencies elab)
             ,"component-name" J..= J.String (comp2str (compSolverName comp))
             ] ++
@@ -256,7 +256,7 @@ encodePlanAsJson distDirLayout elaboratedInstallPlan elaboratedSharedConfig =
       bin_file' s =
         ["bin-file" J..= J.String bin]
        where
-        bin = if elabBuildStyle elab == BuildInplaceOnly
+        bin = if isInplaceBuildStyle (elabBuildStyle elab)
                then dist_dir </> "build" </> prettyShow s </> prettyShow s <.> exeExtension plat
                else InstallDirs.bindir (elabInstallDirs elab) </> prettyShow s <.> exeExtension plat
 
@@ -264,7 +264,7 @@ encodePlanAsJson distDirLayout elaboratedInstallPlan elaboratedSharedConfig =
       flib_file' s =
         ["bin-file" J..= J.String bin]
        where
-        bin = if elabBuildStyle elab == BuildInplaceOnly
+        bin = if isInplaceBuildStyle (elabBuildStyle elab)
                then dist_dir </> "build" </> prettyShow s </> ("lib" ++ prettyShow s) <.> dllExtension plat
                else InstallDirs.bindir (elabInstallDirs elab) </> ("lib" ++ prettyShow s) <.> dllExtension plat
 
@@ -273,7 +273,8 @@ encodePlanAsJson distDirLayout elaboratedInstallPlan elaboratedSharedConfig =
 
     style2str :: Bool -> BuildStyle -> String
     style2str True  _                = "local"
-    style2str False BuildInplaceOnly = "inplace"
+    style2str False (BuildInplaceOnly OnDisk) = "inplace"
+    style2str False (BuildInplaceOnly InMemory) = "interactive"
     style2str False BuildAndInstall  = "global"
 
     jdisplay :: Pretty a => a -> J.Value
@@ -601,7 +602,7 @@ postBuildProjectStatus plan previousPackagesUpToDate
         ]
 
     elabLibDeps :: ElaboratedConfiguredPackage -> [UnitId]
-    elabLibDeps = map (newSimpleUnitId . confInstId) . elabLibDependencies
+    elabLibDeps = map (newSimpleUnitId . confInstId) . map fst . elabLibDependencies
 
     -- Was a build was attempted for this package?
     -- If it doesn't have both a build status and outcome then the answer is no.
@@ -640,8 +641,8 @@ postBuildProjectStatus plan previousPackagesUpToDate
         case pkg of
           InstallPlan.PreExisting _     -> False
           InstallPlan.Installed   _     -> False
-          InstallPlan.Configured srcpkg -> elabBuildStyle srcpkg
-                                        == BuildInplaceOnly
+          InstallPlan.Configured srcpkg -> isInplaceBuildStyle (elabBuildStyle srcpkg)
+
     packagesAlreadyInStore :: Set UnitId
     packagesAlreadyInStore =
       selectPlanPackageIdSet $ \pkg ->
@@ -947,7 +948,7 @@ selectGhcEnvironmentFilePackageDbs elaboratedInstallPlan =
     inplacePackages =
       [ srcpkg
       | srcpkg <- sourcePackages
-      , elabBuildStyle srcpkg == BuildInplaceOnly ]
+      , isInplaceBuildStyle (elabBuildStyle srcpkg) ]
 
     sourcePackages :: [ElaboratedConfiguredPackage]
     sourcePackages =
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning.hs
index 16ff6e0d5..92d2a3128 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning.hs
@@ -124,8 +124,8 @@ import           Distribution.Types.ComponentName
 import           Distribution.Types.DumpBuildInfo
                    ( DumpBuildInfo (..) )
 import           Distribution.Types.LibraryName
-import           Distribution.Types.GivenComponent
-  (GivenComponent(..))
+import Distribution.Types.GivenComponent
+    ( GivenComponent(GivenComponent) )
 import           Distribution.Types.PackageVersionConstraint
 import           Distribution.Types.PkgconfigDependency
 import           Distribution.Types.UnqualComponentName
@@ -235,19 +235,24 @@ sanityCheckElaboratedConfiguredPackage
     -> ElaboratedConfiguredPackage
     -> a
     -> a
-sanityCheckElaboratedConfiguredPackage sharedConfig
+sanityCheckElaboratedConfiguredPackage _sharedConfig
                              elab@ElaboratedConfiguredPackage{..} =
     (case elabPkgOrComp of
         ElabPackage pkg -> sanityCheckElaboratedPackage elab pkg
         ElabComponent comp -> sanityCheckElaboratedComponent elab comp)
 
+    -- The assertion below fails occasionally for unknown reason
+    -- so it was muted until we figure it out, otherwise it severely
+    -- hinders our ability to share and test development builds of cabal-install.
+    -- Tracking issue: https://github.com/haskell/cabal/issues/6006
+    --
     -- either a package is being built inplace, or the
     -- 'installedPackageId' we assigned is consistent with
     -- the 'hashedInstalledPackageId' we would compute from
     -- the elaborated configured package
-  . assert (elabBuildStyle == BuildInplaceOnly ||
-     elabComponentId == hashedInstalledPackageId
-                            (packageHashInputs sharedConfig elab))
+  -- . assert (isInplaceBuildStyle elabBuildStyle ||
+  --    elabComponentId == hashedInstalledPackageId
+  --                           (packageHashInputs sharedConfig elab))
 
     -- the stanzas explicitly disabled should not be available
   . assert (optStanzaSetNull $
@@ -256,7 +261,7 @@ sanityCheckElaboratedConfiguredPackage sharedConfig
     -- either a package is built inplace, or we are not attempting to
     -- build any test suites or benchmarks (we never build these
     -- for remote packages!)
-  . assert (elabBuildStyle == BuildInplaceOnly ||
+  . assert (isInplaceBuildStyle elabBuildStyle ||
      optStanzaSetNull elabStanzasAvailable)
 
 sanityCheckElaboratedComponent
@@ -268,7 +273,7 @@ sanityCheckElaboratedComponent ElaboratedConfiguredPackage{..}
                                ElaboratedComponent{..} =
 
     -- Should not be building bench or test if not inplace.
-    assert (elabBuildStyle == BuildInplaceOnly ||
+    assert (isInplaceBuildStyle elabBuildStyle ||
      case compComponentName of
         Nothing              -> True
         Just (CLibName _)    -> True
@@ -707,7 +712,7 @@ rebuildInstallPlan verbosity
                   installDirs
                   elaboratedShared
                   elaboratedPlan
-        liftIO $ debugNoWrap verbosity (InstallPlan.showInstallPlan instantiatedPlan)
+        liftIO $ debugNoWrap verbosity (showElaboratedInstallPlan instantiatedPlan)
         return (instantiatedPlan, elaboratedShared)
       where
         withRepoCtx = projectConfigWithSolverRepoContext verbosity
@@ -749,7 +754,7 @@ rebuildInstallPlan verbosity
         let improvedPlan = improveInstallPlanWithInstalledPackages
                              storePkgIdSet
                              elaboratedPlan
-        liftIO $ debugNoWrap verbosity (InstallPlan.showInstallPlan improvedPlan)
+        liftIO $ debugNoWrap verbosity (showElaboratedInstallPlan improvedPlan)
         -- TODO: [nice to have] having checked which packages from the store
         -- we're using, it may be sensible to sanity check those packages
         -- by loading up the compiler package db and checking everything
@@ -1200,7 +1205,6 @@ planPackages verbosity comp platform solver SolverSettings{..}
     -- respective major Cabal version bundled with the respective GHC
     -- release).
     --
-    -- etc.
     -- GHC 9.2   needs  Cabal >= 3.6
     -- GHC 9.0   needs  Cabal >= 3.4
     -- GHC 8.10  needs  Cabal >= 3.2
@@ -1527,7 +1531,8 @@ elaborateInstallPlan verbosity platform compiler compilerprogdb pkgConfigDB
             compComponentName   = Nothing
             dep_pkgs = elaborateLibSolverId mapDep =<< CD.setupDeps deps0
             compLibDependencies
-                = map configuredId dep_pkgs
+            -- MP: No idea what this function does
+                = map (\cid -> (configuredId cid, False)) dep_pkgs
             compLinkedLibDependencies = notImpl "compLinkedLibDependencies"
             compOrderLibDependencies = notImpl "compOrderLibDependencies"
             -- Not supported:
@@ -1562,11 +1567,13 @@ elaborateInstallPlan verbosity platform compiler compilerprogdb pkgConfigDB
                     (Map.unionWith Map.union external_exe_cc_map cc_map)
                     comp
 
-
+            let do_ cid =
+                  let cid' = annotatedIdToConfiguredId . ci_ann_id $ cid
+                  in (cid', False) -- filled in later in pruneInstallPlanPhase2)
             -- 2. Read out the dependencies from the ConfiguredComponent cc0
             let compLibDependencies =
                     -- Nub because includes can show up multiple times
-                    ordNub (map (annotatedIdToConfiguredId . ci_ann_id)
+                    ordNub (map (\cid -> do_ cid )
                                 (cc_includes cc0))
                 compExeDependencies =
                     map annotatedIdToConfiguredId
@@ -1585,7 +1592,7 @@ elaborateInstallPlan verbosity platform compiler compilerprogdb pkgConfigDB
                         elabPkgOrComp = ElabComponent $ elab_comp
                      }
                 cid = case elabBuildStyle elab0 of
-                        BuildInplaceOnly ->
+                        BuildInplaceOnly {} ->
                           mkComponentId $
                             prettyShow pkgid ++ "-inplace" ++
                               (case Cabal.componentNameString cname of
@@ -1604,7 +1611,7 @@ elaborateInstallPlan verbosity platform compiler compilerprogdb pkgConfigDB
                     case Map.lookup (unDefUnitId def_uid) preexistingInstantiatedPkgs of
                         Just full -> full
                         Nothing -> error ("lookup_uid: " ++ prettyShow def_uid)
-            lc <- toLinkedComponent verbosity lookup_uid (elabPkgSourceId elab0)
+            lc <- toLinkedComponent verbosity False lookup_uid (elabPkgSourceId elab0)
                         (Map.union external_lc_map lc_map) cc
             infoProgress $ dispLinkedComponent lc
             -- NB: elab is setup to be the correct form for an
@@ -1785,7 +1792,7 @@ elaborateInstallPlan verbosity platform compiler compilerprogdb pkgConfigDB
         filterExt' = filter (isExt . fst)
 
         pkgLibDependencies
-            = buildComponentDeps (filterExt  . compLibDependencies)
+            = buildComponentDeps (filterExt'  . compLibDependencies)
         pkgExeDependencies
             = buildComponentDeps (filterExt  . compExeDependencies)
         pkgExeDependencyPaths
@@ -1881,7 +1888,7 @@ elaborateInstallPlan verbosity platform compiler compilerprogdb pkgConfigDB
         elabBuildTargets    = []
         elabTestTargets     = []
         elabBenchTargets    = []
-        elabReplTarget      = Nothing
+        elabReplTarget      = []
         elabHaddockTargets  = []
 
         elabBuildHaddocks   =
@@ -1891,7 +1898,7 @@ elaborateInstallPlan verbosity platform compiler compilerprogdb pkgConfigDB
         elabPkgSourceHash   = Map.lookup pkgid sourcePackageHashes
         elabLocalToProject  = isLocalToProject pkg
         elabBuildStyle      = if shouldBuildInplaceOnly pkg
-                                then BuildInplaceOnly else BuildAndInstall
+                                then BuildInplaceOnly OnDisk else BuildAndInstall
         elabPackageDbs             = projectConfigPackageDBs sharedPackageConfig
         elabBuildPackageDBStack    = buildAndRegisterDbs
         elabRegisterPackageDBStack = buildAndRegisterDbs
@@ -1979,6 +1986,7 @@ elaborateInstallPlan verbosity platform compiler compilerprogdb pkgConfigDB
         elabHaddockIndex        = perPkgOptionMaybe pkgid packageConfigHaddockIndex
         elabHaddockBaseUrl      = perPkgOptionMaybe pkgid packageConfigHaddockBaseUrl
         elabHaddockLib          = perPkgOptionMaybe pkgid packageConfigHaddockLib
+        elabHaddockOutputDir    = perPkgOptionMaybe pkgid packageConfigHaddockOutputDir
 
         elabTestMachineLog      = perPkgOptionMaybe pkgid packageConfigTestMachineLog
         elabTestHumanLog        = perPkgOptionMaybe pkgid packageConfigTestHumanLog
@@ -2214,7 +2222,7 @@ binDirectories layout config package = case elabBuildStyle package of
   -- to put any executables in it, that will just clog up the PATH
   _ | noExecutables -> []
   BuildAndInstall -> [installedBinDirectory package]
-  BuildInplaceOnly -> map (root</>) $ case elabPkgOrComp package of
+  BuildInplaceOnly {} -> map (root</>) $ case elabPkgOrComp package of
     ElabComponent comp -> case compSolverName comp of
       CD.ComponentExe n -> [prettyShow n]
       _ -> []
@@ -2439,9 +2447,9 @@ instantiateInstallPlan storeDirLayout defaultInstallDirs elaboratedShared plan =
       | otherwise = error ("indefiniteComponent: " ++ prettyShow cid)
 
     fixupBuildStyle BuildAndInstall elab = elab
-    fixupBuildStyle _ (elab@ElaboratedConfiguredPackage { elabBuildStyle = BuildInplaceOnly }) = elab
-    fixupBuildStyle BuildInplaceOnly elab = elab {
-      elabBuildStyle = BuildInplaceOnly,
+    fixupBuildStyle _ (elab@ElaboratedConfiguredPackage { elabBuildStyle = BuildInplaceOnly {} }) = elab
+    fixupBuildStyle t@(BuildInplaceOnly {}) elab = elab {
+      elabBuildStyle = t,
       elabBuildPackageDBStack = elabInplaceBuildPackageDBStack elab,
       elabRegisterPackageDBStack = elabInplaceRegisterPackageDBStack elab,
       elabSetupPackageDBStack = elabInplaceSetupPackageDBStack elab
@@ -2727,7 +2735,7 @@ nubComponentTargets =
 
 pkgHasEphemeralBuildTargets :: ElaboratedConfiguredPackage -> Bool
 pkgHasEphemeralBuildTargets elab =
-    isJust (elabReplTarget elab)
+    (not . null) (elabReplTarget elab)
  || (not . null) (elabTestTargets elab)
  || (not . null) (elabBenchTargets elab)
  || (not . null) (elabHaddockTargets elab)
@@ -2831,13 +2839,12 @@ setRootTargets targetAction perPkgTargetsMap =
         (Just tgts,  TargetActionBuild)   -> elab { elabBuildTargets = tgts }
         (Just tgts,  TargetActionTest)    -> elab { elabTestTargets  = tgts }
         (Just tgts,  TargetActionBench)   -> elab { elabBenchTargets  = tgts }
-        (Just [tgt], TargetActionRepl)    -> elab { elabReplTarget = Just tgt
-                                                  , elabBuildHaddocks = False }
+        (Just tgts, TargetActionRepl)     -> elab { elabReplTarget = tgts
+                                                  , elabBuildHaddocks = False
+                                                  , elabBuildStyle = BuildInplaceOnly InMemory }
         (Just tgts,  TargetActionHaddock) ->
           foldr setElabHaddockTargets (elab { elabHaddockTargets = tgts
                                             , elabBuildHaddocks = True }) tgts
-        (Just _,     TargetActionRepl)    ->
-          error "pruneInstallPlanToTargets: multiple repl targets"
 
     setElabHaddockTargets tgt elab
       | isTestComponentTarget tgt       = elab { elabHaddockTestSuites  = True }
@@ -2847,6 +2854,9 @@ setRootTargets targetAction perPkgTargetsMap =
       | isSubLibComponentTarget tgt     = elab { elabHaddockInternal    = True }
       | otherwise                       = elab
 
+minVersionReplFlagFile :: Version
+minVersionReplFlagFile = mkVersion [3,9]
+
 -- | Assuming we have previously set the root build targets (i.e. the user
 -- targets but not rev deps yet), the first pruning pass does two things:
 --
@@ -2858,26 +2868,107 @@ setRootTargets targetAction perPkgTargetsMap =
 --
 pruneInstallPlanPass1 :: [ElaboratedPlanPackage]
                       -> [ElaboratedPlanPackage]
-pruneInstallPlanPass1 pkgs =
-    map (mapConfiguredPackage fromPrunedPackage)
-        (fromMaybe [] $ Graph.closure graph roots)
+pruneInstallPlanPass1 pkgs
+    -- if there are repl targets, we need to do a bit more work
+    -- See Note [Pruning for Multi Repl]
+    | anyReplTarget = final_final_graph
+
+    -- otherwise we'll do less
+    | otherwise     = pruned_packages
   where
+    pkgs' :: [InstallPlan.GenericPlanPackage IPI.InstalledPackageInfo PrunedPackage]
     pkgs' = map (mapConfiguredPackage prune) pkgs
-    graph = Graph.fromDistinctList pkgs'
-    roots = mapMaybe find_root pkgs'
 
+    prune :: ElaboratedConfiguredPackage -> PrunedPackage
     prune elab = PrunedPackage elab' (pruneOptionalDependencies elab')
       where elab' =
                 setDocumentation
               $ addOptionalStanzas elab
 
+    graph = Graph.fromDistinctList pkgs'
+
+    roots :: [UnitId]
+    roots = mapMaybe find_root pkgs'
+
+    -- Make a closed graph by calculating the closure from the roots
+    pruned_packages :: [ElaboratedPlanPackage]
+    pruned_packages =  map (mapConfiguredPackage fromPrunedPackage) (fromMaybe [] $ Graph.closure graph roots)
+
+    closed_graph :: Graph.Graph ElaboratedPlanPackage
+    closed_graph = Graph.fromDistinctList pruned_packages
+
+    -- whether any package has repl targets enabled.
+    anyReplTarget :: Bool
+    anyReplTarget = any is_repl_gpp pkgs' where
+      is_repl_gpp (InstallPlan.Configured pkg) = is_repl_pp pkg
+      is_repl_gpp _                            = False
+
+      is_repl_pp (PrunedPackage elab _) = not (null (elabReplTarget elab))
+
+    -- Anything which is inplace and left after pruning could be a repl target, then just need to check the
+    -- reverse closure after calculating roots to capture dependencies which are on the path between roots.
+    -- In order to start a multi-repl session with all the desired targets we need to load all these components into
+    -- the repl at once to satisfy the closure property.
+    all_desired_repl_targets = Set.fromList [elabUnitId cp | InstallPlan.Configured cp <- fromMaybe [] $ Graph.revClosure closed_graph roots]
+
+    add_repl_target :: ElaboratedConfiguredPackage -> ElaboratedConfiguredPackage
+    add_repl_target ecp | elabUnitId ecp `Set.member` all_desired_repl_targets
+      = ecp { elabReplTarget = maybeToList (ComponentTarget <$> (elabComponentName ecp) <*> pure WholeComponent)
+            , elabBuildStyle = BuildInplaceOnly InMemory }
+                        | otherwise = ecp
+
+    -- Add the repl target information to the ElaboratedPlanPackages
+    graph_with_repl_targets
+      | anyReplTarget = map (mapConfiguredPackage add_repl_target) (Graph.toList closed_graph)
+      | otherwise     = Graph.toList closed_graph
+
+    -- But check that all the InMemory targets have a new enough version of Cabal,
+    -- otherwise we will confuse Setup.hs by passing new arguments which it doesn't understand
+    -- later down the line. We try to remove just these edges, if it doesn't break the overall structure
+    -- then we just report to the user that their target will not be loaded for this reason.
+
+    (bad -- Nodes which we wanted to build InMemory but lack new enough version of Cabal
+      , _good -- Nodes we want to build in memory.
+      ) = partitionEithers (map go graph_with_repl_targets)
+      where
+        go :: ElaboratedPlanPackage -> Either UnitId ElaboratedPlanPackage
+        go (InstallPlan.Configured cp)
+          | BuildInplaceOnly InMemory <- elabBuildStyle cp
+          , elabSetupScriptCliVersion cp < minVersionReplFlagFile = Left (elabUnitId cp)
+        go (InstallPlan.Configured c) = Right (InstallPlan.Configured c)
+        go c = Right c
+
+    -- Now take the upwards closure from the bad nodes, and find the other `BuildInplaceOnly InMemory` packages that clobbers,
+    -- disables those and issue a warning to the user. Because we aren't going to be able to load those into memory as well
+    -- because the thing it depends on is not going to be in memory.
+
+    disabled_repl_targets =
+      [ c | InstallPlan.Configured c <- fromMaybe [] $ Graph.revClosure (Graph.fromDistinctList graph_with_repl_targets) bad
+          , BuildInplaceOnly InMemory <- [elabBuildStyle c]  ]
+
+    remove_repl_target :: ElaboratedConfiguredPackage -> ElaboratedConfiguredPackage
+    remove_repl_target ecp | ecp `elem` disabled_repl_targets = ecp { elabReplTarget = []
+                                                                    , elabBuildStyle = BuildInplaceOnly OnDisk }
+                           | otherwise = ecp
+
+    final_graph_with_repl_targets = map (mapConfiguredPackage remove_repl_target) graph_with_repl_targets
+
+    -- Now find what the new roots are after we have disabled things which we can't build (and the things above that)
+    new_roots :: [UnitId]
+    new_roots = mapMaybe find_root (map (mapConfiguredPackage prune) final_graph_with_repl_targets)
+
+    -- Then take the final closure from these new roots to remove these things
+    -- TODO: Can probably just remove them directly in remove_repl_target.
+    final_final_graph = fromMaybe [] $ Graph.closure (Graph.fromDistinctList final_graph_with_repl_targets) new_roots
+
+
     is_root :: PrunedPackage -> Maybe UnitId
     is_root (PrunedPackage elab _) =
       if not $ and [ null (elabConfigureTargets elab)
                    , null (elabBuildTargets elab)
                    , null (elabTestTargets elab)
                    , null (elabBenchTargets elab)
-                   , isNothing (elabReplTarget elab)
+                   , null (elabReplTarget elab)
                    , null (elabHaddockTargets elab)
                    ]
           then Just (installedUnitId elab)
@@ -2975,7 +3066,7 @@ pruneInstallPlanPass1 pkgs =
         | ComponentTarget cname _ <- elabBuildTargets pkg
                                   ++ elabTestTargets pkg
                                   ++ elabBenchTargets pkg
-                                  ++ maybeToList (elabReplTarget pkg)
+                                  ++ elabReplTarget pkg
                                   ++ elabHaddockTargets pkg
         , stanza <- maybeToList $
                     componentOptionalStanza $
@@ -2987,6 +3078,38 @@ pruneInstallPlanPass1 pkgs =
         [ installedUnitId pkg
         | InstallPlan.PreExisting pkg <- pkgs ]
 
+{-
+Note [Pruning for Multi Repl]
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+For a multi-repl session, where we load more than one component into a GHCi repl,
+it is required to uphold the so-called *closure property*.
+This property, whose exact Note you can read in the GHC codebase, states
+roughly:
+
+* If a component you want to load into a repl session transitively depends on a
+  component which transitively depends on another component you want to
+  load into the repl, then this component needs to be loaded
+  into the repl session as well.
+
+We make sure here, that this property is upheld, by calculating the
+graph of components that we need to load into the repl given the set of 'roots' which
+are the targets specified by the user.
+
+Practically, this is simply achieved by traversing all dependencies of
+our roots (graph closure), and then from this closed graph, we calculate
+the reverse closure, which gives us all components that depend on
+'roots'. Thus, the result is a list of components that we need to load
+into the repl to uphold the closure property.
+
+Further to this, we then check that all the enabled components are using a new enough
+version of Cabal which understands the repl option to write the arguments to a file.
+
+If there is a package using a custom Setup.hs which is linked against a too old version
+of Cabal then we need to disable that as otherwise we will end up passing unknown
+arguments to `./Setup`.
+-}
+
 -- | Given a set of already installed packages @availablePkgs@,
 -- determine the set of available optional stanzas from @pkg@
 -- which have all of their dependencies already installed.  This is used
@@ -3047,6 +3170,7 @@ pruneInstallPlanPass2 pkgs =
     map (mapConfiguredPackage setStanzasDepsAndTargets) pkgs
   where
     setStanzasDepsAndTargets elab =
+
         elab {
           elabBuildTargets = ordNub
                            $ elabBuildTargets elab
@@ -3060,18 +3184,27 @@ pruneInstallPlanPass2 pkgs =
                     keepNeeded (CD.ComponentTest  _) _ = TestStanzas  `optStanzaSetMember` stanzas
                     keepNeeded (CD.ComponentBench _) _ = BenchStanzas `optStanzaSetMember` stanzas
                     keepNeeded _                     _ = True
+
                 in ElabPackage $ pkg {
                   pkgStanzasEnabled = stanzas,
-                  pkgLibDependencies   = CD.filterDeps keepNeeded (pkgLibDependencies pkg),
+                  pkgLibDependencies   = CD.mapDeps (\_ -> map addInternal) $ CD.filterDeps keepNeeded (pkgLibDependencies pkg),
                   pkgExeDependencies   = CD.filterDeps keepNeeded (pkgExeDependencies pkg),
                   pkgExeDependencyPaths = CD.filterDeps keepNeeded (pkgExeDependencyPaths pkg)
                 }
-              r@(ElabComponent _) -> r
+              (ElabComponent comp) ->
+                ElabComponent $ comp { compLibDependencies = map addInternal (compLibDependencies comp) }
         }
       where
+        -- We initially assume that all the dependencies are external (hence the boolean is always
+        -- False) and here we correct the dependencies so the right packages are marked promised.
+        addInternal (cid, _) = (cid, (cid `Set.member` inMemoryTargets))
+
         libTargetsRequiredForRevDeps =
-          [ ComponentTarget (CLibName Cabal.defaultLibName) WholeComponent
+          [ c
           | installedUnitId elab `Set.member` hasReverseLibDeps
+          , let c = ComponentTarget (CLibName Cabal.defaultLibName) WholeComponent
+          -- Don't enable building for anything which is being build in memory
+          , elabBuildStyle elab /= BuildInplaceOnly InMemory
           ]
         exeTargetsRequiredForRevDeps =
           -- TODO: allow requesting executable with different name
@@ -3087,6 +3220,13 @@ pruneInstallPlanPass2 pkgs =
     availablePkgs :: Set UnitId
     availablePkgs = Set.fromList (map installedUnitId pkgs)
 
+    inMemoryTargets :: Set ConfiguredId
+    inMemoryTargets = do
+      Set.fromList [ configuredId pkg
+                   | InstallPlan.Configured pkg <- pkgs
+                   , BuildInplaceOnly InMemory <- [elabBuildStyle pkg] ]
+
+
     hasReverseLibDeps :: Set UnitId
     hasReverseLibDeps =
       Set.fromList [ depid
@@ -3387,7 +3527,7 @@ setupHsScriptOptions (ReadyPackage elab@ElaboratedConfiguredPackage{..})
       usePackageDB             = elabSetupPackageDBStack,
       usePackageIndex          = Nothing,
       useDependencies          = [ (uid, srcid)
-                                 | ConfiguredId srcid (Just (CLibName LMainLibName)) uid
+                                 | (ConfiguredId srcid (Just (CLibName LMainLibName)) uid, _)
                                  <- elabSetupDependencies elab ],
       useDependenciesExclusive = True,
       useVersionMacros         = elabSetupScriptStyle == SetupCustomExplicitDeps,
@@ -3462,7 +3602,7 @@ computeInstallDirs :: StoreDirLayout
                    -> ElaboratedConfiguredPackage
                    -> InstallDirs.InstallDirs FilePath
 computeInstallDirs storeDirLayout defaultInstallDirs elaboratedShared elab
-  | elabBuildStyle elab == BuildInplaceOnly
+  | isInplaceBuildStyle (elabBuildStyle elab)
   -- use the ordinary default install dirs
   = (InstallDirs.absoluteInstallDirs
        (elabPkgSourceId elab)
@@ -3586,21 +3726,22 @@ setupHsConfigureFlags (ReadyPackage elab@ElaboratedConfiguredPackage{..})
     -- NB: This does NOT use InstallPlan.depends, which includes executable
     -- dependencies which should NOT be fed in here (also you don't have
     -- enough info anyway)
-    configDependencies        = [ GivenComponent
-                                    (packageName srcid)
-                                    ln
-                                    cid
-                                | ConfiguredId srcid mb_cn cid <- elabLibDependencies elab
-                                , let ln = case mb_cn
-                                           of Just (CLibName lname) -> lname
-                                              Just _ -> error "non-library dependency"
-                                              Nothing -> LMainLibName
+    --
+    configDependencies        = [ cidToGivenComponent cid
+                                | (cid, is_internal) <- elabLibDependencies elab
+                                , not is_internal
+                                ]
+
+    configPromisedDependencies= [ cidToGivenComponent cid
+                                | (cid, is_internal) <- elabLibDependencies elab
+                                , is_internal
                                 ]
+
     configConstraints         =
         case elabPkgOrComp of
             ElabPackage _ ->
                 [ thisPackageVersionConstraint srcid
-                | ConfiguredId srcid _ _uid <- elabLibDependencies elab ]
+                | (ConfiguredId srcid _ _uid, _) <- elabLibDependencies elab ]
             ElabComponent _ -> []
 
 
@@ -3624,6 +3765,14 @@ setupHsConfigureFlags (ReadyPackage elab@ElaboratedConfiguredPackage{..})
     configUseResponseFiles    = mempty
     configAllowDependingOnPrivateLibs = Flag $ not $ libraryVisibilitySupported pkgConfigCompiler
 
+    cidToGivenComponent :: ConfiguredId -> GivenComponent
+    cidToGivenComponent (ConfiguredId srcid mb_cn cid) = GivenComponent (packageName srcid) ln cid
+      where
+        ln = case mb_cn of
+          Just (CLibName lname) -> lname
+          Just _                -> error "non-library dependency"
+          Nothing               -> LMainLibName
+
 setupHsConfigureArgs :: ElaboratedConfiguredPackage
                      -> [String]
 setupHsConfigureArgs (ElaboratedConfiguredPackage { elabPkgOrComp = ElabPackage _ }) = []
@@ -3718,9 +3867,7 @@ setupHsReplFlags _ sharedConfig verbosity builddir =
 
 setupHsReplArgs :: ElaboratedConfiguredPackage -> [String]
 setupHsReplArgs elab =
-    maybe [] (\t -> [showComponentTarget (packageId elab) t]) (elabReplTarget elab)
-    --TODO: should be able to give multiple modules in one component
-
+    map (\t -> showComponentTarget (packageId elab) t) (elabReplTarget elab)
 
 setupHsCopyFlags :: ElaboratedConfiguredPackage
                  -> ElaboratedSharedConfig
@@ -3750,8 +3897,8 @@ setupHsRegisterFlags ElaboratedConfiguredPackage{..} _
       regGenScript   = mempty,  -- never use
       regGenPkgConf  = toFlag (Just pkgConfFile),
       regInPlace     = case elabBuildStyle of
-                         BuildInplaceOnly -> toFlag True
-                         _                -> toFlag False,
+                         BuildInplaceOnly {} -> toFlag True
+                         BuildAndInstall  -> toFlag False,
       regPrintId     = mempty,  -- never use
       regDistPref    = toFlag builddir,
       regArgs        = [],
@@ -3793,6 +3940,7 @@ setupHsHaddockFlags (ElaboratedConfiguredPackage{..}) (ElaboratedSharedConfig{..
       haddockIndex         = maybe mempty toFlag elabHaddockIndex,
       haddockBaseUrl       = maybe mempty toFlag elabHaddockBaseUrl,
       haddockLib           = maybe mempty toFlag elabHaddockLib,
+      haddockOutputDir     = maybe mempty toFlag elabHaddockOutputDir,
       haddockArgs          = mempty
     }
 
@@ -3875,11 +4023,11 @@ packageHashInputs
           ElabPackage (ElaboratedPackage{..}) ->
             Set.fromList $
              [ confInstId dep
-             | dep <- CD.select relevantDeps pkgLibDependencies ] ++
+             | (dep, _) <- CD.select relevantDeps pkgLibDependencies ] ++
              [ confInstId dep
              | dep <- CD.select relevantDeps pkgExeDependencies ]
           ElabComponent comp ->
-            Set.fromList (map confInstId (compLibDependencies comp
+            Set.fromList (map confInstId ((map fst $ compLibDependencies comp)
                                        ++ compExeDependencies comp)),
       pkgHashOtherConfig = packageHashConfigInputs pkgshared elab
     }
@@ -3949,7 +4097,8 @@ packageHashConfigInputs shared@ElaboratedSharedConfig{..} pkg =
       pkgHashHaddockContents     = elabHaddockContents,
       pkgHashHaddockIndex        = elabHaddockIndex,
       pkgHashHaddockBaseUrl      = elabHaddockBaseUrl,
-      pkgHashHaddockLib          = elabHaddockLib
+      pkgHashHaddockLib          = elabHaddockLib,
+      pkgHashHaddockOutputDir    = elabHaddockOutputDir
     }
   where
     ElaboratedConfiguredPackage{..} = normaliseConfiguredPackage shared pkg
@@ -3992,7 +4141,7 @@ binDirectoryFor
   -> FilePath
 binDirectoryFor layout config package exe = case elabBuildStyle package of
   BuildAndInstall -> installedBinDirectory package
-  BuildInplaceOnly -> inplaceBinRoot layout config package </> exe
+  BuildInplaceOnly {} -> inplaceBinRoot layout config package </> exe
 
 -- package has been built and installed.
 installedBinDirectory :: ElaboratedConfiguredPackage -> FilePath
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs
index bda338897..3efb7fa97 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ProjectPlanning/Types.hs
@@ -1,3 +1,5 @@
+{-# LANGUAGE FlexibleInstances #-}
+{-# LANGUAGE FlexibleContexts #-}
 {-# LANGUAGE DeriveGeneric #-}
 {-# LANGUAGE DeriveDataTypeable #-}
 {-# LANGUAGE NamedFieldPuns #-}
@@ -14,6 +16,7 @@ module Distribution.Client.ProjectPlanning.Types (
     ElaboratedInstallPlan,
     normaliseConfiguredPackage,
     ElaboratedConfiguredPackage(..),
+    showElaboratedInstallPlan,
 
     elabDistDirParams,
     elabExeDependencyPaths,
@@ -39,6 +42,8 @@ module Distribution.Client.ProjectPlanning.Types (
     ElaboratedSharedConfig(..),
     ElaboratedReadyPackage,
     BuildStyle(..),
+    MemoryOrDisk(..),
+    isInplaceBuildStyle,
     CabalFileText,
 
     -- * Build targets
@@ -109,6 +114,7 @@ import qualified Data.Map as Map
 import qualified Data.ByteString.Lazy as LBS
 import qualified Data.Monoid as Mon
 import           System.FilePath ((</>))
+import           Text.PrettyPrint ( hsep, parens, text )
 
 
 -- | The combination of an elaborated install plan plus a
@@ -136,6 +142,27 @@ elabPlanPackageName verbosity (Configured elab)
 elabPlanPackageName verbosity (Installed elab)
     = elabConfiguredName verbosity elab
 
+showElaboratedInstallPlan :: ElaboratedInstallPlan -> String
+showElaboratedInstallPlan = InstallPlan.showInstallPlan_gen showNode
+  where
+    showNode pkg = InstallPlan.ShowPlanNode { InstallPlan.showPlanHerald = herald
+                                            , InstallPlan.showPlanNeighbours = deps }
+      where
+        herald = (hsep [ text (InstallPlan.showPlanPackageTag pkg)
+                       , InstallPlan.foldPlanPackage (const mempty) in_mem pkg
+                       , pretty (packageId pkg)
+                       , parens (pretty (nodeKey pkg))])
+
+        in_mem elab = case elabBuildStyle elab of
+                        BuildInplaceOnly InMemory -> parens (text "In Memory")
+                        _ -> mempty
+
+        deps = InstallPlan.foldPlanPackage installed_deps local_deps pkg
+
+        installed_deps = map pretty . nodeNeighbors
+
+        local_deps cfg =  [ (if internal then text "+" else mempty) <> pretty (confInstId uid) | (uid, internal) <- elabLibDependencies cfg ]
+
 --TODO: [code cleanup] decide if we really need this, there's not much in it, and in principle
 --      even platform and compiler could be different if we're building things
 --      like a server + client with ghc + ghcjs
@@ -295,6 +322,7 @@ data ElaboratedConfiguredPackage
        elabHaddockIndex          :: Maybe PathTemplate,
        elabHaddockBaseUrl        :: Maybe String,
        elabHaddockLib            :: Maybe String,
+       elabHaddockOutputDir      :: Maybe FilePath,
 
        elabTestMachineLog        :: Maybe PathTemplate,
        elabTestHumanLog          :: Maybe PathTemplate,
@@ -326,7 +354,7 @@ data ElaboratedConfiguredPackage
        elabBuildTargets          :: [ComponentTarget],
        elabTestTargets           :: [ComponentTarget],
        elabBenchTargets          :: [ComponentTarget],
-       elabReplTarget            :: Maybe ComponentTarget,
+       elabReplTarget            :: [ComponentTarget],
        elabHaddockTargets        :: [ComponentTarget],
 
        elabBuildHaddocks         :: Bool,
@@ -441,7 +469,7 @@ dataDirEnvVarForPackage :: DistDirLayout
 dataDirEnvVarForPackage distDirLayout pkg =
   case elabBuildStyle pkg
   of BuildAndInstall -> Nothing
-     BuildInplaceOnly -> Just
+     BuildInplaceOnly {} -> Just
        ( pkgPathEnvVar (elabPkgDescription pkg) "datadir"
        , Just $ srcPath (elabPkgSourceLocation pkg)
             </> dataDir (elabPkgDescription pkg))
@@ -540,13 +568,13 @@ elabOrderLibDependencies :: ElaboratedConfiguredPackage -> [UnitId]
 elabOrderLibDependencies elab =
     case elabPkgOrComp elab of
         ElabPackage pkg    -> map (newSimpleUnitId . confInstId) $
-                              ordNub $ CD.flatDeps (pkgLibDependencies pkg)
+                              ordNub $ CD.flatDeps (map fst <$> pkgLibDependencies pkg)
         ElabComponent comp -> compOrderLibDependencies comp
 
 -- | The library dependencies (i.e., the libraries we depend on, NOT
 -- the dependencies of the library), NOT including setup dependencies.
--- These are passed to the @Setup@ script via @--dependency@.
-elabLibDependencies :: ElaboratedConfiguredPackage -> [ConfiguredId]
+-- These are passed to the @Setup@ script via @--dependency@ or @--promised-dependency@.
+elabLibDependencies :: ElaboratedConfiguredPackage -> [(ConfiguredId, Bool)]
 elabLibDependencies elab =
     case elabPkgOrComp elab of
         ElabPackage pkg    -> ordNub (CD.nonSetupDeps (pkgLibDependencies pkg))
@@ -580,7 +608,7 @@ elabExeDependencyPaths elab =
 -- | The setup dependencies (the library dependencies of the setup executable;
 -- note that it is not legal for setup scripts to have executable
 -- dependencies at the moment.)
-elabSetupDependencies :: ElaboratedConfiguredPackage -> [ConfiguredId]
+elabSetupDependencies :: ElaboratedConfiguredPackage -> [(ConfiguredId, Bool)]
 elabSetupDependencies elab =
     case elabPkgOrComp elab of
         ElabPackage pkg -> CD.setupDeps (pkgLibDependencies pkg)
@@ -624,7 +652,7 @@ elabInplaceDependencyBuildCacheFiles layout sconf plan root_elab =
     go =<< InstallPlan.directDeps plan (nodeKey root_elab)
   where
     go = InstallPlan.foldPlanPackage (const []) $ \elab -> do
-            guard (elabBuildStyle elab == BuildInplaceOnly)
+            guard (isInplaceBuildStyle (elabBuildStyle elab))
             return $ distPackageCacheFile layout (elabDistDirParams sconf elab) "build"
 
 -- | Some extra metadata associated with an
@@ -642,8 +670,9 @@ data ElaboratedComponent
     -- it's a setup dep.
     compComponentName :: Maybe ComponentName,
     -- | The *external* library dependencies of this component.  We
-    -- pass this to the configure script.
-    compLibDependencies :: [ConfiguredId],
+    -- pass this to the configure script. The Bool indicates whether the
+    -- dependency is a promised dependency (True) or not (False).
+    compLibDependencies :: [(ConfiguredId, Bool)],
     -- | In a component prior to instantiation, this list specifies
     -- the 'OpenUnitId's which, after instantiation, are the
     -- actual dependencies of this package.  Note that this does
@@ -690,8 +719,9 @@ data ElaboratedPackage
        pkgInstalledId :: InstalledPackageId,
 
        -- | The exact dependencies (on other plan packages)
-       --
-       pkgLibDependencies :: ComponentDeps [ConfiguredId],
+       -- The boolean value indicates whether the dependency is a promised dependency
+       -- or not.
+       pkgLibDependencies :: ComponentDeps [(ConfiguredId, Bool)],
 
        -- | Components which depend (transitively) on an internally
        -- defined library.  These are used by 'elabRequiresRegistration',
@@ -728,7 +758,7 @@ instance Structured ElaboratedPackage
 -- which can be useful in some circumstances.
 pkgOrderDependencies :: ElaboratedPackage -> ComponentDeps [UnitId]
 pkgOrderDependencies pkg =
-    fmap (map (newSimpleUnitId . confInstId)) (pkgLibDependencies pkg) `Mon.mappend`
+    fmap (map (newSimpleUnitId . confInstId)) (map fst <$> pkgLibDependencies pkg) `Mon.mappend`
     fmap (map (newSimpleUnitId . confInstId)) (pkgExeDependencies pkg)
 
 -- | This is used in the install plan to indicate how the package will be
@@ -742,7 +772,7 @@ data BuildStyle =
     -- the results discarded.
     BuildAndInstall
 
-    -- | The package is built, but the files are not installed anywhere,
+    -- | For 'OnDisk': The package is built, but the files are not installed anywhere,
     -- rather the build dir is kept and the package is registered inplace.
     --
     -- Such packages can still subsequently be installed.
@@ -750,18 +780,41 @@ data BuildStyle =
     -- Typically 'BuildAndInstall' packages will only depend on other
     -- 'BuildAndInstall' style packages and not on 'BuildInplaceOnly' ones.
     --
-  | BuildInplaceOnly
-  deriving (Eq, Show, Generic)
+    -- For 'InMemory':  Built in-memory only using GHC multi-repl, they are not built or installed
+    -- anywhere on disk. BuildInMemory packages can't be depended on by BuildAndInstall nor BuildInplaceOnly packages
+    -- (because they don't exist on disk) but can depend on other BuildStyles.
+    --
+    -- At the moment @'BuildInplaceOnly' 'InMemory'@ is only used by the 'repl' command.
+    --
+    -- We use single constructor 'BuildInplaceOnly' as for most cases
+    -- inplace packages are handled similarly.
+    --
+  | BuildInplaceOnly MemoryOrDisk
+  deriving (Eq, Ord, Show, Generic)
+
+-- | How 'BuildInplaceOnly' component is built.
+data MemoryOrDisk
+    = OnDisk
+    | InMemory  deriving (Eq, Ord, Show, Generic)
+
+-- Note: order of 'BuildStyle' and 'MemoryOrDisk' matters for 'Semigroup' / 'Monoid' instances
+
+isInplaceBuildStyle :: BuildStyle -> Bool
+isInplaceBuildStyle (BuildInplaceOnly {}) = True
+isInplaceBuildStyle BuildAndInstall = False
+
+instance Binary MemoryOrDisk
+instance Structured MemoryOrDisk
 
-instance Binary BuildStyle
-instance Structured BuildStyle
 instance Semigroup BuildStyle where
-    BuildInplaceOnly <> _ = BuildInplaceOnly
-    _ <> BuildInplaceOnly = BuildInplaceOnly
-    _ <> _ = BuildAndInstall
+  -- 'BuildAndInstall' i.e. the smallest / first constructor is the unit.
+  (<>) = max
+
 instance Monoid BuildStyle where
-    mempty = BuildAndInstall
-    mappend = (<>)
+  mempty = BuildAndInstall
+
+instance Binary BuildStyle
+instance Structured BuildStyle
 
 type CabalFileText = LBS.ByteString
 
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/ReplFlags.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/ReplFlags.hs
new file mode 100644
index 000000000..d6c7399e5
--- /dev/null
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/ReplFlags.hs
@@ -0,0 +1,103 @@
+module Distribution.Client.ReplFlags (EnvFlags(..), ReplFlags(..), topReplOptions, multiReplOption, defaultReplFlags) where
+
+import Prelude ()
+import Distribution.Client.Compat.Prelude
+
+
+import Distribution.Client.Setup
+         ( liftOptions )
+import Distribution.Simple.Setup
+         ( ReplOptions(..), replOptions
+         , Flag(..), toFlag, falseArg, boolOpt, trueArg )
+import Distribution.Simple.Command
+         ( option
+         , ShowOrParseArgs, OptionField, reqArg, liftOption )
+import Distribution.Parsec
+         ( parsecCommaList )
+import Distribution.ReadE
+         ( ReadE, parsecToReadE )
+import Distribution.Types.Dependency
+         ( Dependency(..) )
+
+data EnvFlags = EnvFlags
+  { envPackages :: [Dependency]
+  , envIncludeTransitive :: Flag Bool
+  }
+
+instance Semigroup EnvFlags where
+  (EnvFlags a1 a2) <> (EnvFlags b1 b2) = EnvFlags (a1 <> b1) (a2 <> b2)
+
+instance Monoid EnvFlags where
+  mempty = defaultEnvFlags
+
+defaultEnvFlags :: EnvFlags
+defaultEnvFlags = EnvFlags
+  { envPackages = []
+  , envIncludeTransitive = toFlag True
+  }
+
+data ReplFlags = ReplFlags {
+    configureReplOptions :: ReplOptions
+  , replEnvFlags :: EnvFlags
+  , replUseMulti :: Flag Bool
+  , replKeepTempFiles :: Flag Bool
+  }
+
+instance Semigroup ReplFlags where
+  (ReplFlags a1 a2 a3 a4) <> (ReplFlags b1 b2 b3 b4) = ReplFlags (a1 <> b1) (a2 <> b2) (a3 <> b3) (a4 <> b4)
+
+instance Monoid ReplFlags where
+  mempty = defaultReplFlags
+
+defaultReplFlags :: ReplFlags
+defaultReplFlags = ReplFlags { configureReplOptions = mempty
+                             , replEnvFlags = defaultEnvFlags
+                             , replUseMulti = NoFlag
+                             , replKeepTempFiles = NoFlag
+                             }
+
+topReplOptions :: ShowOrParseArgs -> [OptionField ReplFlags]
+topReplOptions showOrParseArgs =
+    liftOptions configureReplOptions set1 (replOptions showOrParseArgs) ++
+    liftOptions replEnvFlags set2 (envOptions showOrParseArgs) ++
+    [ liftOption replUseMulti set3 multiReplOption
+
+    -- keeping temporary files is important functionality for HLS,
+    -- which runs @cabal repl@ with fake GHC to get cli arguments.
+    -- It will need the temporary files (incl. multi unit repl response files)
+    -- to stay, even after the @cabal repl@ command exits.
+    --
+    , option [] ["keep-temp-files"]
+      "Keep temporary files"
+      replKeepTempFiles (\b flags -> flags { replKeepTempFiles = b })
+      trueArg
+    ]
+    where
+      set1 a x = x { configureReplOptions = a }
+      set2 a x = x { replEnvFlags = a }
+      set3 a x = x { replUseMulti = a }
+
+multiReplOption :: OptionField (Flag Bool)
+multiReplOption =
+    option [] ["multi-repl"]
+        "multi-component repl sessions"
+        id (\v _ -> v)
+        (boolOpt [] [])
+
+envOptions :: ShowOrParseArgs -> [OptionField EnvFlags]
+envOptions _ =
+  [ option ['b'] ["build-depends"]
+    "Include additional packages in the environment presented to GHCi."
+    envPackages (\p flags -> flags { envPackages = p ++ envPackages flags })
+    (reqArg "DEPENDENCIES" dependenciesReadE (fmap prettyShow :: [Dependency] -> [String]))
+  , option [] ["no-transitive-deps"]
+    "Don't automatically include transitive dependencies of requested packages."
+    envIncludeTransitive (\p flags -> flags { envIncludeTransitive = p })
+    falseArg
+  ]
+  where
+    dependenciesReadE :: ReadE [Dependency]
+    dependenciesReadE =
+      parsecToReadE
+        ("couldn't parse dependencies: " ++)
+        (parsecCommaList parsec)
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Setup.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Setup.hs
index 6db91d9cf..b3e0bdcdb 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Setup.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Setup.hs
@@ -465,7 +465,7 @@ filterConfigureFlags :: ConfigFlags -> Version -> ConfigFlags
 filterConfigureFlags flags cabalLibVersion
   -- NB: we expect the latest version to be the most common case,
   -- so test it first.
-  | cabalLibVersion >= mkVersion [3,7,0]  = flags_latest
+  | cabalLibVersion >= mkVersion [3,11,0]  = flags_latest
   -- The naming convention is that flags_version gives flags with
   -- all flags *introduced* in version eliminated.
   -- It is NOT the latest version of Cabal library that
@@ -486,17 +486,23 @@ filterConfigureFlags flags cabalLibVersion
   | cabalLibVersion < mkVersion [2,1,0]  = flags_2_1_0
   | cabalLibVersion < mkVersion [2,5,0]  = flags_2_5_0
   | cabalLibVersion < mkVersion [3,7,0]  = flags_3_7_0
+  | cabalLibVersion < mkVersion [3,11,0]  = flags_3_11_0
   | otherwise = error "the impossible just happened" -- see first guard
   where
-    flags_latest = flags        {
+    flags_latest = flags {
       -- Cabal >= 1.19.1 uses '--dependency' and does not need '--constraint'.
       -- Note: this is not in the wrong place. configConstraints gets
       -- repopulated in flags_1_19_1 but it needs to be set to empty for
       -- newer versions first.
       configConstraints = []
-      }
+    }
+
+    flags_3_11_0 = flags_latest {
+        configDependencies = configDependencies flags ++ configPromisedDependencies flags
+        , configPromisedDependencies = []
+    }
 
-    flags_3_7_0 = flags_latest {
+    flags_3_7_0 = flags_3_11_0 {
         -- Cabal < 3.7 does not know about --extra-lib-dirs-static
         configExtraLibDirsStatic = [],
 
@@ -640,7 +646,7 @@ configureExCommand = configureCommand {
     commandDefaultFlags = (mempty, defaultConfigExFlags),
     commandOptions      = \showOrParseArgs ->
          liftOptions fst setFst
-         (filter ((`notElem` ["constraint", "dependency", "exact-configuration"])
+         (filter ((`notElem` ["constraint", "dependency", "promised-dependency", "exact-configuration"])
                   . optionName) $ configureOptions  showOrParseArgs)
       ++ liftOptions snd setSnd
          (configureExOptions showOrParseArgs ConstraintSourceCommandlineFlag)
@@ -1201,8 +1207,9 @@ checkCommand = CommandUI {
          "Expects a .cabal package file in the current directory.\n"
       ++ "\n"
       ++ "The checks correspond to the requirements to packages on Hackage. "
-      ++ "If no errors and warnings are reported, Hackage will accept this "
-      ++ "package.\n",
+      ++ "If no errors and warnings are reported, Hackage should accept the "
+      ++ "package. If errors are present, `check` exits with 1 and Hackage "
+      ++ "will refuse the package.\n",
     commandNotes        = Nothing,
     commandUsage        = usageFlags "check",
     commandDefaultFlags = toFlag normal,
@@ -1714,9 +1721,9 @@ installCommand = CommandUI {
   commandOptions      = \showOrParseArgs ->
        liftOptions get1 set1
        -- Note: [Hidden Flags]
-       -- hide "constraint", "dependency", and
+       -- hide "constraint", "dependency", "promised-dependency" and
        -- "exact-configuration" from the configure options.
-       (filter ((`notElem` ["constraint", "dependency"
+       (filter ((`notElem` ["constraint", "dependency", "promised-dependency"
                            , "exact-configuration"])
                 . optionName) $
                               configureOptions   showOrParseArgs)
@@ -1779,7 +1786,7 @@ haddockOptions showOrParseArgs
     , name `elem` ["hoogle", "html", "html-location"
                   ,"executables", "tests", "benchmarks", "all", "internal", "css"
                   ,"hyperlink-source", "quickjump", "hscolour-css"
-                  ,"contents-location", "use-index", "for-hackage", "base-url", "lib"]
+                  ,"contents-location", "use-index", "for-hackage", "base-url", "lib", "output-dir"]
     ]
 
 testOptions :: ShowOrParseArgs -> [OptionField TestFlags]
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Types/BuildResults.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Types/BuildResults.hs
index 4a3e7067b..55cf42de9 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Types/BuildResults.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Types/BuildResults.hs
@@ -25,6 +25,7 @@ type BuildOutcomes = Map UnitId BuildOutcome
 
 data BuildFailure = PlanningFailed
                   | DependentFailed PackageId
+                  | GracefulFailure String
                   | DownloadFailed  SomeException
                   | UnpackFailed    SomeException
                   | ConfigureFailed SomeException
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Utils.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Utils.hs
index 4693ad022..20e68a269 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Utils.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Utils.hs
@@ -29,6 +29,8 @@ module Distribution.Client.Utils
   , listFilesInside
   , safeRead
   , hasElem
+  , occursOnlyOrBefore
+  , giveRTSWarning
   ) where
 
 import Prelude ()
@@ -47,7 +49,7 @@ import System.FilePath
 import Control.Monad
          ( zipWithM_ )
 import Data.List
-         ( groupBy )
+         ( groupBy, elemIndex )
 import qualified Control.Exception as Exception
          ( finally )
 import qualified Control.Exception.Safe as Safe
@@ -488,3 +490,30 @@ safeRead s
 --   This is [Agda.Utils.List.hasElem](https://hackage.haskell.org/package/Agda-2.6.2.2/docs/Agda-Utils-List.html#v:hasElem).
 hasElem :: Ord a => [a] -> a -> Bool
 hasElem xs = (`Set.member` Set.fromList xs)
+
+-- True if x occurs before y
+occursOnlyOrBefore :: (Eq a) => [a] -> a -> a -> Bool
+occursOnlyOrBefore xs x y = case (elemIndex x xs, elemIndex y xs) of
+                       (Just i, Just j) -> i < j
+                       (Just _, _) -> True
+                       _ -> False
+
+giveRTSWarning :: String -> String
+giveRTSWarning "run" = "Your RTS options are applied to cabal, not the "
+               ++ "executable. Use '--' to separate cabal options from your "
+               ++ "executable options. For example, use 'cabal run -- +RTS -N "
+               ++ "to pass the '-N' RTS option to your executable."
+giveRTSWarning "test" = "Some RTS options were found standalone, "
+               ++ "which affect cabal and not the binary. "
+               ++ "Please note that +RTS inside the --test-options argument "
+               ++ "suffices if your goal is to affect the tested binary. "
+               ++ "For example, use \"cabal test --test-options='+RTS -N'\" "
+               ++ "to pass the '-N' RTS option to your binary."
+giveRTSWarning "bench" = "Some RTS options were found standalone, "
+               ++ "which affect cabal and not the binary. Please note "
+               ++ "that +RTS inside the --benchmark-options argument "
+               ++ "suffices if your goal is to affect the benchmarked "
+               ++ "binary. For example, use \"cabal test --benchmark-options="
+               ++ "'+RTS -N'\" to pass the '-N' RTS option to your binary."
+giveRTSWarning _ = "Your RTS options are applied to cabal, not the "
+               ++ "binary."
diff --git a/libraries/Cabal/cabal-install/src/Distribution/Client/Version.hs b/libraries/Cabal/cabal-install/src/Distribution/Client/Version.hs
index 5d4348204..ad2f48d7a 100644
--- a/libraries/Cabal/cabal-install/src/Distribution/Client/Version.hs
+++ b/libraries/Cabal/cabal-install/src/Distribution/Client/Version.hs
@@ -13,4 +13,4 @@ import Distribution.Version
 -- program coverage information generated by HPC, and hence was moved to be a standalone value.
 --
 cabalInstallVersion :: Version
-cabalInstallVersion = mkVersion [3,10,1,0]
+cabalInstallVersion = mkVersion [3,11]
diff --git a/libraries/Cabal/cabal-install/tests/IntegrationTests2.hs b/libraries/Cabal/cabal-install/tests/IntegrationTests2.hs
index 90d272aac..7155b963d 100644
--- a/libraries/Cabal/cabal-install/tests/IntegrationTests2.hs
+++ b/libraries/Cabal/cabal-install/tests/IntegrationTests2.hs
@@ -99,9 +99,7 @@ tests config =
     -- * normal success
     -- * dry-run tests with changes
   [ testGroup "Discovery and planning" $
-    [ testCase "find root"      testFindProjectRoot
-    , testCase "find root fail" testExceptionFindProjectRoot
-    , testCase "no package"    (testExceptionInFindingPackage config)
+    [ testCase "no package"    (testExceptionInFindingPackage config)
     , testCase "no package2"   (testExceptionInFindingPackage2 config)
     , testCase "proj conf1"    (testExceptionInProjectConfig config)
     ]
@@ -153,25 +151,6 @@ tests config =
     ]
   ]
 
-testFindProjectRoot :: Assertion
-testFindProjectRoot = do
-    Left (BadProjectRootExplicitFile file) <- findProjectRoot (Just testdir)
-                                                              (Just testfile)
-    file @?= testfile
-  where
-    testdir  = basedir </> "exception" </> "no-pkg2"
-    testfile = "bklNI8O1OpOUuDu3F4Ij4nv3oAqN"
-
-
-testExceptionFindProjectRoot :: Assertion
-testExceptionFindProjectRoot = do
-    Right (ProjectRootExplicit dir _) <- findProjectRoot (Just testdir) Nothing
-    cwd <- getCurrentDirectory
-    dir @?= cwd </> testdir
-  where
-    testdir = basedir </> "exception" </> "no-pkg2"
-
-
 testTargetSelectors :: (String -> IO ()) -> Assertion
 testTargetSelectors reportSubCase = do
     (_, _, _, localPackages, _) <- configureProject testdir config
@@ -760,9 +739,9 @@ testTargetProblemsRepl config reportSubCase = do
     reportSubCase "multiple-libs"
     assertProjectTargetProblems
       "targets/multiple-libs" config
-      CmdRepl.selectPackageTargets
+      (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
       CmdRepl.selectComponentTarget
-      [ ( flip CmdRepl.matchesMultipleProblem
+      [ ( flip (CmdRepl.matchesMultipleProblem (CmdRepl.MultiReplDecision Nothing False))
                [ AvailableTarget "p-0.1" (CLibName LMainLibName)
                    (TargetBuildable () TargetRequestedByDefault) True
                , AvailableTarget "q-0.1" (CLibName LMainLibName)
@@ -774,9 +753,9 @@ testTargetProblemsRepl config reportSubCase = do
     reportSubCase "multiple-exes"
     assertProjectTargetProblems
       "targets/multiple-exes" config
-      CmdRepl.selectPackageTargets
+      (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
       CmdRepl.selectComponentTarget
-      [ ( flip CmdRepl.matchesMultipleProblem
+      [ ( flip (CmdRepl.matchesMultipleProblem (CmdRepl.MultiReplDecision Nothing False))
                [ AvailableTarget "p-0.1" (CExeName "p2")
                    (TargetBuildable () TargetRequestedByDefault) True
                , AvailableTarget "p-0.1" (CExeName "p1")
@@ -788,9 +767,9 @@ testTargetProblemsRepl config reportSubCase = do
     reportSubCase "multiple-tests"
     assertProjectTargetProblems
       "targets/multiple-tests" config
-      CmdRepl.selectPackageTargets
+      (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
       CmdRepl.selectComponentTarget
-      [ ( flip CmdRepl.matchesMultipleProblem
+      [ ( flip (CmdRepl.matchesMultipleProblem (CmdRepl.MultiReplDecision Nothing False))
                [ AvailableTarget "p-0.1" (CTestName "p2")
                    (TargetBuildable () TargetNotRequestedByDefault) True
                , AvailableTarget "p-0.1" (CTestName "p1")
@@ -803,7 +782,7 @@ testTargetProblemsRepl config reportSubCase = do
     do (_,elaboratedPlan,_) <- planProject "targets/multiple-exes" config
        assertProjectDistinctTargets
          elaboratedPlan
-         CmdRepl.selectPackageTargets
+         (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
          CmdRepl.selectComponentTarget
          [ mkTargetComponent "p-0.1" (CExeName "p1")
          , mkTargetComponent "p-0.1" (CExeName "p2")
@@ -815,7 +794,7 @@ testTargetProblemsRepl config reportSubCase = do
     reportSubCase "libs-disabled"
     assertProjectTargetProblems
       "targets/libs-disabled" config
-      CmdRepl.selectPackageTargets
+      (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
       CmdRepl.selectComponentTarget
       [ ( flip TargetProblemNoneEnabled
                [ AvailableTarget "p-0.1" (CLibName LMainLibName) TargetNotBuildable True ]
@@ -825,7 +804,7 @@ testTargetProblemsRepl config reportSubCase = do
     reportSubCase "exes-disabled"
     assertProjectTargetProblems
       "targets/exes-disabled" config
-      CmdRepl.selectPackageTargets
+      (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
       CmdRepl.selectComponentTarget
       [ ( flip TargetProblemNoneEnabled
                [ AvailableTarget "p-0.1" (CExeName "p") TargetNotBuildable True
@@ -836,7 +815,7 @@ testTargetProblemsRepl config reportSubCase = do
     reportSubCase "test-only"
     assertProjectTargetProblems
       "targets/test-only" config
-      CmdRepl.selectPackageTargets
+      (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
       CmdRepl.selectComponentTarget
       [ ( flip TargetProblemNoneEnabled
                [ AvailableTarget "p-0.1" (CTestName "pexe")
@@ -848,7 +827,7 @@ testTargetProblemsRepl config reportSubCase = do
     reportSubCase "empty-pkg"
     assertProjectTargetProblems
       "targets/empty-pkg" config
-      CmdRepl.selectPackageTargets
+      (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
       CmdRepl.selectComponentTarget
       [ ( TargetProblemNoTargets, mkTargetPackage "p-0.1" )
       ]
@@ -858,7 +837,7 @@ testTargetProblemsRepl config reportSubCase = do
        -- by default we only get the lib
        assertProjectDistinctTargets
          elaboratedPlan
-         CmdRepl.selectPackageTargets
+         (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
          CmdRepl.selectComponentTarget
          [ TargetPackage TargetExplicitNamed ["p-0.1"] Nothing ]
          [ ("p-0.1-inplace", (CLibName LMainLibName)) ]
@@ -866,13 +845,13 @@ testTargetProblemsRepl config reportSubCase = do
        -- components even though we did not explicitly enable tests/benchmarks
        assertProjectDistinctTargets
          elaboratedPlan
-         CmdRepl.selectPackageTargets
+         (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
          CmdRepl.selectComponentTarget
          [ TargetPackage TargetExplicitNamed ["p-0.1"] (Just TestKind) ]
          [ ("p-0.1-inplace-a-testsuite", CTestName  "a-testsuite") ]
        assertProjectDistinctTargets
          elaboratedPlan
-         CmdRepl.selectPackageTargets
+         (CmdRepl.selectPackageTargets (CmdRepl.MultiReplDecision Nothing False))
          CmdRepl.selectComponentTarget
          [ TargetPackage TargetExplicitNamed ["p-0.1"] (Just BenchKind) ]
          [ ("p-0.1-inplace-a-benchmark", CBenchName "a-benchmark") ]
@@ -1681,12 +1660,12 @@ configureProject testdir cliConfig = do
     cabalDirLayout <- defaultCabalDirLayout
 
     projectRootDir <- canonicalizePath (basedir </> testdir)
-    isexplict      <- doesFileExist (projectRootDir </> "cabal.project")
+    isexplict <- doesFileExist (projectRootDir </> defaultProjectFile)
+
     let projectRoot
-          | isexplict = ProjectRootExplicit projectRootDir
-                                           (projectRootDir </> "cabal.project")
+          | isexplict = ProjectRootExplicit projectRootDir defaultProjectFile
           | otherwise = ProjectRootImplicit projectRootDir
-        distDirLayout = defaultDistDirLayout projectRoot Nothing
+        distDirLayout = defaultDistDirLayout projectRoot Nothing Nothing
 
     -- Clear state between test runs. The state remains if the previous run
     -- ended in an exception (as we leave the files to help with debugging).
@@ -1736,7 +1715,7 @@ planProject testdir cliConfig = do
             elaboratedShared)
 
 executePlan :: PlanDetails -> IO (ElaboratedInstallPlan, BuildOutcomes)
-executePlan ((distDirLayout, cabalDirLayout, _, _, buildSettings),
+executePlan ((distDirLayout, cabalDirLayout, config, _, buildSettings),
              elaboratedPlan,
              elaboratedShared) = do
 
@@ -1762,6 +1741,7 @@ executePlan ((distDirLayout, cabalDirLayout, _, _, buildSettings),
 
     buildOutcomes <-
       rebuildTargets verbosity
+                     config
                      distDirLayout
                      (cabalStoreDirLayout cabalDirLayout)
                      elaboratedPlan''
@@ -1778,7 +1758,7 @@ cleanProject testdir = do
     when alreadyExists $ removePathForcibly distDir
   where
     projectRoot    = ProjectRootImplicit (basedir </> testdir)
-    distDirLayout  = defaultDistDirLayout projectRoot Nothing
+    distDirLayout  = defaultDistDirLayout projectRoot Nothing Nothing
     distDir        = distDirectory distDirLayout
 
 
diff --git a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Configure.hs b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Configure.hs
index 642e4c6e3..91a61358a 100644
--- a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Configure.hs
+++ b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Configure.hs
@@ -45,7 +45,7 @@ configureTests = testGroup "Configure tests"
                   , configVerbosity = Flag silent
                   }
               , projectFlags = mempty
-                  { flagProjectFileName = Flag projectFile }
+                  { flagProjectDir = Flag projectDir }
               }
         (_, ProjectConfig {..}) <- configureAction' flags [] defaultGlobalFlags
 
@@ -59,7 +59,7 @@ configureTests = testGroup "Configure tests"
               , configFlags = mempty
                   { configVerbosity = Flag silent }
               , projectFlags = mempty
-                  { flagProjectFileName = Flag projectFile }
+                  { flagProjectDir = Flag projectDir }
               }
         (_, ProjectConfig {..}) <- configureAction' flags [] defaultGlobalFlags
 
@@ -71,7 +71,7 @@ configureTests = testGroup "Configure tests"
               { configFlags = mempty
                   { configVerbosity = Flag silent }
               , projectFlags = mempty
-                  { flagProjectFileName = Flag projectFile }
+                  { flagProjectDir = Flag projectDir }
               }
         (_, ProjectConfig {..}) <- configureAction' flags [] defaultGlobalFlags
 
@@ -83,9 +83,9 @@ configureTests = testGroup "Configure tests"
               { configFlags = mempty
                   { configVerbosity = Flag silent }
               , projectFlags = mempty
-                  { flagProjectFileName = Flag projectFile }
+                  { flagProjectDir = Flag projectDir }
               }
-            backup = projectFile <.> "local~"
+            backup = projectDir </> "cabal.project.local~"
 
         exists <- doesFileExist backup
         when exists $
@@ -104,7 +104,7 @@ configureTests = testGroup "Configure tests"
                   , configProgramArgs = [("ghc", ghcFlags)]
                   }
               , projectFlags = mempty
-                  { flagProjectFileName = Flag projectFile }
+                  { flagProjectDir = Flag projectDir }
               }
         (_, ProjectConfig {..}) <- configureAction' flags [] defaultGlobalFlags
 
@@ -118,5 +118,5 @@ configureTests = testGroup "Configure tests"
                     (Map.lookup "ghc" (getMapMappend (packageConfigProgramArgs projectConfigLocalPackages)))
     ]
 
-projectFile :: FilePath
-projectFile = "tests" </> "fixtures" </> "configure" </> "cabal.project"
+projectDir :: FilePath
+projectDir = "tests" </> "fixtures" </> "configure"
diff --git a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/FileCreators.hs b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/FileCreators.hs
index cbc3623ec..2c0ab9366 100644
--- a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/FileCreators.hs
+++ b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/FileCreators.hs
@@ -44,7 +44,9 @@ tests _v _initFlags comp pkgIx srcDb =
               }
             inputs =
               -- createProject stuff
-              [ "True"
+              [ "Foobar"
+              , "foobar@qux.com"
+              , "True"
               , "[\"quxTest/Main.hs\"]"
               -- writeProject stuff
               -- writeLicense
diff --git a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/Golden.hs b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/Golden.hs
index 45c585f55..1a14e1f69 100644
--- a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/Golden.hs
+++ b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/Golden.hs
@@ -87,10 +87,10 @@ goldenPkgDescTests v srcDb pkgDir pkgName = testGroup "package description golde
         let opts = WriteOpts False False False v pkgDir Library pkgName defaultCabalVersion
         in runPkgDesc opts emptyFlags pkgArgs
 
-    , goldenVsString "Dummy flags, with comments"
+    , goldenVsString "Dummy flags, >= cabal version syntax, with comments"
       (goldenPkgDesc "pkg-with-flags.golden") $
         let opts = WriteOpts False False False v pkgDir Library pkgName defaultCabalVersion
-        in runPkgDesc opts dummyFlags pkgArgs
+        in runPkgDesc opts (dummyFlags {cabalVersion = Flag CabalSpecV1_0}) pkgArgs
 
     , goldenVsString "Dummy flags, old cabal version, with comments"
       (goldenPkgDesc "pkg-old-cabal-with-flags.golden") $
diff --git a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/NonInteractive.hs b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/NonInteractive.hs
index 3466ac0eb..d63e81105 100644
--- a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/NonInteractive.hs
+++ b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/Init/NonInteractive.hs
@@ -73,7 +73,9 @@ driverFunctionTest pkgIx srcDb comp = testGroup "createProject"
               , dependencies = Flag []
               }
             inputs = NEL.fromList
-              [ "True"
+              ["Foobar"
+              , "foobar@qux.com"
+              , "True"
               , "[\"quxTest/Main.hs\"]"
               ]
 
@@ -149,8 +151,11 @@ driverFunctionTest pkgIx srcDb comp = testGroup "createProject"
               , dependencies = Flag []
               }
             inputs = NEL.fromList
+
+              [ "Foobar"
+              , "foobar@qux.com"
               -- extra sources
-              [ "[\"CHANGELOG.md\"]"
+              , "[\"CHANGELOG.md\"]"
               -- lib other modules
               , "False"
               -- exe other modules
diff --git a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/ProjectConfig.hs b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/ProjectConfig.hs
index 94f419088..fc721bf30 100644
--- a/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/ProjectConfig.hs
+++ b/libraries/Cabal/cabal-install/tests/UnitTests/Distribution/Client/ProjectConfig.hs
@@ -14,10 +14,17 @@ module UnitTests.Distribution.Client.ProjectConfig (tests) where
 import Data.Monoid
 import Control.Applicative
 #endif
+import Control.Monad
+import Data.Either (isRight)
+import Data.Foldable (for_)
 import Data.Map (Map)
 import qualified Data.Map as Map
 import Data.List (isPrefixOf, intercalate, (\\))
+import Data.Maybe (fromMaybe)
 import Network.URI (URI)
+import System.Directory (withCurrentDirectory, canonicalizePath)
+import System.FilePath
+import System.IO.Unsafe (unsafePerformIO)
 
 import Distribution.Deprecated.ParseUtils
 import qualified Distribution.Deprecated.ReadP as Parse
@@ -35,12 +42,14 @@ import Distribution.Types.PackageVersionConstraint
 import Distribution.Parsec
 import Distribution.Pretty
 
+import Distribution.Client.DistDirLayout (defaultProjectFile)
 import Distribution.Client.Types
 import Distribution.Client.CmdInstall.ClientInstallFlags
 import Distribution.Client.Dependency.Types
 import Distribution.Client.Targets
 import Distribution.Client.Types.SourceRepo
 import Distribution.Utils.NubList
+import Distribution.Verbosity (silent)
 
 import Distribution.Solver.Types.PackageConstraint
 import Distribution.Solver.Types.ConstraintSource
@@ -55,6 +64,7 @@ import UnitTests.Distribution.Client.TreeDiffInstances ()
 import Data.TreeDiff.Class
 import Data.TreeDiff.QuickCheck
 import Test.Tasty
+import Test.Tasty.HUnit
 import Test.Tasty.QuickCheck
 
 tests :: [TestTree]
@@ -89,6 +99,7 @@ tests =
     , testProperty "specific"  prop_roundtrip_printparse_specific
     , testProperty "all"       prop_roundtrip_printparse_all
     ]
+  , testFindProjectRoot
   ]
   where
     usingGhc76orOlder =
@@ -96,6 +107,73 @@ tests =
         CompilerId GHC v -> v < mkVersion [7,7]
         _                -> False
 
+testFindProjectRoot :: TestTree
+testFindProjectRoot = testGroup "findProjectRoot"
+  [ test "defaults"                         (cd dir)    Nothing    Nothing          (succeeds dir file)
+  , test "defaults in lib"                  (cd libDir) Nothing    Nothing          (succeeds dir file)
+
+  , test "explicit file"                    (cd dir)    Nothing    (Just file)      (succeeds dir file)
+  , test "explicit file in lib"             (cd libDir) Nothing    (Just file)      (succeeds dir file)
+
+  , test "other file"                       (cd dir)    Nothing    (Just fileOther) (succeeds dir fileOther)
+  , test "other file in lib"                (cd libDir) Nothing    (Just fileOther) (succeeds dir fileOther)
+
+  -- Deprecated use-case
+  , test "absolute file"                    Nothing     Nothing    (Just absFile)   (succeeds dir file)
+
+  , test "nested file"                      (cd dir)    Nothing    (Just nixFile)   (succeeds dir nixFile)
+  , test "nested file in lib"               (cd libDir) Nothing    (Just nixFile)   (succeeds dir nixFile)
+
+  , test "explicit dir"                     Nothing     (Just dir) Nothing          (succeeds dir file)
+  , test "explicit dir & file"              Nothing     (Just dir) (Just file)      (succeeds dir file)
+  , test "explicit dir & nested file"       Nothing     (Just dir) (Just nixFile)   (succeeds dir nixFile)
+  , test "explicit dir & nested other file" Nothing     (Just dir) (Just nixOther)  (succeeds dir nixOther)
+
+  , test "explicit dir & absolute file"     Nothing     (Just dir) (Just absFile)   (succeedsWith ProjectRootExplicitAbsolute dir absFile)
+  ]
+  where
+    dir    = fixturesDir </> "project-root"
+    libDir = dir </> "lib"
+
+    file      = defaultProjectFile
+    fileOther = file <.> "other"
+    absFile   = dir </> file
+
+    nixFile   = "nix" </> file
+    nixOther  = nixFile <.> "other"
+
+    missing path = Just (path <.> "does_not_exist")
+
+    test name wrap projectDir projectFile validate =
+      testCaseSteps name $ \step -> fromMaybe id wrap $ do
+        result <- findProjectRoot silent projectDir projectFile
+        _ <- validate result
+
+        when (isRight result) $ do
+          for_ projectDir $ \path -> do
+            step "missing project dir"
+            fails =<< findProjectRoot silent (missing path) projectFile
+
+          for_ projectFile $ \path -> do
+            step "missing project file"
+            fails =<< findProjectRoot silent projectDir (missing path)
+
+    cd d = Just (withCurrentDirectory d)
+
+    succeeds = succeedsWith ProjectRootExplicit
+
+    succeedsWith mk projectDir projectFile result = case result of
+      Left err -> assertFailure $ "Expected ProjectRoot, but found " <> show err
+      Right pr -> pr @?= mk projectDir projectFile
+
+    fails result = case result of
+      Left _  -> pure ()
+      Right x -> assertFailure $ "Expected an error, but found " <> show x
+
+fixturesDir :: FilePath
+fixturesDir = unsafePerformIO $
+  canonicalizePath ("tests" </> "fixtures")
+{-# NOINLINE fixturesDir #-}
 
 ------------------------------------------------
 -- Round trip: conversion to/from legacy types
@@ -220,6 +298,7 @@ hackProjectConfigShared :: ProjectConfigShared -> ProjectConfigShared
 hackProjectConfigShared config =
     config {
       projectConfigProjectFile = mempty, -- not present within project files
+      projectConfigProjectDir  = mempty, -- ditto
       projectConfigConfigFile  = mempty, -- ditto
       projectConfigConstraints =
       --TODO: [required eventually] parse ambiguity in constraint
@@ -451,6 +530,7 @@ instance Arbitrary ProjectConfigShared where
     arbitrary = do
         projectConfigDistDir              <- arbitraryFlag arbitraryShortToken
         projectConfigConfigFile           <- arbitraryFlag arbitraryShortToken
+        projectConfigProjectDir           <- arbitraryFlag arbitraryShortToken
         projectConfigProjectFile          <- arbitraryFlag arbitraryShortToken
         projectConfigIgnoreProject        <- arbitrary
         projectConfigHcFlavor             <- arbitrary
@@ -483,6 +563,7 @@ instance Arbitrary ProjectConfigShared where
         projectConfigIndependentGoals     <- arbitrary
         projectConfigPreferOldest         <- arbitrary
         projectConfigProgPathExtra        <- toNubList <$> listOf arbitraryShortToken
+        projectConfigMultiRepl            <- arbitrary
         return ProjectConfigShared {..}
       where
         arbitraryConstraints :: Gen [(UserConstraint, ConstraintSource)]
@@ -493,6 +574,7 @@ instance Arbitrary ProjectConfigShared where
     shrink ProjectConfigShared {..} = runShrinker $ pure ProjectConfigShared
         <*> shrinker projectConfigDistDir
         <*> shrinker projectConfigConfigFile
+        <*> shrinker projectConfigProjectDir
         <*> shrinker projectConfigProjectFile
         <*> shrinker projectConfigIgnoreProject
         <*> shrinker projectConfigHcFlavor
@@ -525,6 +607,7 @@ instance Arbitrary ProjectConfigShared where
         <*> shrinker projectConfigIndependentGoals
         <*> shrinker projectConfigPreferOldest
         <*> shrinker projectConfigProgPathExtra
+        <*> shrinker projectConfigMultiRepl
       where
         preShrink_Constraints  = map fst
         postShrink_Constraints = map (\uc -> (uc, projectConfigConstraintSource))
@@ -579,6 +662,7 @@ instance Arbitrary PackageConfig where
         <*> arbitrary
         <*> arbitraryFlag arbitraryShortToken
         <*> arbitraryFlag arbitraryShortToken
+        <*> arbitraryFlag arbitraryShortToken
         <*> arbitrary
         <*> arbitrary
         <*> arbitrary
@@ -646,6 +730,7 @@ instance Arbitrary PackageConfig where
                          , packageConfigHaddockIndex = x54
                          , packageConfigHaddockBaseUrl = x55
                          , packageConfigHaddockLib = x56
+                         , packageConfigHaddockOutputDir = x57
                          , packageConfigTestHumanLog = x44
                          , packageConfigTestMachineLog = x45
                          , packageConfigTestShowDetails = x46
@@ -706,6 +791,7 @@ instance Arbitrary PackageConfig where
                       , packageConfigHaddockIndex = x54'
                       , packageConfigHaddockBaseUrl = x55'
                       , packageConfigHaddockLib = x56'
+                      , packageConfigHaddockOutputDir = x57'
                       , packageConfigTestHumanLog = x44'
                       , packageConfigTestMachineLog = x45'
                       , packageConfigTestShowDetails = x46'
@@ -724,7 +810,7 @@ instance Arbitrary PackageConfig where
           (x35', x36', x37', x38', x43', x39'),
           (x40', x41'),
           (x44', x45', x46', x47', x48', x49', x51', x52', x54', x55'),
-          x56'))
+          x56', x57'))
           <- shrink
              (((preShrink_Paths x00, preShrink_Args x01, x02, x03, x04),
                 (x05, x42, x06, x50, x07, x08, x09),
@@ -738,7 +824,7 @@ instance Arbitrary PackageConfig where
                  (x30, x31, x32, (x33, x33_1), x34),
                  (x35, x36, fmap NonEmpty x37, x38, x43, fmap NonEmpty x39),
                  (x40, x41),
-                 (x44, x45, x46, x47, x48, x49, x51, x52, x54, x55), x56))
+                 (x44, x45, x46, x47, x48, x49, x51, x52, x54, x55), x56, x57))
       ]
       where
         preShrink_Paths  = Map.map NonEmpty
diff --git a/libraries/Cabal/cabal-install/tests/fixtures/init/golden/pkg-desc/pkg-with-flags.golden b/libraries/Cabal/cabal-install/tests/fixtures/init/golden/pkg-desc/pkg-with-flags.golden
index 6d64d7a23..2fbfdc1ab 100644
--- a/libraries/Cabal/cabal-install/tests/fixtures/init/golden/pkg-desc/pkg-with-flags.golden
+++ b/libraries/Cabal/cabal-install/tests/fixtures/init/golden/pkg-desc/pkg-with-flags.golden
@@ -1,4 +1,4 @@
-cabal-version:      2.2
+cabal-version:      >=1.0
 -- The cabal-version field refers to the version of the .cabal specification,
 -- and can be different from the cabal-install (the tool) version and the
 -- Cabal (the library) version you are using. As such, the Cabal (the library)
diff --git a/libraries/Cabal/cabal-install/tests/fixtures/project-root/cabal.project b/libraries/Cabal/cabal-install/tests/fixtures/project-root/cabal.project
new file mode 100644
index 000000000..e69de29bb
diff --git a/libraries/Cabal/cabal-install/tests/fixtures/project-root/cabal.project.other b/libraries/Cabal/cabal-install/tests/fixtures/project-root/cabal.project.other
new file mode 100644
index 000000000..e69de29bb
diff --git a/libraries/Cabal/cabal-install/tests/fixtures/project-root/lib/.gitkeep b/libraries/Cabal/cabal-install/tests/fixtures/project-root/lib/.gitkeep
new file mode 100644
index 000000000..e69de29bb
diff --git a/libraries/Cabal/cabal-install/tests/fixtures/project-root/nix/cabal.project b/libraries/Cabal/cabal-install/tests/fixtures/project-root/nix/cabal.project
new file mode 100644
index 000000000..e69de29bb
diff --git a/libraries/Cabal/cabal-install/tests/fixtures/project-root/nix/cabal.project.other b/libraries/Cabal/cabal-install/tests/fixtures/project-root/nix/cabal.project.other
new file mode 100644
index 000000000..e69de29bb
diff --git a/libraries/Cabal/cabal-testsuite/.gitignore b/libraries/Cabal/cabal-testsuite/.gitignore
index eca4b1cdb..4504f5761 100644
--- a/libraries/Cabal/cabal-testsuite/.gitignore
+++ b/libraries/Cabal/cabal-testsuite/.gitignore
@@ -1,2 +1,3 @@
 *.dist
 Setup
+**/HaddockOutput/**/docs/
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/Main.hs b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/Main.hs
new file mode 100644
index 000000000..b14c74931
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/Main.hs
@@ -0,0 +1,12 @@
+module Main (main) where
+
+import Lib (bar)
+
+main :: IO ()
+main = do
+  -- Make sure cabal sees this because this test is about which
+  -- 'Generated' module the 'Lib' was compiled against.
+  putStrLn "-----BEGIN CABAL OUTPUT-----"
+  putStrLn bar
+  putStrLn "-----END CABAL OUTPUT-----"
+
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/Setup.hs b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/Setup.hs
new file mode 100644
index 000000000..2eab853cd
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/Setup.hs
@@ -0,0 +1,24 @@
+
+module Main (main) where
+
+import Distribution.Simple
+import Distribution.Simple.LocalBuildInfo
+import Distribution.Simple.PreProcess
+import Distribution.Simple.Program
+import Distribution.Types.BuildInfo
+import Distribution.Verbosity
+
+import System.Directory
+
+ppHGen :: BuildInfo -> LocalBuildInfo -> ComponentLocalBuildInfo -> PreProcessor
+ppHGen _bi lbi _clbi = PreProcessor
+  { platformIndependent = True
+  , ppOrdering          = unsorted
+  , runPreProcessor     = mkSimplePreProcessor $ \inFile outFile verbosity ->
+      copyFile inFile outFile
+  }
+
+main :: IO ()
+main = defaultMainWithHooks simpleUserHooks
+  { hookedPreProcessors = ("hgen", ppHGen) : hookedPreProcessors simpleUserHooks
+  }
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.out
new file mode 100644
index 000000000..4c2b76aa5
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.out
@@ -0,0 +1,22 @@
+# cabal v2-run
+Resolving dependencies...
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - test-0.1 (exe:autogen-toggle-test) (first run)
+Configuring test-0.1...
+Preprocessing library for test-0.1..
+Building library for test-0.1..
+Preprocessing executable 'autogen-toggle-test' for test-0.1..
+Building executable 'autogen-toggle-test' for test-0.1..
+The module says: Real module, ship to production
+# cabal v2-run
+Resolving dependencies...
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - test-0.1 (exe:autogen-toggle-test) (configuration changed)
+Configuring test-0.1...
+Preprocessing library for test-0.1..
+Building library for test-0.1..
+Preprocessing executable 'autogen-toggle-test' for test-0.1..
+Building executable 'autogen-toggle-test' for test-0.1..
+The module says: Prebuilt module, don't use in production
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.project
new file mode 100644
index 000000000..52db9d1bc
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.project
@@ -0,0 +1 @@
+packages: test.cabal
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.test.hs
new file mode 100644
index 000000000..4b0e1639c
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/cabal.test.hs
@@ -0,0 +1,7 @@
+import Test.Cabal.Prelude
+
+main :: IO ()
+main = cabalTest . recordMode RecordMarked $ do
+  skipUnlessGhcVersion ">= 9.7"
+  cabal "v2-run" ["-fgenerate", "autogen-toggle-test"]
+  cabal "v2-run" ["-f-generate", "autogen-toggle-test"]
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/gen/Generated.hs b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/gen/Generated.hs
new file mode 100644
index 000000000..128421fae
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/gen/Generated.hs
@@ -0,0 +1,4 @@
+module Generated (foo) where
+
+foo :: String
+foo = "Prebuilt module, don't use in production"
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/src-inputs/Generated.hgen b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/src-inputs/Generated.hgen
new file mode 100644
index 000000000..fa31359d3
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/src-inputs/Generated.hgen
@@ -0,0 +1,4 @@
+module Generated (foo) where
+
+foo :: String
+foo = "Real module, ship to production"
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/src/Lib.hs b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/src/Lib.hs
new file mode 100644
index 000000000..0e5ae8ead
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/src/Lib.hs
@@ -0,0 +1,6 @@
+module Lib (bar) where
+
+import Generated (foo)
+
+bar :: String
+bar = "The module says: " ++ foo
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/test.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/test.cabal
new file mode 100644
index 000000000..1465ab8aa
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/AutogenModulesToggling/test.cabal
@@ -0,0 +1,57 @@
+cabal-version: 3.0
+
+name: test
+version: 0.1
+category: Test
+maintainer: S
+synopsis: Test input
+description: Test input
+license: BSD-3-Clause
+
+extra-source-files:
+  src-inputs/**/*.hgen
+
+build-type: Custom
+
+custom-setup
+  setup-depends: Cabal >= 3.9, base, directory
+
+flag generate
+  description:
+    Generate files instead of using pregenerated ones
+  default:
+    False
+  manual:
+    True
+
+library
+  exposed-modules:
+    Lib
+    Generated
+
+  hs-source-dirs:
+    src
+
+  if flag(generate)
+    hs-source-dirs:
+      src-inputs
+    autogen-modules:
+      Generated
+    -- We don’t use any tools in this case but they’ll have to
+    -- go here
+    -- build-tool-depends:
+    --   alex:alex
+  else
+    hs-source-dirs:
+      gen
+
+  build-depends: base > 4
+  default-language: Haskell2010
+
+executable autogen-toggle-test
+  main-is: Main.hs
+  hs-source-dirs: .
+  default-language: Haskell2010
+  build-depends:
+    , base > 4
+    , test
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/COptions/CxxOs/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/COptions/CxxOs/cabal.test.hs
index 9706be305..af9d41696 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/COptions/CxxOs/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/COptions/CxxOs/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `cxx-options`, do not use `-O1`.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/DefaultExtension/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/DefaultExtension/cabal.test.hs
index 558722a1e..ed1e8720e 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/DefaultExtension/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/DefaultExtension/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `default-extensions` need ≥1.10.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/DefaultLanguage/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/DefaultLanguage/cabal.test.hs
index 9b2fb76f2..aefcb6e89 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/DefaultLanguage/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/DefaultLanguage/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `default-language` need ≥1.10.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/ExtraDynamicLibraryFlavour/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/ExtraDynamicLibraryFlavour/cabal.test.hs
index d6de120a4..ea93456bb 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/ExtraDynamicLibraryFlavour/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/ExtraDynamicLibraryFlavour/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `extra-dynamic-library-flavour` need ≥3.0.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/Mixins/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/Mixins/cabal.test.hs
index 59b761f80..b1d092438 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/Mixins/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/Mixins/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `mixins` need ≥2.0.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/Sources/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/Sources/cabal.test.hs
index 4b34bdad9..5b8c31c0b 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/Sources/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/Sources/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `cmm-sources` and friends need ≥3.0.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/VirtualModules/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/VirtualModules/cabal.test.hs
index 4672147a4..7a92518d4 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/VirtualModules/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/CabalVersion/VirtualModules/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `virtual-modules` need ≥2.2.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/DeprecatedExtension/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/DeprecatedExtension/cabal.test.hs
index 1d31f4c58..73f0a75bd 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/DeprecatedExtension/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/DeprecatedExtension/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Deprecated extension.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoCategory/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoCategory/cabal.test.hs
index 484b17857..50fb01251 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoCategory/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoCategory/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- No category.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoDescription/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoDescription/cabal.test.hs
index 388d77437..ee2c3ac00 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoDescription/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoDescription/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- No description.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoMaintainer/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoMaintainer/cabal.test.hs
index 6a615a7ee..832b74a21 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoMaintainer/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoMaintainer/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- No maintainer.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoSynopsis/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoSynopsis/cabal.test.hs
index ea88909bb..f2ee05944 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoSynopsis/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/NoSynopsis/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- No synopsis.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/ShortDescription/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/ShortDescription/cabal.test.hs
index 9974626c7..723a2dca2 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/ShortDescription/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Fields/ShortDescription/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Description should be longer than synopsis.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/GHCOptions/GHCSharedOptions/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/GHCOptions/GHCSharedOptions/cabal.test.hs
index 8974491ac..672a005ed 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/GHCOptions/GHCSharedOptions/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/GHCOptions/GHCSharedOptions/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Tricky option in `ghc-shared-options`.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/NoFileSpecified/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/NoFileSpecified/cabal.test.hs
index 65cef73d4..7a81a2471 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/NoFileSpecified/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/NoFileSpecified/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `licence-file` missing.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/SuspiciousLicense/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/SuspiciousLicense/cabal.test.hs
index 086abf343..37ee44418 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/SuspiciousLicense/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/SuspiciousLicense/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Suspicious license BSD4.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/SuspiciousVersion/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/SuspiciousVersion/cabal.test.hs
index ae6610af4..9ba2f9830 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/SuspiciousVersion/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/SuspiciousVersion/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Suspicious license version.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/WarnAllRightsReserved/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/WarnAllRightsReserved/cabal.test.hs
index f618ac6fb..7719c9ffd 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/WarnAllRightsReserved/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/License/WarnAllRightsReserved/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Dubious AllRightsReserved.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Sanity/VersionSignatures/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Sanity/VersionSignatures/cabal.test.hs
index 2ef34c345..da01864a5 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Sanity/VersionSignatures/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/ConfiguredPackage/Sanity/VersionSignatures/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- `signatures` field used with cabal-version < 2.0
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/NonConfCheck/DevOnlyFlags/Profiling/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/NonConfCheck/DevOnlyFlags/Profiling/cabal.test.hs
index ad9c8f4bb..ac7dc0a3e 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/NonConfCheck/DevOnlyFlags/Profiling/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/NonConfCheck/DevOnlyFlags/Profiling/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Profiling flags unsuited for distribution.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/NonConfCheck/UnusedFlags/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/NonConfCheck/UnusedFlags/cabal.test.hs
index 7bbbaf8e4..15c29338a 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/NonConfCheck/UnusedFlags/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/NonConfCheck/UnusedFlags/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Unused flag.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/PackageFiles/BOM/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/Check/PackageFiles/BOM/cabal.out
index 8d2ce00a9..696de1ec9 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/PackageFiles/BOM/cabal.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/PackageFiles/BOM/cabal.out
@@ -1,6 +1,6 @@
 # cabal check
 Warning: These warnings may cause trouble when distributing the package:
-Warning: pkg.cabal:1:2: Byte-order mark found at the beginning of the file
+Warning: pkg.cabal:1:1: Byte-order mark found at the beginning of the file
 Warning: The following errors will cause portability problems on other environments:
 Warning: ./pkg.cabal starts with an Unicode byte order mark (BOM). This may cause problems with older cabal versions.
 Warning: Hackage would reject this package.
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Check/PackageFiles/VCSInfo/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Check/PackageFiles/VCSInfo/cabal.test.hs
index 0d6ac3d42..a2321d77b 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Check/PackageFiles/VCSInfo/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Check/PackageFiles/VCSInfo/cabal.test.hs
@@ -2,4 +2,4 @@ import Test.Cabal.Prelude
 
 -- Missing VCS info.
 main = cabalTest $
-  fails $ cabal "check" []
+  cabal "check" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ConditionalAndImport/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ConditionalAndImport/cabal.test.hs
index 0791050f6..92ad43e8b 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ConditionalAndImport/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ConditionalAndImport/cabal.test.hs
@@ -2,5 +2,5 @@ import Test.Cabal.Prelude
 main = cabalTest $
   withRepo "repo" $ do
      cabal "v2-run" [ "some-exe" ]
-     fails $ cabal "v2-build" [ "--project=cabal-cyclical.project" ]
-     fails $ cabal "v2-build" [ "--project=cabal-bad-conditional.project" ]
+     fails $ cabal "v2-build" [ "--project-file=cabal-cyclical.project" ]
+     fails $ cabal "v2-build" [ "--project-file=cabal-bad-conditional.project" ]
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ConfigFile/InitSectionFields/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/ConfigFile/InitSectionFields/cabal.out
new file mode 100644
index 000000000..e3dc6d7ee
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ConfigFile/InitSectionFields/cabal.out
@@ -0,0 +1,2 @@
+# cabal user-config
+Writing default configuration to <ROOT>/cabal.dist/cabal-config
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ConfigFile/InitSectionFields/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ConfigFile/InitSectionFields/cabal.test.hs
new file mode 100644
index 000000000..ac7c93345
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ConfigFile/InitSectionFields/cabal.test.hs
@@ -0,0 +1,21 @@
+import Test.Cabal.Prelude
+import Data.List ( isInfixOf, groupBy )
+import Data.Function ( on )
+
+main = cabalTest $ do
+    workdir <- fmap testWorkDir getTestEnv
+    let conf = workdir </> "cabal-config"
+    cabalG ["--config-file", conf] "user-config" ["init"]
+    confContents <- liftIO $ readFile conf
+    let ls = lines confContents
+        sections = groupBy ((==) `on` (== "")) ls
+        [initLs] = filter ((== "init") . head) sections
+        init = unlines initLs
+    assertInitSectionContainsField init "quiet"
+    assertInitSectionContainsField init "no-comments"
+    assertInitSectionContainsField init "minimal"
+    assertInitSectionContainsField init "simple"
+
+assertInitSectionContainsField section field =
+    assertBool ("init section of config should contain the field " ++ field)
+      ((field ++ ":") `isInfixOf` section)
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/CustomPreProcess/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/CustomPreProcess/cabal.test.hs
index b492140b4..93588d88c 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/CustomPreProcess/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/CustomPreProcess/cabal.test.hs
@@ -1,9 +1,6 @@
 import Test.Cabal.Prelude
 -- Test internal custom preprocessor
 main = cabalTest $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     skipUnless "no Cabal for GHC" =<< hasCabalForGhc
 
     -- old Cabal's ./Setup.hs output is difficult to normalise
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/Lib.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/Lib.hs
new file mode 100644
index 000000000..4601c7587
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/Lib.hs
@@ -0,0 +1,3 @@
+module Lib where
+
+bar = ()
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/lib.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/lib.cabal
new file mode 100644
index 000000000..6c79ff60b
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/lib.cabal
@@ -0,0 +1,7 @@
+cabal-version:      2.4
+name:               lib
+version:            0.1.0.0
+library
+    exposed-modules:  Lib
+    build-depends:    base
+    default-language: Haskell2010
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/test.hs
new file mode 100644
index 000000000..44141cdb7
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ExtraCompilationArtifacts/test.hs
@@ -0,0 +1,32 @@
+import Distribution.Simple.LocalBuildInfo
+import Test.Cabal.Prelude
+import System.Directory
+import System.FilePath
+
+-- Test if extra-compilation-artifacts are installed
+main = setupAndCabalTest . recordMode DoNotRecord $ do
+  withPackageDb $ do
+    setup "configure" []
+    setup "build" []
+    generateExtraCompArtifactsToBuildDir
+    setup "copy" []
+
+    lbi <- getLocalBuildInfoM
+    let installedLibPath = libdir $ absoluteInstallDirs (localPkgDescr lbi) lbi NoCopyDest
+
+    shouldExist $ installedLibPath </> "extra-compilation-artifacts" </> "ghc-plugin-X" </> "data-dir" </> "content-A.txt"
+    shouldExist $ installedLibPath </> "extra-compilation-artifacts" </> "ghc-plugin-X" </> "data-dir" </> "content-B.txt"
+    shouldExist $ installedLibPath </> "extra-compilation-artifacts" </> "ghc-plugin-Y" </> "content-Y.txt"
+
+generateExtraCompArtifactsToBuildDir :: TestM ()
+generateExtraCompArtifactsToBuildDir = do
+  -- extra compilation artifacts can be generated optionally by ghc plugins
+  dist_dir <- fmap testDistDir getTestEnv
+  let genArtifact fname = liftIO $ do
+        let dst = dist_dir </> "build" </> "extra-compilation-artifacts" </> fname
+        createDirectoryIfMissing True (takeDirectory dst)
+        writeFile dst ""
+  genArtifact $ "ghc-plugin-X" </> "data-dir" </> "content-A.txt"
+  genArtifact $ "ghc-plugin-X" </> "data-dir" </> "content-B.txt"
+  genArtifact $ "ghc-plugin-Y" </> "content-Y.txt"
+
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/FFI/ForeignOptsC/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/FFI/ForeignOptsC/cabal.test.hs
index 377b4a014..7d5d4f0af 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/FFI/ForeignOptsC/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/FFI/ForeignOptsC/cabal.test.hs
@@ -1,7 +1,4 @@
 import Test.Cabal.Prelude
 main = cabalTest $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal "v2-build" ["foreign-opts-c-exe"]
     withPlan $ runPlanExe "foreign-opts-c" "foreign-opts-c-exe" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/FFI/ForeignOptsCxx/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/FFI/ForeignOptsCxx/cabal.test.hs
index 83177d702..10024955a 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/FFI/ForeignOptsCxx/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/FFI/ForeignOptsCxx/cabal.test.hs
@@ -1,7 +1,4 @@
 import Test.Cabal.Prelude
 main = cabalTest $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal "v2-build" ["foreign-opts-cxx-exe"]
     withPlan $ runPlanExe "foreign-opts-cxx" "foreign-opts-cxx-exe" []
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Init/init-interactive.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/Init/init-interactive.test.hs
index 95ff4b3aa..86bda8b02 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Init/init-interactive.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Init/init-interactive.test.hs
@@ -6,7 +6,7 @@ main = cabalTest $
 
     buildOut <- withDirectory cwd $ do
       cabalWithStdin "init" ["-i"]
-        "2\n\n5\n\n\n2\n\n\n\n\n\n\n\n\n\n"
+        "2\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n"
       setup "configure" []
       setup' "build" ["app"]
 
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.out
new file mode 100644
index 000000000..1437190c2
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.out
@@ -0,0 +1,13 @@
+# cabal v2-repl
+Resolving dependencies...
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - pkg-a-0 (interactive) (lib) (first run)
+ - pkg-b-0 (interactive) (lib) (first run)
+ - pkg-c-0 (interactive) (lib) (first run)
+Configuring library for pkg-a-0..
+Preprocessing library for pkg-a-0..
+Configuring library for pkg-b-0..
+Preprocessing library for pkg-b-0..
+Configuring library for pkg-c-0..
+Preprocessing library for pkg-c-0..
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.project
new file mode 100644
index 000000000..91b0dbb40
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.project
@@ -0,0 +1,3 @@
+packages: pkg-a/*.cabal
+packages: pkg-b/*.cabal
+packages: pkg-c/*.cabal
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.test.hs
new file mode 100644
index 000000000..54a0afeb9
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/cabal.test.hs
@@ -0,0 +1,17 @@
+import Test.Cabal.Prelude
+
+main = do
+  cabalTest $ do
+    skipUnlessGhcVersion ">= 9.4"
+    -- Note: only the last package is interactive.
+    -- this test should load pkg-b too.
+    res <- cabalWithStdin "v2-repl" ["--enable-multi-repl","pkg-a", "pkg-c"] ""
+
+    -- we should check that pkg-c is indeed loaded,
+    -- but currently the unit order is non-deterministic
+    -- Fix this when GHC has a way to change active unit.
+    -- TODO: ask for pkg-c unit, print Quu.quu
+
+    assertOutputContains "- pkg-b-0 (interactive)" res
+    -- assertOutputContains "168" res
+    return ()
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-a/Foo.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-a/Foo.hs
new file mode 100644
index 000000000..997ca89ee
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-a/Foo.hs
@@ -0,0 +1,5 @@
+module Foo where
+
+foo :: Int
+foo = 42
+
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-a/pkg-a.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-a/pkg-a.cabal
new file mode 100644
index 000000000..e5241b656
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-a/pkg-a.cabal
@@ -0,0 +1,8 @@
+cabal-version: 2.2
+name: pkg-a
+version: 0
+
+library
+  default-language: Haskell2010
+  build-depends: base
+  exposed-modules: Foo
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-b/Bar.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-b/Bar.hs
new file mode 100644
index 000000000..958a85a05
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-b/Bar.hs
@@ -0,0 +1,6 @@
+module Bar where
+
+import Foo
+
+bar :: Int
+bar = foo + foo
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-b/pkg-b.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-b/pkg-b.cabal
new file mode 100644
index 000000000..8e1a273f0
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-b/pkg-b.cabal
@@ -0,0 +1,8 @@
+cabal-version: 2.2
+name: pkg-b
+version: 0
+
+library
+  default-language: Haskell2010
+  build-depends: base, pkg-a
+  exposed-modules: Bar
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-c/Quu.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-c/Quu.hs
new file mode 100644
index 000000000..b684b61e2
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-c/Quu.hs
@@ -0,0 +1,6 @@
+module Quu where
+
+import Bar
+
+quu :: Int
+quu = bar + bar
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-c/pkg-c.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-c/pkg-c.cabal
new file mode 100644
index 000000000..11363814d
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledClosure/pkg-c/pkg-c.cabal
@@ -0,0 +1,8 @@
+cabal-version: 2.2
+name: pkg-c
+version: 0
+
+library
+  default-language: Haskell2010
+  build-depends: base, pkg-b
+  exposed-modules: Quu
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.out
new file mode 100644
index 000000000..c20aa4c53
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.out
@@ -0,0 +1,10 @@
+# cabal v2-repl
+Resolving dependencies...
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - pkg-a-0 (interactive) (lib) (first run)
+ - pkg-b-0 (interactive) (lib) (first run)
+Configuring library for pkg-a-0..
+Preprocessing library for pkg-a-0..
+Configuring library for pkg-b-0..
+Preprocessing library for pkg-b-0..
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.project
new file mode 100644
index 000000000..bf8292ade
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.project
@@ -0,0 +1,2 @@
+packages: pkg-a/*.cabal
+packages: pkg-b/*.cabal
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.test.hs
new file mode 100644
index 000000000..d7433375c
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/cabal.test.hs
@@ -0,0 +1,11 @@
+import Test.Cabal.Prelude
+
+main = do
+  cabalTest $ do
+    skipUnlessGhcVersion ">= 9.4"
+    -- the package order is non-deterministic.
+    -- add Bar.Bar input to test that packages are trully loaded
+    -- when GHC gets support for switching active units
+    res <- cabalWithStdin "v2-repl" ["--enable-multi-repl","pkg-a", "pkg-b"] ""
+    -- assertOutputContains "3735929054" res
+    return ()
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-a/Foo.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-a/Foo.hs
new file mode 100644
index 000000000..997ca89ee
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-a/Foo.hs
@@ -0,0 +1,5 @@
+module Foo where
+
+foo :: Int
+foo = 42
+
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-a/pkg-a.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-a/pkg-a.cabal
new file mode 100644
index 000000000..e5241b656
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-a/pkg-a.cabal
@@ -0,0 +1,8 @@
+cabal-version: 2.2
+name: pkg-a
+version: 0
+
+library
+  default-language: Haskell2010
+  build-depends: base
+  exposed-modules: Foo
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-b/Bar.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-b/Bar.hs
new file mode 100644
index 000000000..e8d379a62
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-b/Bar.hs
@@ -0,0 +1,6 @@
+module Bar (foo, bar) where
+
+import Foo (foo)
+
+bar :: Int
+bar = 0xdeadc0de
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-b/pkg-b.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-b/pkg-b.cabal
new file mode 100644
index 000000000..8e1a273f0
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/EnabledSucc/pkg-b/pkg-b.cabal
@@ -0,0 +1,8 @@
+cabal-version: 2.2
+name: pkg-b
+version: 0
+
+library
+  default-language: Haskell2010
+  build-depends: base, pkg-a
+  exposed-modules: Bar
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.multirepl-a.out b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.multirepl-a.out
new file mode 100644
index 000000000..1347c0477
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.multirepl-a.out
@@ -0,0 +1,9 @@
+# cabal v2-repl
+Resolving dependencies...
+Error: cabal: Cannot open a repl for multiple components at once. The targets 'pkg-a' and 'pkg-b' refer to different components..
+
+Your compiler supports a multiple component repl but support is not enabled.
+The experimental multi repl can be enabled by
+  * Globally: Setting multi-repl: True in your .cabal/config
+  * Project Wide: Setting multi-repl: True in your cabal.project file
+  * Per Invocation: By passing --enable-multi-repl when starting the repl
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.project
new file mode 100644
index 000000000..bf8292ade
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.project
@@ -0,0 +1,2 @@
+packages: pkg-a/*.cabal
+packages: pkg-b/*.cabal
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.test.hs
new file mode 100644
index 000000000..e5207a203
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/cabal.test.hs
@@ -0,0 +1,14 @@
+import Test.Cabal.Prelude
+
+main = do
+  cabalTest' "multirepl-a" $ do
+    skipUnlessGhcVersion ">= 9.4"
+    res <- fails $ cabalWithStdin "v2-repl" ["--disable-multi-repl","pkg-a", "pkg-b"] "foo"
+    assertOutputContains "Cannot open a repl for multiple components at once." res
+    assertOutputContains "Your compiler supports a multiple component repl but support is not enabled." res
+
+  cabalTest' "multirepl-b" $ do
+    skipUnlessGhcVersion "< 9.4"
+    res <- fails $ cabalWithStdin "v2-repl" ["--disable-multi-repl","pkg-a", "pkg-b"] "foo"
+    assertOutputContains "Cannot open a repl for multiple components at once." res
+    assertOutputContains "The reason for this limitation is that your version" res
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-a/Foo.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-a/Foo.hs
new file mode 100644
index 000000000..997ca89ee
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-a/Foo.hs
@@ -0,0 +1,5 @@
+module Foo where
+
+foo :: Int
+foo = 42
+
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-a/pkg-a.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-a/pkg-a.cabal
new file mode 100644
index 000000000..e5241b656
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-a/pkg-a.cabal
@@ -0,0 +1,8 @@
+cabal-version: 2.2
+name: pkg-a
+version: 0
+
+library
+  default-language: Haskell2010
+  build-depends: base
+  exposed-modules: Foo
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-b/Bar.hs b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-b/Bar.hs
new file mode 100644
index 000000000..1dc878062
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-b/Bar.hs
@@ -0,0 +1,4 @@
+module Bar where
+
+bar :: Int
+bar = 0xdeadc0de
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-b/pkg-b.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-b/pkg-b.cabal
new file mode 100644
index 000000000..0051d3810
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/MultiRepl/NotEnabledFail/pkg-b/pkg-b.cabal
@@ -0,0 +1,8 @@
+cabal-version: 2.2
+name: pkg-b
+version: 0
+
+library
+  default-language: Haskell2010
+  build-depends: base
+  exposed-modules: Bar
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/OptionsFlag/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/OptionsFlag/cabal.test.hs
index 055979ea6..9174ba94a 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/OptionsFlag/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/OptionsFlag/cabal.test.hs
@@ -1,9 +1,6 @@
 import Test.Cabal.Prelude
 
 main = cabalTest $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal "v2-bench"
       [ "--benchmark-option=1"
       , "--benchmark-options=\"2 3\""
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/Main.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/Main.hs
new file mode 100644
index 000000000..73566f6f2
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/Main.hs
@@ -0,0 +1 @@
+main = putStrLn "Hello World"
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/WarningRTS.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/WarningRTS.cabal
new file mode 100644
index 000000000..5e2f9ab0d
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/WarningRTS.cabal
@@ -0,0 +1,14 @@
+name: WarningRTS
+version: 1.0
+build-type: Simple
+cabal-version: >= 1.10
+
+benchmark foo
+    type: exitcode-stdio-1.0
+    main-is: Main.hs
+    build-depends: base
+    default-language: Haskell2010
+
+library
+    exposed-modules: Main
+    default-language: Haskell2010
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.out
new file mode 100644
index 000000000..6a6d6bf07
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.out
@@ -0,0 +1,31 @@
+# cabal bench
+Resolving dependencies...
+Warning: Some RTS options were found standalone, which affect cabal and not the binary. Please note that +RTS inside the --benchmark-options argument suffices if your goal is to affect the benchmarked binary. For example, use "cabal test --benchmark-options='+RTS -N'" to pass the '-N' RTS option to your binary.
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - WarningRTS-1.0 (bench:foo) (first run)
+Configuring benchmark 'foo' for WarningRTS-1.0..
+Preprocessing benchmark 'foo' for WarningRTS-1.0..
+Building benchmark 'foo' for WarningRTS-1.0..
+Running 1 benchmarks...
+Benchmark foo: RUNNING...
+Benchmark foo: FINISH
+# cabal bench
+Warning: Some RTS options were found standalone, which affect cabal and not the binary. Please note that +RTS inside the --benchmark-options argument suffices if your goal is to affect the benchmarked binary. For example, use "cabal test --benchmark-options='+RTS -N'" to pass the '-N' RTS option to your binary.
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - WarningRTS-1.0 (bench:foo) (first run)
+Preprocessing benchmark 'foo' for WarningRTS-1.0..
+Building benchmark 'foo' for WarningRTS-1.0..
+Running 1 benchmarks...
+Benchmark foo: RUNNING...
+Benchmark foo: FINISH
+# cabal bench
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - WarningRTS-1.0 (bench:foo) (first run)
+Preprocessing benchmark 'foo' for WarningRTS-1.0..
+Building benchmark 'foo' for WarningRTS-1.0..
+Running 1 benchmarks...
+Benchmark foo: RUNNING...
+Benchmark foo: FINISH
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.project
new file mode 100644
index 000000000..e6fdbadb4
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.project
@@ -0,0 +1 @@
+packages: .
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.test.hs
new file mode 100644
index 000000000..91ebf7017
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBench/WarningRTS/cabal.test.hs
@@ -0,0 +1,11 @@
+import Test.Cabal.Prelude
+
+main = cabalTest $ do
+    res <- cabal' "bench" ["foo", "+RTS"]
+    assertOutputContains "Some RTS options were found standalone" res
+
+    res <- cabal' "bench" ["foo", "--benchmark-options=\"+RTS\"", "+RTS"]
+    assertOutputContains "Some RTS options were found standalone" res
+
+    res <- cabal' "bench" ["foo", "--benchmark-options=\"+RTS\""]
+    assertOutputDoesNotContain "Some RTS options were found standalone" res
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/Script/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/Script/cabal.test.hs
index 7e4c31a6a..db31636dc 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/Script/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/Script/cabal.test.hs
@@ -1,9 +1,6 @@
 import Test.Cabal.Prelude
 
 main = cabalTest . void $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal' "v2-build" ["script.hs"]
 
     env      <- getTestEnv
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/ScriptBuildRepl/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/ScriptBuildRepl/cabal.out
index 71653f098..9387df51d 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/ScriptBuildRepl/cabal.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/ScriptBuildRepl/cabal.out
@@ -8,4 +8,5 @@ Building executable 'cabal-script-script.hs' for fake-package-0..
 # cabal v2-repl
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - fake-package-0 (exe:cabal-script-script.hs) (ephemeral targets)
+ - fake-package-0 (interactive) (exe:cabal-script-script.hs) (configuration changed)
+Configuring executable 'cabal-script-script.hs' for fake-package-0..
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/ScriptRerun/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/ScriptRerun/cabal.test.hs
index 863d7706a..18c1becba 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/ScriptRerun/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdBuild/ScriptRerun/cabal.test.hs
@@ -1,8 +1,5 @@
 import Test.Cabal.Prelude
 
 main = cabalTest . void $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal' "v2-build" ["script.hs"]
     cabal' "v2-build" ["script.hs"]
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Keep/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Keep/cabal.test.hs
index f54bf5a4b..8063d2290 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Keep/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Keep/cabal.test.hs
@@ -2,9 +2,6 @@ import Test.Cabal.Prelude
 import System.Directory (copyFile, removeFile)
 
 main = cabalTest . void $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     env <- getTestEnv
     let td = testCurrentDir env
 
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Orphan/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Orphan/cabal.test.hs
index 0eac6291f..39ba5185e 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Orphan/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Orphan/cabal.test.hs
@@ -2,9 +2,6 @@ import Test.Cabal.Prelude
 import System.Directory (copyFile, removeFile)
 
 main = cabalTest . void $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     env <- getTestEnv
     let td = testCurrentDir env
 
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Script/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Script/cabal.test.hs
index aa0fc3e9d..d3870ce15 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Script/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdClean/Script/cabal.test.hs
@@ -1,9 +1,6 @@
 import Test.Cabal.Prelude
 
 main = cabalTest . void $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal' "v2-build" ["script.hs"]
     cabal' "v2-clean" ["script.hs"]
 
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRepl/Script/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRepl/Script/cabal.out
index cba93d1cf..5e1ffae08 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRepl/Script/cabal.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRepl/Script/cabal.out
@@ -2,5 +2,5 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - fake-package-0 (exe:cabal-script-script.hs) (first run)
+ - fake-package-0 (interactive) (exe:cabal-script-script.hs) (first run)
 Configuring executable 'cabal-script-script.hs' for fake-package-0..
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRepl/ScriptRerun/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRepl/ScriptRerun/cabal.out
index 135f9694e..c70622cac 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRepl/ScriptRerun/cabal.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRepl/ScriptRerun/cabal.out
@@ -2,9 +2,9 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - fake-package-0 (exe:cabal-script-script.hs) (first run)
+ - fake-package-0 (interactive) (exe:cabal-script-script.hs) (first run)
 Configuring executable 'cabal-script-script.hs' for fake-package-0..
 # cabal v2-repl
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - fake-package-0 (exe:cabal-script-script.hs) (first run)
+ - fake-package-0 (interactive) (exe:cabal-script-script.hs) (first run)
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/Script/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/Script/cabal.test.hs
index e145dc9d8..045c88117 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/Script/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/Script/cabal.test.hs
@@ -1,9 +1,6 @@
 import Test.Cabal.Prelude
 
 main = cabalTest $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     res <- cabal' "v2-run" ["script.hs"]
     assertOutputContains "Hello World" res
 
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptNoExtension/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptNoExtension/cabal.test.hs
index e010ea6ec..b78a6941a 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptNoExtension/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptNoExtension/cabal.test.hs
@@ -1,7 +1,4 @@
 import Test.Cabal.Prelude
 
 main = cabalTest . void $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal' "v2-run" ["with sp"] >>= assertOutputContains "Hello World"
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptRerun/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptRerun/cabal.test.hs
index 3092a6ea5..7df7f1451 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptRerun/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptRerun/cabal.test.hs
@@ -1,8 +1,5 @@
 import Test.Cabal.Prelude
 
 main = cabalTest . void $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal' "v2-run" ["script.hs"]
     cabal' "v2-run" ["script.hs"]
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptWithProjectBlock/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptWithProjectBlock/cabal.test.hs
index 731fb7182..8c9207913 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptWithProjectBlock/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/ScriptWithProjectBlock/cabal.test.hs
@@ -1,9 +1,6 @@
 import Test.Cabal.Prelude
 
 main = cabalTest $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     -- script is called "s.hs" to avoid Windows long path issue in CI
     res <- cabal' "v2-run" ["s.hs"]
     assertOutputContains "Hello World" res
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/Main.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/Main.hs
new file mode 100644
index 000000000..73566f6f2
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/Main.hs
@@ -0,0 +1 @@
+main = putStrLn "Hello World"
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/WarningRTS.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/WarningRTS.cabal
new file mode 100644
index 000000000..bdd1846c1
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/WarningRTS.cabal
@@ -0,0 +1,13 @@
+name: WarningRTS
+version: 1.0
+build-type: Simple
+cabal-version: >= 1.10
+
+executable foo
+    main-is: Main.hs
+    build-depends: base
+    default-language: Haskell2010
+
+library
+    exposed-modules: Main
+    default-language: Haskell2010
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.out
new file mode 100644
index 000000000..044ba3d1d
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.out
@@ -0,0 +1,12 @@
+# cabal run
+Resolving dependencies...
+Warning: Your RTS options are applied to cabal, not the executable. Use '--' to separate cabal options from your executable options. For example, use 'cabal run -- +RTS -N to pass the '-N' RTS option to your executable.
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - WarningRTS-1.0 (exe:foo) (first run)
+Configuring executable 'foo' for WarningRTS-1.0..
+Preprocessing executable 'foo' for WarningRTS-1.0..
+Building executable 'foo' for WarningRTS-1.0..
+# cabal run
+Warning: Your RTS options are applied to cabal, not the executable. Use '--' to separate cabal options from your executable options. For example, use 'cabal run -- +RTS -N to pass the '-N' RTS option to your executable.
+# cabal run
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.project
new file mode 100644
index 000000000..e6fdbadb4
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.project
@@ -0,0 +1 @@
+packages: .
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.test.hs
new file mode 100644
index 000000000..99b9f2008
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdRun/WarningRTS/cabal.test.hs
@@ -0,0 +1,11 @@
+import Test.Cabal.Prelude
+
+main = cabalTest $ do
+    res <- cabal' "run" ["foo", "+RTS"]
+    assertOutputContains "Warning: Your RTS options" res
+
+    res <- cabal' "run" ["foo", "+RTS", "--"]
+    assertOutputContains "Warning: Your RTS options" res
+
+    res <- cabal' "run" ["foo", "--", "+RTS"]
+    assertOutputDoesNotContain "Warning: Your RTS options" res
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/OptionsFlag/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/OptionsFlag/cabal.test.hs
index c0493cf46..e9b8f5b6c 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/OptionsFlag/cabal.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/OptionsFlag/cabal.test.hs
@@ -1,9 +1,6 @@
 import Test.Cabal.Prelude
 
 main = cabalTest $ do
-  isWin <- isWindows
-  ghc94 <- isGhcVersion "== 9.4.*"
-  expectBrokenIf (isWin && ghc94) 8451 $ do
     cabal "v2-test"
       [ "--test-option=1"
       , "--test-options=\"2 3\""
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/Main.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/Main.hs
new file mode 100644
index 000000000..73566f6f2
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/Main.hs
@@ -0,0 +1 @@
+main = putStrLn "Hello World"
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/WarningRTS.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/WarningRTS.cabal
new file mode 100644
index 000000000..c8214a609
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/WarningRTS.cabal
@@ -0,0 +1,14 @@
+name: WarningRTS
+version: 1.0
+build-type: Simple
+cabal-version: >= 1.10
+
+test-suite foo
+    type: exitcode-stdio-1.0
+    main-is: Main.hs
+    build-depends: base
+    default-language: Haskell2010
+
+library
+    exposed-modules: Main
+    default-language: Haskell2010
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.out
new file mode 100644
index 000000000..ea47a5a51
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.out
@@ -0,0 +1,37 @@
+# cabal test
+Resolving dependencies...
+Warning: Some RTS options were found standalone, which affect cabal and not the binary. Please note that +RTS inside the --test-options argument suffices if your goal is to affect the tested binary. For example, use "cabal test --test-options='+RTS -N'" to pass the '-N' RTS option to your binary.
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - WarningRTS-1.0 (test:foo) (first run)
+Configuring test suite 'foo' for WarningRTS-1.0..
+Preprocessing test suite 'foo' for WarningRTS-1.0..
+Building test suite 'foo' for WarningRTS-1.0..
+Running 1 test suites...
+Test suite foo: RUNNING...
+Test suite foo: PASS
+Test suite logged to: <ROOT>/cabal.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/WarningRTS-1.0/t/foo/test/WarningRTS-1.0-foo.log
+1 of 1 test suites (1 of 1 test cases) passed.
+# cabal test
+Warning: Some RTS options were found standalone, which affect cabal and not the binary. Please note that +RTS inside the --test-options argument suffices if your goal is to affect the tested binary. For example, use "cabal test --test-options='+RTS -N'" to pass the '-N' RTS option to your binary.
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - WarningRTS-1.0 (test:foo) (first run)
+Preprocessing test suite 'foo' for WarningRTS-1.0..
+Building test suite 'foo' for WarningRTS-1.0..
+Running 1 test suites...
+Test suite foo: RUNNING...
+Test suite foo: PASS
+Test suite logged to: <ROOT>/cabal.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/WarningRTS-1.0/t/foo/test/WarningRTS-1.0-foo.log
+1 of 1 test suites (1 of 1 test cases) passed.
+# cabal test
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - WarningRTS-1.0 (test:foo) (first run)
+Preprocessing test suite 'foo' for WarningRTS-1.0..
+Building test suite 'foo' for WarningRTS-1.0..
+Running 1 test suites...
+Test suite foo: RUNNING...
+Test suite foo: PASS
+Test suite logged to: <ROOT>/cabal.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/WarningRTS-1.0/t/foo/test/WarningRTS-1.0-foo.log
+1 of 1 test suites (1 of 1 test cases) passed.
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.project
new file mode 100644
index 000000000..e6fdbadb4
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.project
@@ -0,0 +1 @@
+packages: .
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.test.hs
new file mode 100644
index 000000000..fd759b051
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewBuild/CmdTest/WarningRTS/cabal.test.hs
@@ -0,0 +1,11 @@
+import Test.Cabal.Prelude
+
+main = cabalTest $ do
+    res <- cabal' "test" ["foo", "+RTS"]
+    assertOutputContains "Some RTS options were found standalone" res
+
+    res <- cabal' "test" ["foo", "--test-options=\"+RTS\"", "+RTS"]
+    assertOutputContains "Some RTS options were found standalone" res
+
+    res <- cabal' "test" ["foo", "--test-options=\"+RTS\""]
+    assertOutputDoesNotContain "Some RTS options were found standalone" res
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/A/A.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/A/A.cabal
new file mode 100644
index 000000000..6808223d5
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/A/A.cabal
@@ -0,0 +1,10 @@
+cabal-version: 3.6
+name:          A
+synopsis:      A minimal test package for testing haddock.
+version:       0.0.0
+
+library
+  build-depends:    base
+  default-language: Haskell2010
+  exposed-modules:  A
+  hs-source-dirs:   .
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/A/A.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/A/A.hs
new file mode 100644
index 000000000..d34efe102
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/A/A.hs
@@ -0,0 +1,6 @@
+-- | A minimal test module for testing haddock.
+module A (a) where
+
+-- | a is zero.
+a :: Int
+a = 0
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.out
new file mode 100644
index 000000000..2e99c5226
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.out
@@ -0,0 +1,11 @@
+# cabal v2-update
+Downloading the latest package list from test-local-repo
+# cabal haddock
+Resolving dependencies...
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - A-0.0.0 (lib) (first run)
+Configuring library for A-0.0.0..
+Preprocessing library for A-0.0.0..
+Running Haddock on library for A-0.0.0..
+Documentation created: <ROOT>/docs/index.html
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.project
new file mode 100644
index 000000000..421457f94
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.project
@@ -0,0 +1 @@
+packages: A
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.test.hs
new file mode 100644
index 000000000..47e4c5c38
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/cabal.test.hs
@@ -0,0 +1,11 @@
+import Control.Monad.IO.Class (MonadIO (..))
+import System.Directory (removePathForcibly)
+import Test.Cabal.Prelude
+
+-- Test that `cabal haddock --haddock-output-dir` works from the command line.
+main = cabalTest . withRepo "repo" $ do
+  testDir <- testSourceDir <$> getTestEnv
+  let docsDir = testDir </> "docs"
+  liftIO (removePathForcibly docsDir)
+  r <- cabal' "haddock" ["--haddock-output-dir=docs", "A"]
+  assertFindInFile "A minimal test package for testing haddock." (docsDir </> "index.html")
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/repo/Dummy.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/repo/Dummy.hs
new file mode 100644
index 000000000..d76e30b2f
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputCmd/repo/Dummy.hs
@@ -0,0 +1 @@
+module Dummy () where
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/A/A.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/A/A.cabal
new file mode 100644
index 000000000..6808223d5
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/A/A.cabal
@@ -0,0 +1,10 @@
+cabal-version: 3.6
+name:          A
+synopsis:      A minimal test package for testing haddock.
+version:       0.0.0
+
+library
+  build-depends:    base
+  default-language: Haskell2010
+  exposed-modules:  A
+  hs-source-dirs:   .
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/A/A.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/A/A.hs
new file mode 100644
index 000000000..d34efe102
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/A/A.hs
@@ -0,0 +1,6 @@
+-- | A minimal test module for testing haddock.
+module A (a) where
+
+-- | a is zero.
+a :: Int
+a = 0
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.out b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.out
new file mode 100644
index 000000000..2e99c5226
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.out
@@ -0,0 +1,11 @@
+# cabal v2-update
+Downloading the latest package list from test-local-repo
+# cabal haddock
+Resolving dependencies...
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - A-0.0.0 (lib) (first run)
+Configuring library for A-0.0.0..
+Preprocessing library for A-0.0.0..
+Running Haddock on library for A-0.0.0..
+Documentation created: <ROOT>/docs/index.html
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.project
new file mode 100644
index 000000000..dfb26aa4d
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.project
@@ -0,0 +1,3 @@
+packages: A
+
+haddock-output-dir: docs
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.test.hs
new file mode 100644
index 000000000..cd57928ff
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/cabal.test.hs
@@ -0,0 +1,11 @@
+import Control.Monad.IO.Class (MonadIO (..))
+import System.Directory (removePathForcibly)
+import Test.Cabal.Prelude
+
+-- Test that `cabal haddock --haddock-output-dir` works from the config file.
+main = cabalTest . withRepo "repo" $ do
+  testDir <- testSourceDir <$> getTestEnv
+  let docsDir = testDir </> "docs"
+  liftIO (removePathForcibly docsDir)
+  r <- cabal' "haddock" ["A"]
+  assertFindInFile "A minimal test package for testing haddock." (docsDir </> "index.html")
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/repo/Dummy.hs b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/repo/Dummy.hs
new file mode 100644
index 000000000..d76e30b2f
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/NewHaddock/HaddockOutput/HaddockOutputConfig/repo/Dummy.hs
@@ -0,0 +1 @@
+module Dummy () where
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/Main.hs b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/Main.hs
new file mode 100644
index 000000000..657782b0c
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/Main.hs
@@ -0,0 +1,4 @@
+import P (p)
+
+main :: IO ()
+main = print p
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/cabal.repo.project b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/cabal.repo.project
new file mode 100644
index 000000000..4ef79b5fb
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/cabal.repo.project
@@ -0,0 +1 @@
+packages: ./main.cabal
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/main.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/main.cabal
new file mode 100644
index 000000000..deb274885
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/main.cabal
@@ -0,0 +1,19 @@
+cabal-version:      3.0
+name:               current
+version:            0.1.0.0
+license:            MIT
+author:             Colton Clemmer
+maintainer:         coltonclemmerdev@gmail.com
+-- copyright:
+build-type:         Simple
+extra-doc-files:    CHANGELOG.md
+-- extra-source-files:
+
+common warnings
+    ghc-options: -Wall
+
+executable current
+    import:           warnings
+    main-is:          Main.hs
+    build-depends:    base, remote
+    default-language: Haskell2010
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/offlineFlag.out b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/offlineFlag.out
new file mode 100644
index 000000000..893d127aa
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/offlineFlag.out
@@ -0,0 +1,23 @@
+# cabal v2-update
+Downloading the latest package list from test-local-repo
+# cabal v2-build
+Resolving dependencies...
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - remote-0.1.0.0 (lib) (requires build)
+ - current-0.1.0.0 (exe:current) (first run)
+Error: cabal: --offline was specified, hence refusing to download the package: remote version 0.1.0.0.
+# cabal v2-build
+Build profile: -w ghc-<GHCVER> -O1
+In order, the following will be built:
+ - remote-0.1.0.0 (lib) (requires build)
+ - current-0.1.0.0 (exe:current) (first run)
+Configuring library for remote-0.1.0.0..
+Preprocessing library for remote-0.1.0.0..
+Building library for remote-0.1.0.0..
+Installing library in <PATH>
+Configuring executable 'current' for current-0.1.0.0..
+Preprocessing executable 'current' for current-0.1.0.0..
+Building executable 'current' for current-0.1.0.0..
+# cabal v2-build
+Up to date
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/offlineFlag.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/offlineFlag.test.hs
new file mode 100644
index 000000000..38132f0c1
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/offlineFlag.test.hs
@@ -0,0 +1,11 @@
+import Test.Cabal.Prelude
+
+main = withShorterPathForNewBuildStore $ \storeDir ->
+  cabalTest $ do
+    skipUnlessGhcVersion ">= 8.1"
+    skipIfWindows
+    withProjectFile "cabal.repo.project" $ do
+      withRepo "repo" $ do
+        fails $ cabalG ["--store-dir=" ++ storeDir] "v2-build" ["current", "--offline"]
+        cabalG ["--store-dir=" ++ storeDir] "v2-build" ["current"]
+        cabalG ["--store-dir=" ++ storeDir] "v2-build" ["current", "--offline"]
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/repo/remote-0.1.0.0/P.hs b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/repo/remote-0.1.0.0/P.hs
new file mode 100644
index 000000000..36edaa089
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/repo/remote-0.1.0.0/P.hs
@@ -0,0 +1,3 @@
+module P (p) where
+
+p = "Foo"
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/repo/remote-0.1.0.0/remote.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/repo/remote-0.1.0.0/remote.cabal
new file mode 100644
index 000000000..9fd4646ad
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/OfflineFlag/repo/remote-0.1.0.0/remote.cabal
@@ -0,0 +1,13 @@
+cabal-version:      3.0
+name:               remote
+version:            0.1.0.0
+license:            MIT
+author:             Colton Clemmer
+maintainer:         coltonclemmerdev@gmail.com
+build-type:         Simple
+extra-doc-files:    CHANGELOG.md
+
+library
+  build-depends:       base
+  exposed-modules:     P
+  default-language:    Haskell2010
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/Outdated/outdated-project-file.out b/libraries/Cabal/cabal-testsuite/PackageTests/Outdated/outdated-project-file.out
index 8a0f972a3..e4830cef2 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/Outdated/outdated-project-file.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/Outdated/outdated-project-file.out
@@ -7,4 +7,4 @@ base ==3.0.3.2 (latest: 4.0.0.0)
 Outdated dependencies:
 base ==3.0.3.2 (latest: 4.0.0.0)
 # cabal outdated
-Error: cabal: --project-file must only be used with --v2-freeze-file.
+Error: cabal: --project-dir and --project-file must only be used with --v2-freeze-file.
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/app/App.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/app/App.hs
new file mode 100644
index 000000000..89ad4b3e0
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/app/App.hs
@@ -0,0 +1,4 @@
+module Main where
+
+main :: IO ()
+main = pure ()
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/app/app.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/app/app.cabal
new file mode 100644
index 000000000..d0be3363e
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/app/app.cabal
@@ -0,0 +1,7 @@
+cabal-version: 3.6
+name:          app
+version:       0.1
+
+executable app
+  main-is:       App.hs
+  build-depends: base
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/cabal.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/cabal.test.hs
new file mode 100644
index 000000000..5ac2fe9cc
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/cabal.test.hs
@@ -0,0 +1,23 @@
+import Test.Cabal.Prelude
+
+main :: IO ()
+main = cabalTest $ recordMode DoNotRecord $ do
+  env <- getTestEnv
+
+  let cwd = testCurrentDir env
+
+  -- Relative directory
+  cabal "v2-build" [ "--project-dir=proj", "all" ]
+
+  -- Absolute directory
+  cabal "v2-build" [ "--project-dir", (cwd </> "proj"), "all" ]
+
+  cabal "v2-clean" [ "--project-dir=proj" ]
+
+  withProjectFile "nix/cabal.project" $ do
+    cabal "v2-build" [ "--project-dir=proj", "extra" ]
+
+    cabal "v2-clean" [ "--project-dir=proj" ]
+
+  -- App with no cabal.project
+  void $ cabal_raw' [ "run", "--project-dir=app", "app" ] Nothing
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/App.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/App.hs
new file mode 100644
index 000000000..89ad4b3e0
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/App.hs
@@ -0,0 +1,4 @@
+module Main where
+
+main :: IO ()
+main = pure ()
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/Lib.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/Lib.hs
new file mode 100644
index 000000000..d3f160129
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/Lib.hs
@@ -0,0 +1,4 @@
+module Lib where
+
+x :: ()
+x = ()
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/cabal.project
new file mode 100644
index 000000000..b764c340a
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/cabal.project
@@ -0,0 +1,2 @@
+packages: .
+
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/nix/cabal.project b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/nix/cabal.project
new file mode 100644
index 000000000..60e863b1c
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/nix/cabal.project
@@ -0,0 +1,4 @@
+packages: .
+
+package proj
+  flags: +extra
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/proj.cabal b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/proj.cabal
new file mode 100644
index 000000000..be296dbc9
--- /dev/null
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ProjectDir/proj/proj.cabal
@@ -0,0 +1,17 @@
+cabal-version: 3.8
+name:          proj
+version:       0.1
+
+flag extra
+  default:     False
+  manual:      True
+
+library
+  build-depends:   base
+  exposed-modules: Lib
+
+executable extra
+  build-depends:   base
+  main-is:         App.hs
+  if !flag(extra)
+    buildable: False
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.exec-no-load.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.exec-no-load.out
index be864329e..ece53ac08 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.exec-no-load.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.exec-no-load.out
@@ -3,6 +3,6 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-no-load-0.1 (lib) (first run)
+ - cabal-repl-no-load-0.1 (interactive) (lib) (first run)
 Configuring library for cabal-repl-no-load-0.1..
 Preprocessing library for cabal-repl-no-load-0.1..
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.exec-normal.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.exec-normal.out
index 4c4a284cb..ec3ab736e 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.exec-normal.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.exec-normal.out
@@ -3,6 +3,6 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-no-load-0.1 (exe:exec) (first run)
+ - cabal-repl-no-load-0.1 (interactive) (exe:exec) (first run)
 Configuring executable 'exec' for cabal-repl-no-load-0.1..
 Preprocessing executable 'exec' for cabal-repl-no-load-0.1..
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.lib-no-load.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.lib-no-load.out
index be864329e..ece53ac08 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.lib-no-load.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.lib-no-load.out
@@ -3,6 +3,6 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-no-load-0.1 (lib) (first run)
+ - cabal-repl-no-load-0.1 (interactive) (lib) (first run)
 Configuring library for cabal-repl-no-load-0.1..
 Preprocessing library for cabal-repl-no-load-0.1..
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.lib-normal.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.lib-normal.out
index be864329e..ece53ac08 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.lib-normal.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplNoLoad/cabal.lib-normal.out
@@ -3,6 +3,6 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-no-load-0.1 (lib) (first run)
+ - cabal-repl-no-load-0.1 (interactive) (lib) (first run)
 Configuring library for cabal-repl-no-load-0.1..
 Preprocessing library for cabal-repl-no-load-0.1..
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.multiple-repl-options-multiple-flags.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.multiple-repl-options-multiple-flags.out
index d62961e60..c0f7b65db 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.multiple-repl-options-multiple-flags.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.multiple-repl-options-multiple-flags.out
@@ -3,7 +3,6 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-options-0.1 (lib) (first run)
+ - cabal-repl-options-0.1 (interactive) (lib) (first run)
 Configuring library for cabal-repl-options-0.1..
 Preprocessing library for cabal-repl-options-0.1..
-
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.multiple-repl-options.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.multiple-repl-options.out
index d62961e60..c0f7b65db 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.multiple-repl-options.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.multiple-repl-options.out
@@ -3,7 +3,6 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-options-0.1 (lib) (first run)
+ - cabal-repl-options-0.1 (interactive) (lib) (first run)
 Configuring library for cabal-repl-options-0.1..
 Preprocessing library for cabal-repl-options-0.1..
-
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options-multiple-flags-negative.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options-multiple-flags-negative.out
index dbe6d700d..f4e64481f 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options-multiple-flags-negative.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options-multiple-flags-negative.out
@@ -3,8 +3,7 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-options-0.1 (lib) (first run)
+ - cabal-repl-options-0.1 (interactive) (lib) (first run)
 Configuring library for cabal-repl-options-0.1..
 Preprocessing library for cabal-repl-options-0.1..
 Error: cabal: repl failed for cabal-repl-options-0.1-inplace.
-
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options-multiple-flags.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options-multiple-flags.out
index d62961e60..c0f7b65db 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options-multiple-flags.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options-multiple-flags.out
@@ -3,7 +3,6 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-options-0.1 (lib) (first run)
+ - cabal-repl-options-0.1 (interactive) (lib) (first run)
 Configuring library for cabal-repl-options-0.1..
 Preprocessing library for cabal-repl-options-0.1..
-
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options.out b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options.out
index d62961e60..c0f7b65db 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ReplOptions/cabal.single-repl-options.out
@@ -3,7 +3,6 @@
 Resolving dependencies...
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
- - cabal-repl-options-0.1 (lib) (first run)
+ - cabal-repl-options-0.1 (interactive) (lib) (first run)
 Configuring library for cabal-repl-options-0.1..
 Preprocessing library for cabal-repl-options-0.1..
-
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ShowBuildInfo/Complex/single.out b/libraries/Cabal/cabal-testsuite/PackageTests/ShowBuildInfo/Complex/single.out
index 67e8a8553..adb079d20 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ShowBuildInfo/Complex/single.out
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ShowBuildInfo/Complex/single.out
@@ -15,11 +15,11 @@ Warning: 'hs-source-dirs: doesnt-exist' specifies a directory which does not exi
 Preprocessing executable 'Complex' for Complex-0.1.0.0..
 Building executable 'Complex' for Complex-0.1.0.0..
 # show-build-info Complex exe:Complex
-{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"exe","name":"exe:Complex","unit-id":"Complex-0.1.0.0-inplace-Complex","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-i","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-iapp","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/Complex/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/Complex/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/Complex/autogen/cabal_macros.h","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-XHaskell2010","-threaded","-rtsopts","-with-rtsopts=-N -T","-Wredundant-constraints"],"modules":["Other","Paths_Complex"],"src-files":["Main.lhs"],"hs-src-dirs":["app"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
+{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"exe","name":"exe:Complex","unit-id":"Complex-0.1.0.0-inplace-Complex","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-i","-iapp","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/Complex/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/Complex/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/x/Complex/build/Complex/autogen/cabal_macros.h","-this-unit-id","Complex-0.1.0.0-inplace-Complex","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-XHaskell2010","-threaded","-rtsopts","-with-rtsopts=-N -T","-Wredundant-constraints"],"modules":["Other","Paths_Complex"],"src-files":["Main.lhs"],"hs-src-dirs":["app"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
 # cabal build
 Up to date
 # show-build-info Complex lib
-{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"lib","name":"lib","unit-id":"Complex-0.1.0.0-inplace","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-i","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-isrc","-idoesnt-exist","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/autogen/cabal_macros.h","-this-unit-id","Complex-0.1.0.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-XHaskell2010","-Wall"],"modules":["A","B","C","D","Paths_Complex"],"src-files":[],"hs-src-dirs":["src","doesnt-exist"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
+{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"lib","name":"lib","unit-id":"Complex-0.1.0.0-inplace","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-i","-isrc","-idoesnt-exist","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/build/autogen/cabal_macros.h","-this-unit-id","Complex-0.1.0.0-inplace","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-XHaskell2010","-Wall"],"modules":["A","B","C","D","Paths_Complex"],"src-files":[],"hs-src-dirs":["src","doesnt-exist"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
 # cabal build
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
@@ -34,7 +34,7 @@ Warning: 'hs-source-dirs: doesnt-exist' specifies a directory which does not exi
 Preprocessing benchmark 'complex-benchmarks' for Complex-0.1.0.0..
 Building benchmark 'complex-benchmarks' for Complex-0.1.0.0..
 # show-build-info Complex bench:complex-benchmarks
-{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"bench","name":"bench:complex-benchmarks","unit-id":"Complex-0.1.0.0-inplace-complex-benchmarks","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-i","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-ibenchmark","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/complex-benchmarks/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/complex-benchmarks/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/complex-benchmarks/autogen/cabal_macros.h","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-XHaskell2010","-Wall","-rtsopts","-threaded","-with-rtsopts=-N"],"modules":["Paths_Complex"],"src-files":["Main.hs"],"hs-src-dirs":["benchmark"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
+{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"bench","name":"bench:complex-benchmarks","unit-id":"Complex-0.1.0.0-inplace-complex-benchmarks","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-i","-ibenchmark","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/complex-benchmarks/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/complex-benchmarks/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/b/complex-benchmarks/build/complex-benchmarks/autogen/cabal_macros.h","-this-unit-id","Complex-0.1.0.0-inplace-complex-benchmarks","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-XHaskell2010","-Wall","-rtsopts","-threaded","-with-rtsopts=-N"],"modules":["Paths_Complex"],"src-files":["Main.hs"],"hs-src-dirs":["benchmark"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
 # cabal build
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
@@ -49,7 +49,7 @@ Warning: 'hs-source-dirs: doesnt-exist' specifies a directory which does not exi
 Preprocessing test suite 'func-test' for Complex-0.1.0.0..
 Building test suite 'func-test' for Complex-0.1.0.0..
 # show-build-info Complex test:func-test
-{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"test","name":"test:func-test","unit-id":"Complex-0.1.0.0-inplace-func-test","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-i","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-itest","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/func-test/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/func-test/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/func-test/autogen/cabal_macros.h","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-XHaskell2010"],"modules":[],"src-files":["FuncMain.hs"],"hs-src-dirs":["test"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
+{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"test","name":"test:func-test","unit-id":"Complex-0.1.0.0-inplace-func-test","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-i","-itest","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/func-test/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/func-test/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/func-test/build/func-test/autogen/cabal_macros.h","-this-unit-id","Complex-0.1.0.0-inplace-func-test","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-XHaskell2010"],"modules":[],"src-files":["FuncMain.hs"],"hs-src-dirs":["test"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
 # cabal build
 Build profile: -w ghc-<GHCVER> -O1
 In order, the following will be built:
@@ -64,4 +64,4 @@ Warning: 'hs-source-dirs: doesnt-exist' specifies a directory which does not exi
 Preprocessing test suite 'unit-test' for Complex-0.1.0.0..
 Building test suite 'unit-test' for Complex-0.1.0.0..
 # show-build-info Complex test:unit-test
-{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"test","name":"test:unit-test","unit-id":"Complex-0.1.0.0-inplace-unit-test","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-i","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-itest","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/unit-test/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/unit-test/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/unit-test/autogen/cabal_macros.h","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-XHaskell2010"],"modules":[],"src-files":["UnitMain.hs"],"hs-src-dirs":["test"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
+{"cabal-lib-version":"<CABALVER>","compiler":{"flavour":"ghc","compiler-id":"ghc-<GHCVER>","path":"<GHCPATH>"},"components":[{"type":"test","name":"test:unit-test","unit-id":"Complex-0.1.0.0-inplace-unit-test","compiler-args":["-fbuilding-cabal-package","-O","-outputdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-odir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-hidir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-stubdir","<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-i","-itest","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/unit-test/autogen","-i<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/unit-test/autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/global-autogen","-I<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build","-optP-include","-optP<ROOT>/single.dist/work/./dist/build/<ARCH>/ghc-<GHCVER>/Complex-0.1.0.0/t/unit-test/build/unit-test/autogen/cabal_macros.h","-this-unit-id","Complex-0.1.0.0-inplace-unit-test","-hide-all-packages","-Wmissing-home-modules","-no-user-package-db","-package-db","<ROOT>/single.dist/home/.cabal/store/ghc-<GHCVER>/package.db","-package-db","<ROOT>/single.dist/work/./dist/packagedb/ghc-<GHCVER>","-package-id","<PACKAGEDEP>","-package-id","<PACKAGEDEP>","-XHaskell2010"],"modules":[],"src-files":["UnitMain.hs"],"hs-src-dirs":["test"],"src-dir":"<ROOT>/","cabal-file":"./Complex.cabal"}]}
diff --git a/libraries/Cabal/cabal-testsuite/PackageTests/ShowBuildInfo/Complex/single.test.hs b/libraries/Cabal/cabal-testsuite/PackageTests/ShowBuildInfo/Complex/single.test.hs
index 5b083d69c..b4bdc16f0 100644
--- a/libraries/Cabal/cabal-testsuite/PackageTests/ShowBuildInfo/Complex/single.test.hs
+++ b/libraries/Cabal/cabal-testsuite/PackageTests/ShowBuildInfo/Complex/single.test.hs
@@ -2,40 +2,43 @@
 import           Test.Cabal.Prelude
 import           Test.Cabal.DecodeShowBuildInfo
 
-main = cabalTest $ withRepo "repo" $ do
-  runShowBuildInfo ["exe:Complex"] >> withPlan (do
-    recordBuildInfo "Complex" (exe "Complex")
-    assertComponent "Complex" (exe "Complex") defCompAssertion
-      { modules = ["Other", "Paths_Complex"]
-      , sourceFiles = ["Main.lhs"]
-      , sourceDirs = ["app"]
-      })
+main = cabalTest $ do
+  -- the With GHC-9.2+ output contains -this-unit-id
+  skipUnlessGhcVersion ">= 9.2"
+  withRepo "repo" $ do
+    runShowBuildInfo ["exe:Complex"] >> withPlan (do
+      recordBuildInfo "Complex" (exe "Complex")
+      assertComponent "Complex" (exe "Complex") defCompAssertion
+        { modules = ["Other", "Paths_Complex"]
+        , sourceFiles = ["Main.lhs"]
+        , sourceDirs = ["app"]
+        })
 
-  runShowBuildInfo ["lib:Complex"] >> withPlan (do
-    recordBuildInfo "Complex" mainLib
-    assertComponent "Complex" mainLib defCompAssertion
-      { modules = ["A", "B", "C", "D", "Paths_Complex"]
-      , sourceDirs = ["src", "doesnt-exist"]
-      })
+    runShowBuildInfo ["lib:Complex"] >> withPlan (do
+      recordBuildInfo "Complex" mainLib
+      assertComponent "Complex" mainLib defCompAssertion
+        { modules = ["A", "B", "C", "D", "Paths_Complex"]
+        , sourceDirs = ["src", "doesnt-exist"]
+        })
 
-  runShowBuildInfo ["benchmark:complex-benchmarks"] >> withPlan (do
-    recordBuildInfo "Complex" (bench "complex-benchmarks")
-    assertComponent "Complex" (bench "complex-benchmarks") defCompAssertion
-      { modules = ["Paths_Complex"]
-      , sourceFiles = ["Main.hs"]
-      , sourceDirs = ["benchmark"]
-      })
+    runShowBuildInfo ["benchmark:complex-benchmarks"] >> withPlan (do
+      recordBuildInfo "Complex" (bench "complex-benchmarks")
+      assertComponent "Complex" (bench "complex-benchmarks") defCompAssertion
+        { modules = ["Paths_Complex"]
+        , sourceFiles = ["Main.hs"]
+        , sourceDirs = ["benchmark"]
+        })
 
-  runShowBuildInfo ["test:func-test"] >> withPlan (do
-    recordBuildInfo "Complex" (test "func-test")
-    assertComponent "Complex" (test "func-test") defCompAssertion
-      { sourceFiles = ["FuncMain.hs"]
-      , sourceDirs = ["test"]
-      })
+    runShowBuildInfo ["test:func-test"] >> withPlan (do
+      recordBuildInfo "Complex" (test "func-test")
+      assertComponent "Complex" (test "func-test") defCompAssertion
+        { sourceFiles = ["FuncMain.hs"]
+        , sourceDirs = ["test"]
+        })
 
-  runShowBuildInfo ["test:unit-test"] >> withPlan (do
-    recordBuildInfo "Complex" (test "unit-test")
-    assertComponent "Complex" (test "unit-test") defCompAssertion
-      { sourceFiles = ["UnitMain.hs"]
-      , sourceDirs = ["test"]
-      })
+    runShowBuildInfo ["test:unit-test"] >> withPlan (do
+      recordBuildInfo "Complex" (test "unit-test")
+      assertComponent "Complex" (test "unit-test") defCompAssertion
+        { sourceFiles = ["UnitMain.hs"]
+        , sourceDirs = ["test"]
+        })
diff --git a/libraries/Cabal/cabal-testsuite/cabal-testsuite.cabal b/libraries/Cabal/cabal-testsuite/cabal-testsuite.cabal
index e3ba1da7c..204859e50 100644
--- a/libraries/Cabal/cabal-testsuite/cabal-testsuite.cabal
+++ b/libraries/Cabal/cabal-testsuite/cabal-testsuite.cabal
@@ -26,10 +26,10 @@ common shared
   default-language: Haskell2010
 
   build-depends:
-    , base >= 4.9 && <4.18
+    , base >= 4.9 && <4.19
     -- this needs to match the in-tree lib:Cabal version
-    , Cabal ^>= 3.10.0.0
-    , Cabal-syntax ^>= 3.10.0.0
+    , Cabal ^>= 3.11.0.0
+    , Cabal-syntax ^>= 3.11.0.0
 
   ghc-options: -Wall -fwarn-tabs -fwarn-incomplete-uni-patterns
 
@@ -80,7 +80,7 @@ library
 
   if !os(windows)
     build-depends:
-      , unix                ^>= 2.6.0.0 || ^>= 2.7.0.0
+      , unix                ^>= 2.6.0.0 || ^>= 2.7.0.0 || ^>= 2.8.0.0
   else
     build-depends:
       , Win32
@@ -115,6 +115,6 @@ custom-setup
   -- and due to Custom complexity and ConstraintSetupCabalMaxVersion
   -- it has to be the latest release version plus
   -- you have to use the latest cabal-install release
-  setup-depends: Cabal == 3.8.*,
-                 Cabal-syntax == 3.8.*,
+  setup-depends: Cabal == 3.10.*,
+                 Cabal-syntax == 3.10.*,
                  base, filepath, directory
diff --git a/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Monad.hs b/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Monad.hs
index 078351723..93207511e 100644
--- a/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Monad.hs
+++ b/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Monad.hs
@@ -336,7 +336,6 @@ runTestM mode m = withSystemTempDirectory "cabal-testsuite" $ \tmp_dir -> do
                     testPlan = Nothing,
                     testRecordDefaultMode = DoNotRecord,
                     testRecordUserMode = Nothing,
-                    testRecordNormalizer = id,
                     testSourceCopyRelativeDir = "source"
                 }
     let go = do cleanup
@@ -527,12 +526,11 @@ data TestEnv = TestEnv
     , testRecordDefaultMode :: RecordMode
     -- | User explicitly set record mode.  Not implemented ATM.
     , testRecordUserMode :: Maybe RecordMode
-    -- | Function to normalize recorded output
-    , testRecordNormalizer :: String -> String
     -- | Name of the subdirectory we copied the test's sources to,
     -- relative to 'testSourceDir'
     , testSourceCopyRelativeDir :: FilePath
     }
+    deriving Show
 
 testRecordMode :: TestEnv -> RecordMode
 testRecordMode env = fromMaybe (testRecordDefaultMode env) (testRecordUserMode env)
diff --git a/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Plan.hs b/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Plan.hs
index 0665de9a9..274f11f83 100644
--- a/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Plan.hs
+++ b/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Plan.hs
@@ -19,11 +19,13 @@ import Control.Monad
 
 -- TODO: index this
 data Plan = Plan { planInstallPlan :: [InstallItem] }
+  deriving Show
 
 data InstallItem
     = APreExisting
     | AConfiguredGlobal ConfiguredGlobal
     | AConfiguredInplace ConfiguredInplace
+  deriving Show
 
 -- local or inplace package
 data ConfiguredInplace = ConfiguredInplace
@@ -31,11 +33,13 @@ data ConfiguredInplace = ConfiguredInplace
     , configuredInplaceBuildInfo     :: Maybe FilePath
     , configuredInplacePackageName   :: PackageName
     , configuredInplaceComponentName :: Maybe ComponentName }
+  deriving Show
 
 data ConfiguredGlobal = ConfiguredGlobal
     { configuredGlobalBinFile       :: Maybe FilePath
     , configuredGlobalPackageName   :: PackageName
     , configuredGlobalComponentName :: Maybe ComponentName }
+  deriving Show
 
 instance FromJSON Plan where
     parseJSON (Object v) = fmap Plan (v .: "install-plan")
diff --git a/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Prelude.hs b/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Prelude.hs
index 4ad7b68d1..10a3ac287 100644
--- a/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Prelude.hs
+++ b/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Prelude.hs
@@ -679,7 +679,7 @@ recordHeader args = do
     env <- getTestEnv
     let mode = testRecordMode env
         str_header = "# " ++ intercalate " " args ++ "\n"
-        header = C.pack (testRecordNormalizer env str_header)
+        header = C.pack str_header
     case mode of
         DoNotRecord -> return ()
         _ -> do
@@ -696,7 +696,7 @@ recordLog res = do
     liftIO $ C.appendFile (testWorkDir env </> "test.log")
                          (C.pack $ "+ " ++ resultCommand res ++ "\n"
                             ++ resultOutput res ++ "\n\n")
-    liftIO . C.appendFile (testActualFile env) . C.pack . testRecordNormalizer env $
+    liftIO . C.appendFile (testActualFile env) . C.pack $
         case mode of
             RecordAll    -> unlines (lines (resultOutput res))
             RecordMarked -> getMarkedOutput (resultOutput res)
@@ -787,10 +787,6 @@ recordMode mode = withReaderT (\env -> env {
     testRecordUserMode = Just mode
     })
 
-recordNormalizer :: (String -> String) -> TestM a -> TestM a
-recordNormalizer f =
-    withReaderT (\env -> env { testRecordNormalizer = testRecordNormalizer env . f })
-
 assertOutputContains :: MonadIO m => WithCallStack (String -> Result -> m ())
 assertOutputContains needle result =
     withFrozenCallStack $
diff --git a/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Script.hs b/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Script.hs
index d509e6efe..a7ce082a9 100644
--- a/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Script.hs
+++ b/libraries/Cabal/cabal-testsuite/src/Test/Cabal/Script.hs
@@ -37,6 +37,7 @@ data ScriptEnv = ScriptEnv
         , runnerPackages        :: [(OpenUnitId, ModuleRenaming)]
         , runnerWithSharedLib   :: Bool
         }
+    deriving Show
 
 {-
 
diff --git a/libraries/Cabal/changelog.d/issue-8206 b/libraries/Cabal/changelog.d/issue-8206
new file mode 100644
index 000000000..09292fd94
--- /dev/null
+++ b/libraries/Cabal/changelog.d/issue-8206
@@ -0,0 +1,4 @@
+synopsis: cabal init now generates cabal versions older than 1.12 with the correct >= syntax
+packages: cabal-install
+prs: #8860
+issues: #8206
diff --git a/libraries/Cabal/changelog.d/issue-8270 b/libraries/Cabal/changelog.d/issue-8270
new file mode 100644
index 000000000..b26eec51d
--- /dev/null
+++ b/libraries/Cabal/changelog.d/issue-8270
@@ -0,0 +1,11 @@
+synopsis: Add `--haddock-output-dir` flag to `cabal haddock`.
+packages: Cabal cabal-install
+prs: #8788
+issues: #8720
+significance: significant
+
+description: {
+
+- Added `--haddock-output-dir` flag to `cabal haddock`. This flag gives the user full control over the directory where the documentation is placed. It allows both relative and absolute paths.
+
+}
diff --git a/libraries/Cabal/changelog.d/issue-8680 b/libraries/Cabal/changelog.d/issue-8680
new file mode 100644
index 000000000..3c3604b2c
--- /dev/null
+++ b/libraries/Cabal/changelog.d/issue-8680
@@ -0,0 +1,9 @@
+synopsis: `cabal init` should not suggest Cabal < 2.0
+packages: Cabal
+issues: #8680
+
+description: {
+
+'cabal init' no longer suggests users to set cabal-version to less than 2.0
+
+}
diff --git a/libraries/Cabal/changelog.d/issue-8689 b/libraries/Cabal/changelog.d/issue-8689
new file mode 100644
index 000000000..c157bb9ec
--- /dev/null
+++ b/libraries/Cabal/changelog.d/issue-8689
@@ -0,0 +1,12 @@
+synopsis: Make sure Haskell files in explicit source directories take precedence over autogenerated Haskell files
+packages: cabal-install
+prs: #8690
+issues: #8689
+
+description: {
+
+- Changed order or directories in GHC invocation so that source
+  directories explicitly specified in cabal file will be considered
+  before Cabal’s internal build directory.
+
+}
diff --git a/libraries/Cabal/changelog.d/issue-8737 b/libraries/Cabal/changelog.d/issue-8737
new file mode 100644
index 000000000..3bdabc28e
--- /dev/null
+++ b/libraries/Cabal/changelog.d/issue-8737
@@ -0,0 +1,4 @@
+synopsis: Document `remote-repo-cache` as implemented.
+packages: Cabal
+issues: #8737
+prs: #8738
diff --git a/libraries/Cabal/changelog.d/issue-8757 b/libraries/Cabal/changelog.d/issue-8757
new file mode 100644
index 000000000..82a71c0f9
--- /dev/null
+++ b/libraries/Cabal/changelog.d/issue-8757
@@ -0,0 +1,4 @@
+synopsis: `cabal init`: suggest BSD-3 as default license
+packages: cabal-install
+prs: #8764
+issues: #8757
diff --git a/libraries/Cabal/changelog.d/issue-8835 b/libraries/Cabal/changelog.d/issue-8835
new file mode 100644
index 000000000..587d4e349
--- /dev/null
+++ b/libraries/Cabal/changelog.d/issue-8835
@@ -0,0 +1,6 @@
+synopsis: config file: allow more flags in the init section
+packages: cabal-install
+prs: #8839
+issues: #8835
+description: The init section of config file now allows the following fields:
+`no-comments`, `quiet`, `simple` and `minimal`
diff --git a/libraries/Cabal/changelog.d/issue-8892 b/libraries/Cabal/changelog.d/issue-8892
new file mode 100644
index 000000000..4e08b8649
--- /dev/null
+++ b/libraries/Cabal/changelog.d/issue-8892
@@ -0,0 +1,11 @@
+synopsis: Regenerate Lexer.hs to avoid out-of-bound array access due to a bug in Alex
+packages: Cabal-syntax
+prs: #8896
+issues: #8892
+
+description: {
+
+- Regenerate Cabal-syntax's Lexer.hs with Alex 3.2.7.3 which includes a fix for
+  an out-of-bound array access (only noticeable with GHC's JavaScript backend).
+
+}
diff --git a/libraries/Cabal/changelog.d/pr-8130 b/libraries/Cabal/changelog.d/pr-8130
new file mode 100644
index 000000000..70acb4eb5
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8130
@@ -0,0 +1,13 @@
+synopsis: Split up `Distribution.Simple.Setup`
+packages: Cabal
+prs: #8130
+
+description: {
+
+The external interface of 'Distribution.Simple.Setup' has been kept the same, but internally it has been broken up into smaller modules.
+This improves build times in two ways:
+1. GHC is superlinear in the size of files, meaning that splitting up a large file can reduce overall compile times.
+2. Breaking up the module allows dependent modules to refine their imports to just the parts they require, allowing them to start buildling quicker
+when GHC is run in parrallel make mode ('--ghc-options -j').
+
+}
diff --git a/libraries/Cabal/changelog.d/pr-8454 b/libraries/Cabal/changelog.d/pr-8454
new file mode 100644
index 000000000..915caf61c
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8454
@@ -0,0 +1,12 @@
+synopsis: Add --project-dir flag
+packages: cabal-install
+prs: #8454
+issues: #7695 #7940
+significance: significant
+
+description: {
+
+- Added --project-dir flag for specifying the project's root directory
+- Deprecated using --project-file with an absolute filepath without also using --project-dir
+
+}
diff --git a/libraries/Cabal/changelog.d/pr-8662 b/libraries/Cabal/changelog.d/pr-8662
new file mode 100644
index 000000000..bfe0512c6
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8662
@@ -0,0 +1,9 @@
+synopsis: Installation of extra-compilation-artifacts directory
+packages: Cabal
+prs: #8662
+issues:
+description: {
+
+- GHC plugins now can store custom data in the 'extra-compilation-artifacts' directory which gets installed with the package.
+
+}
diff --git a/libraries/Cabal/changelog.d/pr-8676 b/libraries/Cabal/changelog.d/pr-8676
new file mode 100644
index 000000000..511a04569
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8676
@@ -0,0 +1,8 @@
+synopsis: Adds functionality for the --offline flag with the "build" command.
+packages: cabal-install
+prs: #8676
+
+description: {
+    The --offline flag previously created in #2578 but was only implemented for the install command even thought the flag didn't throw an error whenever the build command was run. This PR adds functionality for the --offline flag with the build command.
+Additionally there is a new PackageTest for the flag using the build command.
+}
diff --git a/libraries/Cabal/changelog.d/pr-8709 b/libraries/Cabal/changelog.d/pr-8709
new file mode 100644
index 000000000..f8f31edc2
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8709
@@ -0,0 +1,11 @@
+synopsis: Add warning for running cabal run, cabal test and cabal bench with +RTS flag
+packages: cabal-install
+prs: #8709
+
+description: {
+
+This adds a warning when RTS options are passed to cabal instead of the binary 
+for the commands 'run', 'bench' and 'test', as most users want to pass these 
+options to their binary.
+
+}
diff --git a/libraries/Cabal/changelog.d/pr-8726 b/libraries/Cabal/changelog.d/pr-8726
new file mode 100644
index 000000000..fa9975a33
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8726
@@ -0,0 +1,18 @@
+synopsis: Add support for loading multiple components into one repl session
+packages: cabal-install
+prs: #8726 #8238 #8491
+
+description: {
+
+The `repl` command is extended in order to allow starting a repl session with
+multiple local components. When a user specifies a target to the "repl" command
+which resolves to multiple local components then `cabal` will start a repl session
+which loads them all into a single GHC session if the multi-repl is enabled.
+
+The multi-repl can be enabled by passing `--enable-multi-repl`, or writing `multi-repl: True` in
+your cabal.project file.
+
+The feature is fully explained in [this blog post](https://well-typed.com/blog/2023/03/cabal-multi-unit/).
+
+
+}
diff --git a/libraries/Cabal/changelog.d/pr-8726-2 b/libraries/Cabal/changelog.d/pr-8726-2
new file mode 100644
index 000000000..d59a8ac4d
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8726-2
@@ -0,0 +1,24 @@
+synopsis: Add --promised-dependency flag to ./Setup configure interface
+packages: Cabal
+prs: #8726
+
+description: {
+
+There is a new flag `--promised-dependency`  to allow users to
+configure a package *without* having previously built the dependency.
+Instead, we promise to the configure phase that we will have built it
+by the time we build the package. This allows us to configure all the
+packages we intend to load into the repl without building any
+dependenices which we will load in the same session, because the
+promise is satisifed due to loading the package and it's dependency
+into one multi-session which ensures the dependency is built before
+it is needed.
+
+A user of ./Setup configure specifies a promised dependency by
+using the "--promised-dependency" flag with a normal dependency specification. For example:
+
+```
+   '--promised-dependency=cabal-install-solver=cabal-install-solver-3.9.0.0-inplace'
+```
+
+}
diff --git a/libraries/Cabal/changelog.d/pr-8726-3 b/libraries/Cabal/changelog.d/pr-8726-3
new file mode 100644
index 000000000..337ad2990
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8726-3
@@ -0,0 +1,16 @@
+synopsis: Add option to ./Setup repl to write repl arguments to file
+packages: Cabal
+prs: #8726
+
+description: {
+
+The `./Setup repl` command is modified to allow a user to defer
+starting the repl and instead instruct the command to write the
+necessary build flags to a directiory. The option is called
+`--repl-multi-file <DIR>`.
+
+This is useful when starting multi-component sessions as we want to query Setup.hs
+for the arguments which are needed to build each component but not for ./Setup to
+start the repl itself.
+
+}
diff --git a/libraries/Cabal/changelog.d/pr-8897 b/libraries/Cabal/changelog.d/pr-8897
new file mode 100644
index 000000000..a89023dc4
--- /dev/null
+++ b/libraries/Cabal/changelog.d/pr-8897
@@ -0,0 +1,14 @@
+synopsis: Make check comply with Hackage requirements
+packages: Cabal cabal-install
+prs: #8897
+
+description: {
+
+- `cabal check` will only return exitcode 1 when the package is not fit
+  for Hackage. E.g. it will not error anymore when your `synopsis:` is
+  larger than `description:`, just emit a warning.
+- Cabal: Distribution.Client.Check now exports `isHackageDistError`, for
+  third-party tools to know if a specific error will preclude a package
+  from being uploaded to Hacakge.
+
+}
diff --git a/libraries/Cabal/doc/cabal-commands.rst b/libraries/Cabal/doc/cabal-commands.rst
index 0ea968b0f..ebd424205 100644
--- a/libraries/Cabal/doc/cabal-commands.rst
+++ b/libraries/Cabal/doc/cabal-commands.rst
@@ -791,51 +791,71 @@ it may invoke the configuration step (see ``cabal configure``).
 cabal repl
 ^^^^^^^^^^
 
-``cabal repl TARGET`` loads all of the modules of the target into
-GHCi as interpreted bytecode. In addition to ``cabal build``'s flags,
-it additionally takes the ``--repl-options`` and ``--repl-no-load`` flags.
+``cabal repl TARGET [FLAGS]``
+opens an interactive session for the target component within the project and
+loads all of the modules of the target into GHCi as interpreted bytecode.
+The available targets are the same as for the ``build`` command: individual components
+within packages in the project, including libraries, executables, test-suites
+and benchmarks (see `the build section <#cabal-build>`__ for the target syntax).
+Local packages can also be specified, in which case the library
+component in the package will be used, or the (first listed) executable in the
+package if there is no library. Dependencies are built or rebuilt as necessary.
+
+Examples:
 
-To avoid ``ghci`` specific flags from triggering unneeded global rebuilds these
-flags are now stripped from the internal configuration. As a result
-``--ghc-options`` will no longer (reliably) work to pass flags to ``ghci`` (or
-other repls). Instead, you should use the new ``--repl-options`` flag to
-specify these options to the invoked repl. (This flag also works on ``cabal
-repl`` and ``Setup repl`` on sufficiently new versions of Cabal.)
+::
 
-The ``repl-no-load`` flag disables the loading of target modules at startup.
+    $ cabal repl                # default component in the package in the current directory
+    $ cabal repl pkgname        # default component in the package named 'pkgname'
+    $ cabal repl ./pkgfoo       # default component in the package in the ./pkgfoo directory
+    $ cabal repl cname          # component named 'cname'
+    $ cabal repl pkgname:cname  # component 'cname' in the package 'pkgname'
 
-Currently, it is not supported to pass multiple targets to ``repl``
-(``repl`` will just successively open a separate GHCi session for
-each target.)
+Configuration flags can be specified on the command line and these extend the project
+configuration from the 'cabal.project', 'cabal.project.local' and other files.
 
-It also provides a way to experiment with libraries without needing to download
-them manually or to install them globally.
+.. option:: --repl-options
 
-This command opens a REPL with the current default target loaded, and a version
-of the ``vector`` package matching that specification exposed.
+    To avoid ``ghci``-specific flags from triggering unneeded global rebuilds, these
+    flags are stripped from the internal configuration. As a result,
+    ``--ghc-options`` will no longer (reliably) work to pass flags to ``ghci`` (or
+    other REPLs). Instead, you should use the ``--repl-options`` flag to
+    specify these options to the invoked REPL.
 
-::
+.. option:: --repl-no-load
 
-    $ cabal repl --build-depends "vector >= 0.12 && < 0.13"
+    Disables the loading of target modules at startup.
 
-Both of these commands do the same thing as the above, but only exposes ``base``,
-``vector``, and the ``vector`` package's transitive dependencies even if the user
-is in a project context.
+.. option:: -b, --build-depends
 
-::
+    A way to experiment with libraries without needing to download
+    them manually or to install them globally.
 
-    $ cabal repl --ignore-project --build-depends "vector >= 0.12 && < 0.13"
-    $ cabal repl --project='' --build-depends "vector >= 0.12 && < 0.13"
+    This command opens a REPL with the current default target loaded, and a version
+    of the ``vector`` package matching that specification exposed.
 
-This command would add ``vector``, but not (for example) ``primitive``, because
-it only includes the packages specified on the command line (and ``base``, which
-cannot be excluded for technical reasons).
+    ::
 
-::
+        $ cabal repl --build-depends "vector >= 0.12 && < 0.13"
 
-    $ cabal repl --build-depends vector --no-transitive-deps
+    Both of these commands do the same thing as the above, but only expose ``base``,
+    ``vector``, and the ``vector`` package's transitive dependencies even if the user
+    is in a project context.
 
-``repl`` can open scripts by passing the path to the script as the target.
+    ::
+
+        $ cabal repl --ignore-project --build-depends "vector >= 0.12 && < 0.13"
+        $ cabal repl --project='' --build-depends "vector >= 0.12 && < 0.13"
+
+    This command would add ``vector``, but not (for example) ``primitive``, because
+    it only includes the packages specified on the command line (and ``base``, which
+    cannot be excluded for technical reasons).
+
+    ::
+
+        $ cabal repl --build-depends vector --no-transitive-deps
+
+``cabal repl`` can open scripts by passing the path to the script as the target.
 
 ::
 
@@ -845,6 +865,19 @@ The configuration information for the script is cached under the cabal directory
 and can be pre-built with ``cabal build path/to/script``.
 See ``cabal run`` for more information on scripts.
 
+.. option:: --enable-multi-repl
+
+    Allow starting GHCi with multiple targets.
+    This requires GHC with multiple home unit support (GHC-9.4+)
+
+    The closure of required components will be loaded.
+
+.. option:: --disable-multi-repl
+
+    Disallow starting GHCi with multiple targets. This reverts back to the behaviour
+    in version 3.10 and earlier where only a single component can be loaded at
+    once.
+
 .. _cabal run:
 
 cabal run
@@ -977,7 +1010,8 @@ Run ``cabal check`` in the folder where your ``.cabal`` package file is.
     Set verbosity level (0–3, default is 1).
 
 ``cabal check`` mimics Hackage's requirements: if no error or warning
-is reported, Hackage should accept your package.
+is reported, Hackage should accept your package. If errors are present
+``cabal check`` exits with ``1`` and Hackage will refuse the package.
 
 cabal sdist
 ^^^^^^^^^^^
diff --git a/libraries/Cabal/doc/cabal-project.rst b/libraries/Cabal/doc/cabal-project.rst
index 2e47dfdc5..86d4263cf 100644
--- a/libraries/Cabal/doc/cabal-project.rst
+++ b/libraries/Cabal/doc/cabal-project.rst
@@ -290,10 +290,21 @@ package, and thus apply globally:
 
     This option cannot be specified via a ``cabal.project`` file.
 
+.. _cmdoption-project-dir:
+.. option:: --project-dir=DIR
+
+    Specifies the path of the project directory. If a relative
+    :ref:`project-file<cmdoption-project-file>` path is also specified,
+    it will be resolved relative to this directory.
+
+    The project directory need not contain a ``cabal.project`` file.
+
+    This option cannot be specified via a ``cabal.project`` file.
+
 .. _cmdoption-project-file:
 .. option:: --project-file=FILE
 
-    Specifies the name of the project file used to specify the
+    Specifies the path and name of the project file used to specify the
     rest of the top-level configuration; defaults to ``cabal.project``.
     This name not only specifies the name of the main project file,
     but also the auxiliary project files ``cabal.project.freeze``
@@ -301,7 +312,8 @@ package, and thus apply globally:
     ``--project-file=my.project``, then the other files that will
     be probed are ``my.project.freeze`` and ``my.project.local``.
 
-    If the specified project file is a relative path, we will
+    If :ref:`project-dir<cmdoption-project-dir>` is not specified,
+    and the path is relative, we will
     look for the file relative to the current working directory,
     and then for the parent directory, until the project file is
     found or we have hit the top of the user's home directory.
@@ -312,8 +324,8 @@ package, and thus apply globally:
 
     Ignores the local ``cabal.project`` file and uses the default
     configuration with the local ``foo.cabal`` file. Note that
-    if this flag is set while the ``--project-file`` flag is also
-    set then this flag will be ignored.
+    this flag will be ignored if either of the ``--project-dir`` or
+    ``--project-file`` flags are also set.
 
 .. option:: --store-dir=DIR
 
@@ -868,6 +880,21 @@ feature was added.
     The command line variant of this flag is ``--enable-benchmarks`` and
     ``--disable-benchmarks``.
 
+.. cfg-field:: multi-repl: boolean
+               --enable-multi-repl
+               --disable-multi-repl
+    :synopsis: Enable starting a repl with multiple targets.
+
+    :default: ``False``
+
+    Allow starting GHCi with multiple targets. This requires GHC with multiple
+    home unit support (GHC-9.4+).
+
+    The closure of required components will be loaded.
+
+    The command line variant of this flag is ``--enable-multi-repl`` and
+    ``--disable-multi-repl``.
+
 .. cfg-field:: extra-prog-path: paths (newline or comma separated)
                --extra-prog-path=PATH
     :synopsis: Add directories to program search path.
@@ -1497,6 +1524,16 @@ running ``setup haddock``.
 
     There is no command line variant of this flag.
 
+.. cfg-field:: haddock-output-dir: path
+               --haddock-output-dir=PATH
+    :synopsis: Generate haddock documentation into this directory.
+
+    Generate haddock documentation into this directory instead of the default
+    location next to other build products.
+
+    This flag is provided as a technology preview and is subject to change in the
+    next releases.
+
 .. cfg-field:: open: boolean
                --open
     :synopsis: Open generated documentation in-browser.
@@ -1583,8 +1620,8 @@ Advanced global configuration options
 
     :default: ``~/.cabal/packages``
 
-    :strike:`The location where packages downloaded from remote
-    repositories will be cached.` Not implemented yet.
+    The location where packages downloaded from remote repositories will be
+    cached.
 
     The command line variant of this flag is
     ``--remote-repo-cache=DIR``.
@@ -1747,7 +1784,7 @@ Most users generally won't need these.
                --prefer-oldest
                --no-prefer-oldest
     :synopsis: Prefer the oldest versions of packages available.
-    :since:    3.8
+    :since:    3.10
 
     :default:  False
 
diff --git a/libraries/Cabal/doc/conf.py b/libraries/Cabal/doc/conf.py
index ef9551254..51ab333f8 100644
--- a/libraries/Cabal/doc/conf.py
+++ b/libraries/Cabal/doc/conf.py
@@ -13,7 +13,7 @@ import sphinx_rtd_theme
 sys.path.insert(0, os.path.abspath('.'))
 import cabaldomain
 
-version = "3.10.1.0"
+version = "3.11.0.0"
 
 extensions = [
     'sphinx.ext.extlinks',
diff --git a/libraries/Cabal/doc/internal/multi-repl.md b/libraries/Cabal/doc/internal/multi-repl.md
new file mode 100644
index 000000000..5f0f731e3
--- /dev/null
+++ b/libraries/Cabal/doc/internal/multi-repl.md
@@ -0,0 +1,218 @@
+---
+author: matthew
+title: Multiple Component support for cabal repl
+postName: cabal-multi-unit
+categories: cabal, ghc, hls, hasura, open-source
+showtoc: true
+---
+
+Following on from [our work implementing support for compiling multiple units
+at once in GHC](https://well-typed.com/blog/2022/01/multiple-home-units/), we have now been extending the ecosystem to take
+advantage of this new support. This work has once again been made possible by
+[Hasura](https://hasura.io/). This work continues our productive and
+[long-running
+collaboration](https://well-typed.com/blog/2022/05/hasura-supports-haskell-tooling/)
+on important and difficult tooling tasks which will ultimately benefit the
+entire ecosystem.
+
+This post focuses on updates to the `cabal repl` command, allowing
+multiple components to be loaded at once into an interactive session. The work is being
+reviewed in [Cabal MR #8726](https://github.com/haskell/cabal/pull/8726), and should
+be available in a future release of `cabal-install`.
+
+<!-- more -->
+
+# Multiple Component Repl
+
+When using `cabal`, most commands take a "target" which specifies which units you want
+to operate on. A command such as `cabal build <target>` will resolve all the units that
+the target `<target>` resolves to, and build all of them. The behaviour of the `cabal repl`
+command is different: you must specify a single unit to build.
+
+Here are some common targets which you can specify when using `cabal`.
+
+* `all`: Build all the locally defined components.
+* `exe:haskell-language-server`: Build the executable called `haskell-language-server`
+* `lib:pkg-a lib:pkg-b`: Build the local libraries pkg-a and pkg-b.
+* `src/Main.hs`: Build the unit which `src/Main.hs` belongs to.
+
+After enabling multi-repl, passing a target specification to `cabal repl` which
+resolves to multiple units will load all those units into a single repl session.
+For example:
+
+```
+cabal repl --enable-multi-repl lib:pkg-a lib:pkg-b
+```
+
+When the modules are compiled, the unit which they came from is listed next
+to the module name. The `interactive` herald in the build plan indicates that
+the library will be loaded into GHCi rather than being built like a normal package.
+
+```
+In order, the following will be built (use -v for more details):
+ - pkg-a-0 (interactive) (lib) (first run)
+ - pkg-b-0 (interactive) (lib) (dependency rebuilt)
+Preprocessing library for pkg-a-0..
+Preprocessing library for pkg-b-0..
+GHCi, version 9.4.3: https://www.haskell.org/ghc/  :? for help
+[1 of 2] Compiling Foo[pkg-a-0-inplace]
+[2 of 2] Compiling Bar[pkg-b-0-inplace]
+Ok, two modules loaded.
+```
+
+You will need to use at least `ghc-9.4.1` in order to use multiple unit support.
+It's advised to use `ghc-9.4.5` or `9.6.1`, in order to benefit from bug fixes.
+
+## Enabling Multi-repl
+
+There are three ways to enable the multi-repl depending on how much you like it:
+
+* Globally: Add `multi-repl: True` to your `~/.cabal/config` file.
+* Project-wide: Add `multi-repl: True` to your cabal.project file.
+* Per-invocation: Pass `--enable-multi-repl` when invoking `cabal repl`.
+
+A future cabal version is likely to enable multi-repl by default. For the time being,
+and due to the experimental nature of the command and lack of support in ghci for some features,
+the multi-repl feature is opt-in.
+
+# Closure Property for Multiple Home Units
+
+For tools or libraries using the GHC API there is one very [important closure property](https://well-typed.com/blog/2022/01/multiple-home-units/#closure-property-for-home-units)
+which must be adhered to:
+
+> Any dependency which is not a home unit must not (transitively) depend on a home unit.
+
+For example, if you have three units `p`, `q` and `r`, and `p` depends on `q` which depends on `r`, then it
+is illegal to load both `p` and `r` as home units but not `q`, because `q` is a dependency of the home unit `p` which depends
+on another home unit `r`.
+
+`cabal` will automatically enable loading of all units which are needed by the closure
+property (including non-local) packages. Given the previous example, if you specify
+on the command line `cabal repl lib:p lib:q` then `lib:r` will also be loaded
+into the same session as it is needed for the closure property.
+
+# Configuring and Promised Dependencies
+
+The lowest-level interface which the `Cabal` library provides in order to build a package
+is the [`Setup.hs` script](https://cabal.readthedocs.io/en/3.10/setup-commands.html).
+This consists of a normal Haskell file which depends on the `Cabal` library and can be executed
+in order to build the package. This is done, after compiling `Setup.hs`, via the following invocations:
+
+```
+./Setup configure
+./Setup build
+```
+
+The `configure` phase checks to make sure that everything is in order so that when
+the build phase is run we know that all the environmental dependencies have already
+been provisioned by the user.
+
+In the very old days, people would compile and run `Setup.hs` themselves in order to
+build a package, but these days, all the interactions with `Setup.hs` are managed by a
+higher-level build tool such as `cabal-install`, `stack` or `nix`. All of these tools
+ultimately call `Setup.hs` scripts.
+
+The main technical change to enable the multi-repl was to modify the `Setup.hs`
+scripts to allow you to configure a package before all its dependencies are
+built. Now you can **promise** to `Setup.hs`
+that a certain dependency will be built by the time we attempt to build the unit. Since
+all units in a project are going to be built at the same time with one GHC invocation, they
+all need to be configured before anything else is built. So we just **promise** that all local
+packages will be built.
+
+```
+./Setup configure --promised-dependency=pkg-a
+```
+
+In addition to the `configure` and `build` commands, `Setup.hs` also provides a `repl`
+command which starts `GHCi` and loads a single component.
+
+```
+./Setup repl
+```
+
+This design is quite awkward because the `Setup.hs` scripts operate on a per-component basis. The
+interface is not aware of the existence of complicated multi-component projects, that is solely the
+domain of higher-level tools like `cabal-install`. Therefore, instead of starting the repl from
+the `Setup.hs` script, we need to start a multi-repl from `cabal-install`. However, the `Setup.hs`
+script is still responsible for computing the arguments we need to pass to GHC in order to compile
+that component. The solution is to allow the `repl` command to write its arguments into a file
+so that they can be collected later by `cabal-install` to correctly start a multi-component session.
+
+```
+./Setup repl --repl-multi-file=multi-args
+# Arguments can be found in the `multi-args` directory.
+```
+
+This allows all the units in your project to be configured before any of them are built.
+After a project is configured, the `Setup` executable can be consulted to find out what
+options GHC **would** use to build the unit, and because we have **promised** to
+make sure things are built in the right order, we can supply these options to GHC
+in order to start a multi unit GHCi session.
+
+# HLS support for multiple home units
+
+Zubin has already updated HLS to use native multiple home unit support for GHC-9.4.
+
+The missing piece has been a mechanism to set up a multi component session which
+satisfies the closure property. Without such a mechanism, HLS would construct a multiple component session
+incrementally by adding units to a session as they are opened by the user. For a complicated
+project structure, users would have to very carefully load their files in the right order to
+get a session which worked correctly.
+Even worse, this doesn't even work when a non-local package is needed to satisfy the
+closure property.
+
+HLS consults cabal in order to set up a session: it invokes `cabal repl`
+and intercepts the final call to `ghc` which would start the repl. That command is then
+used as the options which are needed for the session in order to compile that unit.
+
+Now that `cabal repl` supports creating a command line which specifies the options
+for multiple components at once, it makes sense to augment the HLS session loading logic
+to also understand these command lines in order to set up a whole multi-component session
+at once.
+
+HLS now can understand and parse the kind of command line produced by a multiple
+component session. As a result:
+
+* The correct session is initialised up-front. Loading any component in your
+  local project will work seamlessly and quickly.
+* The time taken to initialise a session is reduced, because no local dependencies
+  are built before the session is started. All local components are configured
+  before anything is built.
+* Cabal ensures the closure property holds, even for non-local packages.
+
+I have been testing this support when working on `cabal` and `ghc`, both projects
+with many local dependencies and the experience is much improved. In particular for
+`cabal`, the non-local `hackage-security` package is needed for the closure property but could
+never be loaded before. This made using HLS on `cabal` very error-prone because if
+you opened a file from the `Cabal` library and `cabal-install` library, you would
+break the session without a way to recover it. For `ghc`, it is a lifeline to be able to
+edit packages like `template-haskell` and see the changes ripple upwards through all
+the boot libraries and compiler.
+
+# Limitations
+
+Now that there is a way to easily create and invoke a multi-repl session,
+users are probably going to run into limitations of the multi-repl.
+
+Many features are not yet implemented because there is not a good way to change what
+the "active unit" of the repl session is. Some more careful thinking needs to be done
+to modify the GHCi interface in order to work nicely with multiple components in all situations.
+
+At this time, the multi-repl is best used for interactive development situations where
+you want to use the repl to obtain fast-feedback about your project.
+We have made sure that the multi-repl works with `ghcid` for example.
+
+# Conclusion
+
+Adding `cabal repl` support for multiple home units allows developers to easily
+interact with multiple home unit support in GHC. There are still limitations to
+the repl supported in multiple unit sessions, but as more users start using and wanting this
+feature we hope to expand the repl to work properly with multiple home units as well.
+
+Well-Typed is able to work on GHC, HLS, Cabal and other core Haskell
+infrastructure thanks to funding from various sponsors. If your company might be
+able to contribute to this work, sponsor maintenance efforts, or fund the
+implementation of other features, please
+[read about how you can help](/blog/2022/11/funding-ghc-maintenance) or
+[get in touch](mailto:info@well-typed.com).
diff --git a/libraries/Cabal/doc/nix-local-build.rst b/libraries/Cabal/doc/nix-local-build.rst
index 70ebd2835..207a65a37 100644
--- a/libraries/Cabal/doc/nix-local-build.rst
+++ b/libraries/Cabal/doc/nix-local-build.rst
@@ -268,7 +268,7 @@ this folder (the most important two are first):
     ``cabal sdist --list-only``. Thus if you do not list all your
     source files in a Cabal file, Cabal may fail to recompile when you
     edit them.
-``config`` (same format as ``cabal.project``)
+``config`` (binary)
     The full project configuration, merged from ``cabal.project`` (and
     friends) as well as the command line arguments.
 ``compiler`` (binary)
diff --git a/libraries/Cabal/doc/setup-commands.rst b/libraries/Cabal/doc/setup-commands.rst
index 988d431e6..3e71aac47 100644
--- a/libraries/Cabal/doc/setup-commands.rst
+++ b/libraries/Cabal/doc/setup-commands.rst
@@ -9,7 +9,9 @@ GHC provides the commands ``runhaskell`` and ``runghc`` (they are equivalent)
 to allow you to run Haskell programs without first having to compile them
 (scripts). The low-level Cabal interface is implemented using ``Setup.hs``
 scripts. You should prefer using higher level interface provided by nix-style
-builds.
+builds. However, the documentation of the low level interface below may be helpful
+to high level interface users as well, because it delves into internal details
+common to both and omitted elsewhere.
 
 ::
 
@@ -868,6 +870,16 @@ Miscellaneous options
     *pkgname* in a :pkg-field:`build-depends` should be resolved to
     *ipid*.
 
+.. option:: --promised-dependency[=pkgname=ipid]
+
+    Very much like ``--dependency`` but the package doesn't need to already
+    be installed. This is useful when attempting to start multiple component
+    sessions with cabal's multi-repl or projects such as Haskell Language Server.
+
+    Several checks which are enabled for ``--dependency``s are disabled for promised
+    dependencies, so prefer to use ``--dependency`` if you know that the dependency
+    is already installed.
+
 .. option:: --exact-configuration
 
     This changes Cabal to require every dependency be explicitly
@@ -1104,6 +1116,10 @@ Copy the files into the install locations and (for library packages)
 register the package with the compiler, i.e. make the modules it
 contains available to programs.
 
+Additionally for GHC the ``extra-compilation-artifacts`` directory is copied if present.
+GHC plugins can store extra data in subfolders.
+(e.g. *extra-compilation-artifacts/PLUGIN_NAME/HS_MODULE.txt*)
+
 The `install locations <#installation-paths>`__ are determined by
 options to `runhaskell Setup.hs configure`_.
 
diff --git a/libraries/Cabal/solver-benchmarks/solver-benchmarks.cabal b/libraries/Cabal/solver-benchmarks/solver-benchmarks.cabal
index b64e9d9f8..fdcbad607 100644
--- a/libraries/Cabal/solver-benchmarks/solver-benchmarks.cabal
+++ b/libraries/Cabal/solver-benchmarks/solver-benchmarks.cabal
@@ -31,7 +31,7 @@ library
     base,
     bytestring,
     containers,
-    Cabal-syntax ^>= 3.10,
+    Cabal-syntax ^>= 3.11,
     directory,
     filepath,
     optparse-applicative,
diff --git a/libraries/Cabal/templates/Lexer.x b/libraries/Cabal/templates/Lexer.x
index b9f2d8330..a10045e13 100644
--- a/libraries/Cabal/templates/Lexer.x
+++ b/libraries/Cabal/templates/Lexer.x
@@ -83,22 +83,22 @@ $instresc        = $printable
 tokens :-
 
 <0> {
-  @bom?  { \_ len _ -> do
-              when (len /= 0) $ addWarning LexWarningBOM
+  @bom?  { \pos len _ -> do
+              when (len /= 0) $ addWarningAt pos LexWarningBOM
               setStartCode bol_section
               lexToken
          }
 }
 
 <bol_section, bol_field_layout, bol_field_braces> {
-  @nbspspacetab* @nl         { \_pos len inp -> checkWhitespace len inp >> adjustPos retPos >> lexToken }
+  @nbspspacetab* @nl         { \pos len inp -> checkWhitespace pos len inp >> adjustPos retPos >> lexToken }
   -- no @nl here to allow for comments on last line of the file with no trailing \n
   $spacetab* "--" $comment*  ;  -- TODO: check the lack of @nl works here
                                 -- including counting line numbers
 }
 
 <bol_section> {
-  @nbspspacetab*   { \pos len inp -> checkLeadingWhitespace len inp >>
+  @nbspspacetab*   { \pos len inp -> checkLeadingWhitespace pos len inp >>
                                      if B.length inp == len
                                        then return (L pos EOF)
                                        else setStartCode in_section
@@ -123,7 +123,7 @@ tokens :-
 }
 
 <bol_field_layout> {
-  @nbspspacetab* { \pos len inp -> checkLeadingWhitespace len inp >>= \len' ->
+  @nbspspacetab* { \pos len inp -> checkLeadingWhitespace pos len inp >>= \len' ->
                                   if B.length inp == len
                                     then return (L pos EOF)
                                     else setStartCode in_field_layout
@@ -172,17 +172,17 @@ toki t pos  len  input = return $! L pos (t (B.take len input))
 tok :: Token -> Position -> Int -> ByteString -> Lex LToken
 tok  t pos _len _input = return $! L pos t
 
-checkLeadingWhitespace :: Int -> ByteString -> Lex Int
-checkLeadingWhitespace len bs
+checkLeadingWhitespace :: Position -> Int -> ByteString -> Lex Int
+checkLeadingWhitespace pos len bs
     | B.any (== 9) (B.take len bs) = do
-        addWarning LexWarningTab
-        checkWhitespace len bs
-    | otherwise = checkWhitespace len bs
+        addWarningAt pos LexWarningTab
+        checkWhitespace pos len bs
+    | otherwise = checkWhitespace pos len bs
 
-checkWhitespace :: Int -> ByteString -> Lex Int
-checkWhitespace len bs
+checkWhitespace :: Position -> Int -> ByteString -> Lex Int
+checkWhitespace pos len bs
     | B.any (== 194) (B.take len bs) = do
-        addWarning LexWarningNBSP
+        addWarningAt pos LexWarningNBSP
         return $ len - B.count 194 (B.take len bs)
     | otherwise = return len
 
diff --git a/libraries/Cabal/validate.sh b/libraries/Cabal/validate.sh
index b23989a2c..1a0d63780 100755
--- a/libraries/Cabal/validate.sh
+++ b/libraries/Cabal/validate.sh
@@ -12,7 +12,6 @@
 #   See https://github.com/haskell/cabal/issues/8049
 HC=ghc
 CABAL=cabal
-CABALPLAN=cabal-plan
 JOBS=4
 LIBTESTS=true
 CLITESTS=true
@@ -50,7 +49,6 @@ Available options:
       --(no-)run-cli-suite          Run cabal-testsuite with client
   -w, --with-compiler HC            With compiler
       --with-cabal CABAL            With cabal-install
-      --with-cabal-plan CABALPLAN   With cabal-plan
       --extra-hc HC                 Extra compiler to run test-suite with
       --(no-)doctest                Run doctest on library
       --(no-)solver-benchmarks      Build and trial run solver-benchmarks
@@ -196,11 +194,6 @@ while [ $# -gt 0 ]; do
             shift
             shift
             ;;
-        --with-cabal-plan)
-            CABALPLAN=$2
-            shift
-            shift
-            ;;
         --extra-hc)
             EXTRAHCS="$EXTRAHCS $2"
             shift
@@ -315,7 +308,7 @@ BUILDDIR=dist-newstyle-validate-$BASEHC
 CABAL_TESTSUITE_BDIR="$(pwd)/$BUILDDIR/build/$ARCH/$BASEHC/cabal-testsuite-3"
 
 CABALNEWBUILD="${CABAL} v2-build $JOBS -w $HC --builddir=$BUILDDIR --project-file=$PROJECTFILE"
-CABALPLANLISTBIN="${CABALPLAN} list-bin --builddir=$BUILDDIR"
+CABALLISTBIN="${CABAL} list-bin --builddir=$BUILDDIR --project-file=$PROJECTFILE"
 
 # header
 #######################################################################
@@ -327,7 +320,6 @@ cat <<EOF
 compiler:            $HC
 runhaskell:          $RUNHASKELL
 cabal-install:       $CABAL
-cabal-plan:          $CABALPLAN
 jobs:                $JOBS
 Cabal tests:         $LIBTESTS
 cabal-install tests: $CLITESTS
@@ -347,7 +339,6 @@ print_header print-tool-versions
 
 timed $HC --version
 timed $CABAL --version
-timed $CABALPLAN --version
 
 for EXTRAHC in $EXTRAHCS; do
     timed $EXTRAHC --version
@@ -368,8 +359,11 @@ step_time_summary() {
 
 step_build() {
 print_header "build"
+print_header "Step Build: dry run"
 timed $CABALNEWBUILD $TARGETS --dry-run || exit 1
-$CABALPLAN topo --builddir=$BUILDDIR || exit 1
+print_header "Step Build: full build plan (cached and to-be-built dependencies):"
+jq -r '."install-plan" | map(."pkg-name" + "-" + ."pkg-version" + " " + ."component-name") | join("\n")' "$BUILDDIR/cache/plan.json"
+print_header "Step Build: actual build"
 timed $CABALNEWBUILD $TARGETS || exit 1
 }
 
@@ -386,22 +380,22 @@ timed doctest -package-env=doctest-Cabal --fast Cabal/Distribution Cabal/Languag
 step_lib_tests() {
 print_header "Cabal: tests"
 
-CMD="$($CABALPLANLISTBIN Cabal-tests:test:unit-tests) $TESTSUITEJOBS --hide-successes --with-ghc=$HC"
+CMD="$($CABALLISTBIN Cabal-tests:test:unit-tests) $TESTSUITEJOBS --hide-successes --with-ghc=$HC"
 (cd Cabal-tests && timed $CMD) || exit 1
 
-CMD="$($CABALPLANLISTBIN Cabal-tests:test:check-tests) $TESTSUITEJOBS --hide-successes"
+CMD="$($CABALLISTBIN Cabal-tests:test:check-tests) $TESTSUITEJOBS --hide-successes"
 (cd Cabal-tests && timed $CMD) || exit 1
 
-CMD="$($CABALPLANLISTBIN Cabal-tests:test:parser-tests) $TESTSUITEJOBS --hide-successes"
+CMD="$($CABALLISTBIN Cabal-tests:test:parser-tests) $TESTSUITEJOBS --hide-successes"
 (cd Cabal-tests && timed $CMD) || exit 1
 
-CMD="$($CABALPLANLISTBIN Cabal-tests:test:rpmvercmp) $TESTSUITEJOBS --hide-successes"
+CMD="$($CABALLISTBIN Cabal-tests:test:rpmvercmp) $TESTSUITEJOBS --hide-successes"
 (cd Cabal-tests && timed $CMD) || exit 1
 
-CMD="$($CABALPLANLISTBIN Cabal-tests:test:no-thunks-test) $TESTSUITEJOBS --hide-successes"
+CMD="$($CABALLISTBIN Cabal-tests:test:no-thunks-test) $TESTSUITEJOBS --hide-successes"
 (cd Cabal-tests && timed $CMD) || exit 1
 
-CMD=$($CABALPLANLISTBIN Cabal-tests:test:hackage-tests)
+CMD=$($CABALLISTBIN Cabal-tests:test:hackage-tests)
 (cd Cabal-tests && timed $CMD read-fields) || exit 1
 if $HACKAGETESTSALL; then
     (cd Cabal-tests && timed $CMD parsec)    || exit 1
@@ -418,14 +412,14 @@ fi
 step_lib_suite() {
 print_header "Cabal: cabal-testsuite"
 
-CMD="$($CABALPLANLISTBIN cabal-testsuite:exe:cabal-tests) --builddir=$CABAL_TESTSUITE_BDIR $TESTSUITEJOBS --with-ghc=$HC --hide-successes"
+CMD="$($CABALLISTBIN cabal-testsuite:exe:cabal-tests) --builddir=$CABAL_TESTSUITE_BDIR $TESTSUITEJOBS --with-ghc=$HC --hide-successes"
 (cd cabal-testsuite && timed $CMD) || exit 1
 }
 
 step_lib_suite_extras() {
 for EXTRAHC in $EXTRAHCS; do
 
-CMD="$($CABALPLANLISTBIN cabal-testsuite:exe:cabal-tests) --builddir=$CABAL_TESTSUITE_BDIR $TESTSUITEJOBS --with-ghc=$EXTRAHC --hide-successes"
+CMD="$($CABALLISTBIN cabal-testsuite:exe:cabal-tests) --builddir=$CABAL_TESTSUITE_BDIR $TESTSUITEJOBS --with-ghc=$EXTRAHC --hide-successes"
 (cd cabal-testsuite && timed $CMD) || exit 1
 
 done
@@ -438,19 +432,19 @@ step_cli_tests() {
 print_header "cabal-install: tests"
 
 # this are sorted in asc time used, quicker tests first.
-CMD="$($CABALPLANLISTBIN cabal-install:test:long-tests) $TESTSUITEJOBS --hide-successes"
+CMD="$($CABALLISTBIN cabal-install:test:long-tests) $TESTSUITEJOBS --hide-successes"
 (cd cabal-install && timed $CMD) || exit 1
 
 # This doesn't work in parallel either
-CMD="$($CABALPLANLISTBIN cabal-install:test:unit-tests) -j1 --hide-successes"
+CMD="$($CABALLISTBIN cabal-install:test:unit-tests) -j1 --hide-successes"
 (cd cabal-install && timed $CMD) || exit 1
 
 # Only single job, otherwise we fail with "Heap exhausted"
-CMD="$($CABALPLANLISTBIN cabal-install:test:mem-use-tests) -j1 --hide-successes"
+CMD="$($CABALLISTBIN cabal-install:test:mem-use-tests) -j1 --hide-successes"
 (cd cabal-install && timed $CMD) || exit 1
 
 # This test-suite doesn't like concurrency
-CMD="$($CABALPLANLISTBIN cabal-install:test:integration-tests2) -j1 --hide-successes --with-ghc=$HC"
+CMD="$($CABALLISTBIN cabal-install:test:integration-tests2) -j1 --hide-successes --with-ghc=$HC"
 (cd cabal-install && timed $CMD) || exit 1
 }
 
@@ -460,7 +454,7 @@ CMD="$($CABALPLANLISTBIN cabal-install:test:integration-tests2) -j1 --hide-succe
 step_cli_suite() {
 print_header "cabal-install: cabal-testsuite"
 
-CMD="$($CABALPLANLISTBIN cabal-testsuite:exe:cabal-tests) --builddir=$CABAL_TESTSUITE_BDIR --with-cabal=$($CABALPLANLISTBIN cabal-install:exe:cabal) $TESTSUITEJOBS  --with-ghc=$HC --hide-successes"
+CMD="$($CABALLISTBIN cabal-testsuite:exe:cabal-tests) --builddir=$CABAL_TESTSUITE_BDIR --with-cabal=$($CABALLISTBIN cabal-install:exe:cabal) $TESTSUITEJOBS  --with-ghc=$HC --hide-successes"
 (cd cabal-testsuite && timed $CMD) || exit 1
 }
 
@@ -470,7 +464,7 @@ CMD="$($CABALPLANLISTBIN cabal-testsuite:exe:cabal-tests) --builddir=$CABAL_TEST
 step_solver_benchmarks_tests() {
 print_header "solver-benchmarks: test"
 
-CMD="$($CABALPLANLISTBIN solver-benchmarks:test:unit-tests)"
+CMD="$($CABALLISTBIN solver-benchmarks:test:unit-tests)"
 (cd Cabal && timed $CMD) || exit 1
 }
 
@@ -478,7 +472,7 @@ step_solver_benchmarks_run() {
 print_header "solver-benchmarks: run"
 
 SOLVEPKG=Chart-diagrams
-CMD="$($CABALPLANLISTBIN solver-benchmarks:exe:hackage-benchmark) --cabal1=$CABAL --cabal2=$($CABALPLANLISTBIN cabal-install:exe:cabal) --trials=5 --packages=$SOLVEPKG --print-trials"
+CMD="$($CABALLISTBIN solver-benchmarks:exe:hackage-benchmark) --cabal1=$CABAL --cabal2=$($CABALLISTBIN cabal-install:exe:cabal) --trials=5 --packages=$SOLVEPKG --print-trials"
 (cd Cabal && timed $CMD) || exit 1
 }
 
